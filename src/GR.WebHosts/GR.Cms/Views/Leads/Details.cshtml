@using GR.Core.Extensions
@using GR.Crm.Leads.Abstractions.Models
@model Lead

@{
	ViewData["Title"] = Model.Name;
}

<LeadDetails />

@section Scripts {
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/primitiveTextArea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components/button.js"></script>
	<script src="~/themes/gear/js/components/link.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/modalForms/editLeadModalForm.js"></script>
	<script src="~/themes/gear/js/components/phone-input/addHideInput.js"></script>
	<script src="~/themes/gear/js/components/phone-input/phone-input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/progressBar.js"></script>
	<script src="~/themes/gear/js/components/audit.js"></script>
	<script src="~/themes/gear/js/components/dropdown.js"></script>
	<script src="~/themes/gear/js/components/comment.js"></script>
	<script src="~/themes/gear/js/components/commentCreate.js"></script>
	<script src="~/themes/gear/js/components/commentsMain.js"></script>
	<script src="~/themes/gear/js/components/phone-input/switcher.js"></script>
	<script>
		const leadObject = JSON.parse('@Html.Raw(Model.SerializeAsJson().Replace("\\t", "").Replace("\\\"", "\\\\\\\""))');
		const taskDateFormat = 'YYYY/MM/DD';
		const taskDatePickerFormat = 'yyyy/mm/dd';
		const utils = {
			convertToSelectList: array => {
				return array.map(e => {
					const newObj = {
						label: e.name,
						value: e.id
					}
					return newObj;
				});
			},
			setBodyProgressCursor() {
				$("body").css("cursor", "progress");
			},
			unsetBodyProgressCursor() {
				$("body").css("cursor", "default");
			},
			changeObjPropInArrayById: (array, value, prop, id, idProp) => {
				for (var i in array) {
					if (array[i][idProp] == id) {
						array[i][prop] = value;
						break;
					}
				}
			},
		};

		Vue.component('Members', {
			template: "#members-template",
			data() {
				return {
					leadMembers: [],
					dataLoaded: false,
					ownerRoleId: "11447a80-eff9-4f68-b24f-353ab2d5ee92",
				}
			},
			computed: {
				owner() {
					return this.leadMembers.filter(m => m.teamRoleId == this.ownerRoleId)[0];
				},
				members() {
					return this.leadMembers.filter(m => m.teamRoleId != this.ownerRoleId);
				},
			},
			created() {
				if (leadObject.team)
					this.getTeamById(leadObject.team.id).then(team => {
						this.leadMembers = team.teamMembers;
						this.dataLoaded = true;
					});
				else {
					this.dataLoaded = true;
				}
			},
			methods: {
				getTeamById(teamId) {
					return new Promise((res, rej) => {
						customAjaxRequest(apiEndpoints.Team.GetTeamById, 'GET', { teamId }).then(team => {
							res(team);
						}).catch(e => {
							toast.notifyErrorList(e);
							rej(e);
						});
					});
				},
				findObjectByPropValue(array, value, prop) {
					return array.find(x => x[prop] === value);
				},
				initials(name, surname) {
					return name && surname ? `${name.charAt(0)} ${surname.charAt(0)}` : '--';
				},
			}
		});
		Vue.component('LeadTasks', {
			template: "#lead-tasks-template",
			data() {
				return {
					apiUrl: apiEndpoints.TaskManager.GetTaskByLeadId,
					httpMethod: 'get',
					loadTable: false,
					modalTaskKey: 0,
					refreshInputs: 0,
					tableFields: [
						{
							name: 'name',
							title: 'Name',
							visible: true,
							sortField: 'name',
							formatter: value => `<a href='/TaskManager/details?id=${value}'>${value}</a>`
						},
						{
							name: 'status',
							title: 'Status',
							visible: true,
							formatter: value => this.taskStatuses[value].label,
							sortField: 'status'
						},
						{
							name: 'assignedUsers',
							visible: true,
							title: t('system_taskmanager_assigne'),
							dataClass: 'td-users'
						},
						{
							name: 'endDate',
							title: 'End date',
							visible: true,
							sortField: 'endDate'
						},
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'taskPriority',
								sortField: 'taskPriority',
								direction: 'desc'
							}
						]
					},
					tableActions: {
						single: {
							//"edit": { name: "Edit", icon: "edit" },
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						singleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: "Delete permanently", icon: "delete" }
						},
						multiple: {
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						multipleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: "Delete permanently", icon: "delete" }
						}
					},
					tableKey: 0,
					taskStatuses: [],
					taskTypes: [],
					taskValues: {},
					taskPriorities: [],
					editableTaskModal: false,
					waitAddButton: false
				}
			},
			computed: {
				customQueryparams() {
					return {
						'leadId': leadObject.id,
						'includeDeleted': true
					}
				},
				pageOptionsComponents() {
					return [
						{
							name: 'Button',
							props: {
								label: '@Localizer["system_taskmanager_add_task"]',
								className: 'ml-auto  fixed-length',
								btnType: 'primary',
								onClick: this.openAddTaskModal
							}
						}
					]
				},
				getOrganizations() {
					return this.$store.state.allOrganizations;
				},
				getLeads() {
					return this.$store.state.allLeads;
				},
				getAgreements() {
					return this.$store.state.allAgreements;
				},
				getTaskStatuses() {
					return this.$store.state.allTaskStatusList;
				},
				getTaskPriorities() {
					return this.$store.state.allTaskPriorityList;
				},
				getTaskTypes() {
					return this.$store.state.allTaskTypes;
				},
				usersSelectList() {
					return this.$store.state.allUsers;
				},
				modalTasklabel() {
					return this.editableTaskModal ? t('system_taskmanager_edit_task') : t('system_taskmanager_add_task');
				},
				modalTaskSubmits() {
					const resultArray = [
						{
							name: 'Button',
							props: {
								label: '@Localizer["cancel"]',
								btnType: 'outline-secondary',
								onClick: () => {
									$(`#${this.modalTaskProps.id}`).modal("hide");
								}
							}
						}];
					if (!this.editableTaskModal) {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label:'@Localizer["add"]',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddButton,
									onMouseDown: () => {
										this.addAndNew = false;
									}
								}
							}
						);
					} else {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddButton,
									onMouseDown: () => {
										this.addAndNew = false;
									}
								}
							}
						);
					}
					return resultArray;
				},
				modalTaskProps() {
					return {
						id: 'taskModal-lead',
						modalSize: '',
						label: this.modalTasklabel,
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'task-name',
									type: 'text',
									label: t('name'),
									required: true,
									value: this.taskValues.name,
									className: 'col-12',
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-organizationId',
									label: t('organization'),
									options: this.convertToSelectList(this.getOrganizations),
									value: '@Model.OrganizationId',
									disabled: true,
									className: 'col-12'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-leadId',
									label: t('details_lead'),
									options: this.convertToSelectList(this.getLeads),
									value: '@Model.Id',
									disabled: true,
									size: 10,
									searchable: true,
									className: 'col-12'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-agreementId',
									label: 'Agreement',
									options: this.convertToSelectList(this.getAgreements),
									value: this.taskValues.agreementId,
									size: 10,
									searchable: true,
									className: 'col-12'
								}
							},
							{
								name: 'Datepicker',
								props: {
									id: 'task-startDate',
									label: t('system_taskmanager_start_date'),
									required: true,
									format: taskDatePickerFormat,
									value: this.taskValues.startDate,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Datepicker',
								props: {
									id: 'task-endDate',
									label: t('system_taskmanager_end_date'),
									required: true,
									format: taskDatePickerFormat,
									value: this.taskValues.endDate,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-status',
									label: t('system_taskmanager_status'),
									options: this.convertArrayToSelectList(this.getTaskStatuses, 'text', 'value', 'system_taskmanager_'),
									value: this.taskValues.status,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-taskPriority',
									label: t('system_taskmanager_task_priority'),
									options: this.convertArrayToSelectList(this.getTaskPriorities, 'text', 'value', 'system_taskmanager_'),
									value: this.taskValues.taskPriority,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-taskTypeId',
									label: t('type'),
									options: this.getTaskTypes,
									value: this.taskValues.taskTypeId,
									className: 'col-12'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'task-userTeam',
									label: 'Assignee',
									searchable: true,
									required: true,
									multiple: true,
									options: this.usersSelectList,
									value: this.taskValues.userTeam,
									className: 'col-12'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'task-description',
									label: t('description'),
									required: true,
									value: this.taskValues.description,
									className: 'col-12'
								}
							}
						],
						formSubmits: this.modalTaskSubmits,
						onSubmit: () => {
							if (!this.editableTaskModal) {
								if (this.addAndNew) {
									this.addNewTask().then(() => {
										this.resetTaskValues();
										this.refreshInputs++;
									});
								} else {
									this.addNewTask().then(() => {
										$(`#${this.modalTaskProps.id}`).modal("hide");
									});
								}
							} else {
								this.updateTask().then(() => {
									$(`#${this.modalTaskProps.id}`).modal("hide");
								});
							}
						}
					}
				},
			},
			mounted() {
				if (sessionStorage.getItem("showModal")) {
					this.openAddTaskModal();
					sessionStorage.removeItem("showModal");
				}
			},
			methods: {
				openAddTaskModal() {
					this.makeInitialRequests();
					this.editableTaskModal = false;
					this.waitAddButton = false;
					this.resetTaskValues();
					$(`#${this.modalTaskProps.id}`).modal("show");
				},
				makeInitialRequests() {
					if (!this.loadTable) {
						this.$store.dispatch('getAllTaskTypes');
						this.$store.dispatch('getAllTaskStatusList');
						this.$store.dispatch('getAllTaskPriorityList');
						this.$store.dispatch('getAllAgreements');
						this.$store.dispatch('getAllLeads');
						this.$store.dispatch('getAllUsers');
						this.$store.dispatch('getAllOrganizations');
						const promises = [
							customAjaxRequest(apiEndpoints.TaskManager.GetTaskPriorityList),
							customAjaxRequest(apiEndpoints.TaskManager.GetTaskStatusList)
						];
						Promise.all(promises).then(result => {
							this.taskPriorities = this.convertArrayToSelectList(result[0], 'text', 'value', 'system_taskmanager_');
							this.taskStatuses = this.convertArrayToSelectList(result[1], 'text', 'value', 'system_taskmanager_');
							this.loadTable = true;
						});
					}
				},
				async addNewTask() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.TaskManager.CreateTask, 'POST', this.taskValues).then(() => {
							this.waitAddButton = false;
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							this.waitAddButton = false;
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async deleteTasks(tasks) {
					tasks.forEach((id, i, a) => {
						customAjaxRequest(apiEndpoints.TaskManager.DeleteTaskPermanent, 'POST', { id }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deactivateTasks(tasks) {
					tasks.forEach((id, i, a) => {
						customAjaxRequest(apiEndpoints.TaskManager.DeleteTask, 'POST', { id }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async activateTasks(tasks) {
					tasks.forEach((id, i, a) => {
						customAjaxRequest(apiEndpoints.TaskManager.RestoreTask, 'POST', { id }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadTask(id) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.TaskManager.GetTask, 'GET', { id }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(e);
						});
					});
				},
				async updateTask() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.TaskManager.UpdateTask, 'POST', this.taskValues).then(() => {
							this.waitAddButton = false;
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							this.waitAddButton = false;
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				resetTaskValues() {
					this.taskValues = {
						name: '',
						description: '',
						startDate: moment().format(taskDateFormat).toString(),
						endDate: moment().add(1, 'h').format(taskDateFormat).toString(),
						leadId: '@Model.Id',
						agreementId: null,
						organizationId: '@Model.OrganizationId',
						userTeam: [],
						taskPriority: '0',
						status: '0',
						taskTypeId: null
					}
					this.modalTaskKey++;
				},
				emitValueTask(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.taskValues[val.id.replace('task-', '')] = newVal;
					if (val.id == 'task-organizationId') {
						this.listLeadsSelect = [];
						customAjaxRequest(apiEndpoints.Leads.GetLeadsByOrganizationId, 'GET', { organizationId: val.value }).then(result => {
							this.listLeadsSelect = this.convertArrayToSelectList(result, 'name', 'id');
							this.modalTaskKey++;
						});
					}
				},
				getPriorityBadge(val) {
					let badgeClass = 'badge-outline-default';
					switch (val.value) {
						case '0':
							badgeClass= 'badge-outline-info';
							break;
						case '1':
							badgeClass= 'badge-outline-primary';
							break;
						case '2':
							badgeClass= 'badge-outline-warning';
							break;
						case '3':
							badgeClass= 'badge-outline-danger';
							break;
					}
					return `<span class="badge ${badgeClass}">${val.label}</span>`;
				},
				action(action) {
					switch (action.key) {
						case 'deactivate': {
							this.deactivateTasks(action.value);
							break;
						} case 'activate': {
							this.activateTasks(action.value);
							break;
						} case 'delete': {
							this.deleteTasks(action.value);
							break;
						}
					}
				},
				initials(name, surname) {
					return name && surname ? `${name.charAt(0)} ${surname.charAt(0)}` : 'UP';
				},
				convertArrayToSelectList(array, textProp, valueProp, translatePrefix = null) {
					return array.map(e => {
						const text = e[textProp];
						const newObj = {
							label: translatePrefix ? window.translate(translatePrefix + text.toLowerCase()) : text,
							value: e[valueProp]
						}
						return newObj;
					});
				},
				convertToSelectList(array) {
					if (array.length === 0) return [];
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
			}
		});
		Vue.component('Contacts', {
			template: "#contacts-template",
			data() {
				return {
					modalImportKey: 0,
					apiUrl: apiEndpoints.Leads.GetAllContactsByLeadId,
					httpMethod: 'get',
					tableFields: [
						{
							name: 'firstName',
							title: t('name'),
							sortField: 'firstName',
							visible: true
						},
						{
							name: 'email',
							title: t('email'),
							sortField: 'email',
							visible: true
						},
						{
							name: 'phone',
							title: t('system_phone'),
							sortField: 'phone',
							visible: true
						},
						{
							name: 'jobPosition',
							title: t('details_job_position'),
							sortField: 'jobPosition',
							visible: true
						},
						{
							name: 'organization',
							title: t('organization'),
							sortField: 'organization',
							visible: true
						},
						{
							name: 'isDeleted',
							title: t('system_status'),
							sortField: 'isDeleted',
							visible: true
						}
					],
					jobPositionsListSelect: [],
					jobPosition: {},
					orgId: null,
					searchString: '',
					editContactId: '',
					contactValues: {
						organizationId: '',
						email: '',
						phone: '',
						requiredPhone: true,
						phoneList: [],
						firstName: '',
						lastName: '',
						description: '',
						jobPositionId: '',
					},
					phoneList: [
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: ''
						},
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: ''
						},
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: ''
						}],
					labels: [],
					emailLabels: [],
					emailList: [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					],
					hideInput: {
						class: '',
						checked: false,
					},
					hideEmailInputs: ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'],
					hidePhoneInputs: ['', 'hide-field', 'hide-field'],
					pageOptionsComponents:
						[{
							name: 'Button',
							props: {
								label: '@Localizer["contacts_add_contact"]',
								className: 'ml-auto  fixed-length',
								btnType: 'primary',
								onClick: () => {
									this.makeInitialRequests();
									this.editableContactModal = false;
									this.resetContactModalValues();
									this.refreshInputs++;
									this.modalKey++;
									$(`#${this.modalContactOrgProps.id}`).modal("show");
								}
							}
						}],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'firstName',
								sortField: 'firstName',
								direction: 'asc'
							}
						]
					},
					tableActions: {
						single: {
							"delete": { name: "Delete contact from opportunity", icon: "delete" }
						},
						singleDisabled: {
						},
						multiple: {
							"delete": { name: "Delete contacts from opportunity", icon: "delete" }
						},
						multipleDisabled: {

						}
					},
					tableKey: 0,
					addAndNew: false,
					waitAddButton: false,
					editableContactModal: false,
					refreshInputs: 0,
					modalKey: 0,
					leadContactId: '',
					organizationContacts: [],
					leadOrganization: '@Model.OrganizationId',
					dateFormatTask: 'YYYY/MM/DD',
					datePickerFormatTask: 'yyyy/mm/dd',
					dataLoaded: false,
					currentHiddenPhoneIndex: 1,
					currentHiddenEmailIndex: 1,
				};
			},
			computed: {
				emailLabelsFromStore() {
					return this.$store.state.allEmailLabels;
				},
				phoneLabels() {
					return this.$store.state.allPhoneLabels;
				},
				organizationsListSelect() {
					return this.$store.state.allOrganizationsForSelect;
				},
				customQueryparams() {
					return {
						'leadId': '@Model.Id',
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				modalContactLabel() {
					return this.editableContactModal ? t('contacts_edit_contact') : t('contacts_add_contact');
				},
				contactFormSubmits() {
					const resultArray = [
						{
							name: 'Button',
							props: {
								label: '@Localizer["cancel"]',
								btnType: 'outline-secondary',
								onClick: () => {
									$(`#${this.modalContactProps.id}`).modal("hide");
									$(`#${this.modalContactOrgProps.id}`).modal("show");
								}
							}
						}
					];
					if (!this.editableContactModal) {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddButton,
									onMouseDown: () => {
										this.addAndNew = false;
									}
								}
							}
						);
					} else {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						);
					}
					return resultArray;
				},
				modalContactOrgProps() {
					return {
						id: 'contactOrgModal',
						label: 'Add contact',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'lead-organizationId',
									label: 'Organization',
									required: true,
									disabled: true,
									options: this.organizationsListSelect,
									value: this.leadOrganization,
									className: 'col-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact-Id',
									label: 'Contact',
									required: true,
									searchable: true,
									options: this.convertContactsToSelectList(this.organizationContacts),
									value: this.leadContactId,
									className: this.organizationContacts.length > 0  ? 'col-6' : 'col-5'
								}
							},
							{
								name: 'Button',
								props: {
									label: '<span>&#43;<span/>',
									className: this.organizationContacts.length > 0 ? "d-none" : "px-10 py-14",
									wrapper: "div",
									wrapperClass: "col-1",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalContactOrgProps.id}`).modal("hide");
										this.resetContactModalValues();
										$(`#${this.modalContactProps.id}`).modal("show");

									}
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: '@Localizer["cancel"]',
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalContactOrgProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: 'Add',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddButton,
								}
							}
						],
						onSubmit: () => {
							this.addLeadContact().then(() => {
								this.organizationContacts = this.organizationContacts.filter(i => i.id != this.leadContactId);
								$(`#${this.modalContactOrgProps.id}`).modal("hide");
							});
						}
					}
				},
				modalContactProps() {
					return {
						id: 'contactModal',
						label: this.modalContactLabel,
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'contact-firstName',
									type: 'text',
									label: t('system_first_name'),
									required: true,
									className: 'col-12 col-md-6',
									value: this.contactValues.firstName,
									validator: value => fieldValidationFunc(value, 'nameLetters'),
									validatorInput: value => fieldValidationInputFunc(value, 'nameLetters')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-lastName',
									type: 'text',
									label: t('system_last_name'),
									required: true,
									className: 'col-12 col-md-6',
									value: this.contactValues.lastName,
									validator: value => fieldValidationFunc(value, 'nameLetters'),
									validatorInput: value => fieldValidationInputFunc(value, 'nameLetters')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact-organizationId',
									label: t('organization'),
									required: true,
									searchable: true,
									disabled: true,
									options: this.organizationsListSelect,
									value: '@Model.OrganizationId',
									className: 'col-12'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email1',
									type: 'email',
									label: t('email'),
									required: true,
									className: 'col-6',
									value: this.emailList[0].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel1',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[0].label,
									className: 'col-5'
								}
							},
							{
								name: 'Button',
								props: {
									label: '&#43;',
									className: 'btn btn-outline-secondary btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: 'text-center',
									disabled: !this.getEmailList[4],
									onClick: () => this.emitValueContact({ value: '', id: `HideEmailInput${this.currentHiddenEmailIndex++}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email2',
									type: 'email',
									label: t('email'),
									className: 'col-6 ' + this.getEmailList[1],
									value: this.emailList[1].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel2',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[1].label,
									className: 'col-5 ' + this.getEmailList[1]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getEmailList[1]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInput${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email3',
									type: 'email',
									label: t('email'),
									className: 'col-6 ' + this.getEmailList[2],
									value: this.emailList[2].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel3',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[2].label,
									className: 'col-5 ' + this.getEmailList[2]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getEmailList[2]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInput${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email4',
									type: 'email',
									label: t('email'),
									className: 'col-6 ' + this.getEmailList[3],
									value: this.emailList[3].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel4',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[3].label,
									className: 'col-5 ' + this.getEmailList[3]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getEmailList[3]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInput${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email5',
									type: 'email',
									label: t('email'),
									className: 'col-6 ' + this.getEmailList[4],
									value: this.emailList[4].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel5',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[4].label,
									className: 'col-5 ' + this.getEmailList[4]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getEmailList[4]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInput${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'contact-Phone1',
									type: 'text',
									label: 'Phone',
									required: this.hideInput.class == '' ? true : false,
									className: 'col-6',
									disabled: this.hideInput.class == '' ? false : true,
									dialCode: this.phoneList[0].dialCode,
									defaultCountry: this.phoneList[0].countryCode,
									value: this.phoneList[0].phone,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_PhoneLabel1',
									label: 'Label',
									disabled: this.hideInput.class == '' ? false : true,
									noneSelectedText: 'Select label',
									options: this.labels,
									value: this.phoneList[0].label,
									className: 'col-5'
								}
							},
							{
								name: 'Button',
								props: {
									label: '&#43;',
									className: 'btn btn-outline-secondary btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: 'text-center',
									disabled: Boolean(this.hideInput.class || this.hidePhoneInputs[0] || !this.hidePhoneInputs[2]),
									onClick: () => this.emitValueContact({ value: '', id: `HideInput${this.currentHiddenPhoneIndex++}` })
								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'contact-Phone2',
									type: 'text',
									label: 'Phone',
									className: 'col-6 ' + this.hidePhoneInputs[1] + ' ' + this.hideInput.class,
									dialCode: this.phoneList[1].dialCode,
									defaultCountry: this.phoneList[1].countryCode,
									value: this.phoneList[1].phone,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_PhoneLabel2',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.labels,
									value: this.phoneList[1].label,
									className: 'col-5 ' + this.hidePhoneInputs[1] + ' ' + this.hideInput.class
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.hidePhoneInputs[1]} ${this.hideInput.class}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideInput${this.currentHiddenPhoneIndex--}` })
								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'contact-Phone3',
									type: 'text',
									label: 'Phone',
									className: 'col-6 ' + this.hidePhoneInputs[2] + ' ' + this.hideInput.class,
									dialCode: this.phoneList[2].dialCode,
									defaultCountry: this.phoneList[2].countryCode,
									value: this.phoneList[2].phone,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_PhoneLabel3',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.labels,
									value: this.phoneList[2].label,
									className: 'col-5 ' + this.hidePhoneInputs[2] + ' ' + this.hideInput.class
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.hidePhoneInputs[2]} ${this.hideInput.class}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideInput${this.currentHiddenPhoneIndex--}` })
								}
							},
							{
								name: 'Switcher',
								props: {
									id: 'N/ALabel',
									value: this.contactValues.notAvailable,
									wrapper: 'Div',
									wrapperClass: 'col-12 d-flex align-items-center mb-3',
									label: 'N/A'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact-jobPositionId',
									label: t('details_job_position'),
									options: this.jobPositionsListSelect,
									value: this.contactValues.jobPositionId,
									className: 'col-11'
								}
							},
							{
								name: 'Button',
								props: {
									label: '<span>&#43;<span/>',
									className: "allwaysWrapped",
									wrapper: "div",
									wrapperClass: "col-1",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalContactProps.id}`).modal("hide");
										this.resetJobPostion();
										this.modalKey++;
										$(`#${this.modalAddJobPosition.id}`).modal("show");
									}
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'contact-description',
									label: t('description'),
									className: 'col-12',
									value: this.contactValues.description,
								}
							}
						],
						formSubmits: this.contactFormSubmits,
						onSubmit: () => {
							if (!this.editableContactModal) {
								this.addNewContact().then(() => {
										$(`#${this.modalContactProps.id}`).modal("hide");
										$(`#${this.modalContactOrgProps.id}`).modal("show");
								});
							} else {
								this.updateContact().then(() => {
									$(`#${this.modalContactProps.id}`).modal("hide");
								});
							}
						}
					}
				},
				getPhoneList() {
					return this.phoneList;
				},
				getEmailList() {
					return this.hideEmailInputs;
				}
			},
			methods: {
				makeInitialRequests() {
					if (!this.dataLoaded) {
						this.$store.dispatch('getAllPhoneLabels');
						this.$store.dispatch('getAllEmailLabels');
						this.$store.dispatch('getAllOrganizationsForSelect');

						customAjaxRequest(apiEndpoints.Phone.GetAllPhoneLabels).then(result => {
							this.labels = this.convertLabelsToSelectList(result);
						});
						this.labels = this.phoneLabels;
						this.emailLabels = this.emailLabelsFromStore;

						customAjaxRequest(apiEndpoints.Address.GetAllCountries).then(result => {
							this.countries = this.convertToSelectList(result);
						});
						customAjaxRequest(apiEndpoints.JobPosition.GetAllJobPositions).then(result => {
							this.jobPositionsListSelect = this.convertToSelectList(result);
						});
						if (!this.props) {
							customAjaxRequest(apiEndpoints.Contact.GetContactByOrganizationId, 'GET', { organizationId: '@Model.OrganizationId' }).then(result => {
								let list = JSON.parse('@Html.Raw(Model.Contacts.Select(x => x.ContactId).SerializeAsJson().Replace("\\t" , "").Replace("\\\"", "\\\\\\\""))');
								this.organizationContacts = result.filter(item => !list.includes(item.id)) ;
							});
						}
						this.dataLoaded = true;
					}
				},
				async addEmailList(ListToAdd) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Email.AddEmailRange, 'PUT', { model: ListToAdd }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async addLeadContact() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Leads.AddLeadContact, 'POST', { leadId: '@Model.Id', contactId: this.leadContactId }).then(() => {
							this.tableKey++;
							//this.resetPageOptionsComponents(false);
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async addNewContact() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Contact.AddNewContact, 'PUT', this.contactValues).then(result => {
							this.organizationContacts.push({
								firstName: this.contactValues.firstName,
								id: result
							})
							if (this.hideInput.class == '') {
								let addList = [];
								for (i = 0; i < 3; i++) {
									if (this.hidePhoneInputs[i] == '') {
										addList.push({
											phone: this.phoneList[i].phone,
											countryCode: this.phoneList[i].countryCode,
											dialCode: this.phoneList[i].dialCode,
											label: this.phoneList[i].label,
											contactId: result
										});
									}
								}
								this.addPhoneList(addList);
							}

							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.hideEmailInputs[i] == '') {
									EmailListAdd.push({
										email: this.emailList[i].email,
										label: this.emailList[i].label,
										contactId: result
									});
								}
							}

							if (EmailListAdd.length > 0)
								this.addEmailList(EmailListAdd);

							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async addPhoneList(ListToAdd) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Phone.AddPhoneRange, 'PUT', { model: ListToAdd }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async updatePhoneList(ListToUpdate) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Phone.UpdateRangePhone, 'POST', { model: ListToUpdate }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async updateEmailList(ListToUpdate) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Email.UpdateRangeEmail, 'POST', { model: ListToUpdate }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async updateContact() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Contact.UpdateContact, 'POST', this.contactValues).then(result => {
							if (this.hideInput.class == '') {
								//construct add and update list for phones
								let updateList = [];
								let addList = [];
								for (i = 0; i < 3; i++) {
								if (this.hidePhoneInputs[i] == '') {
									if (this.phoneList[i].id) {
										updateList.push(this.phoneList[i]);
									}
									else {
										addList.push({
											phone: this.phoneList[i].phone,
											countryCode: this.phoneList[i].countryCode,
											dialCode: this.phoneList[i].dialCode,
											label: this.phoneList[i].label,
											contactId: result
										});
									}
								}
							}
								if (updateList.length > 0)
									this.updatePhoneList(updateList);
								if (addList.length > 0)
									this.addPhoneList(addList);
							}

							//construct add and update list for emails
							let EmailListUpdate = [];
							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.hideEmailInputs[i] == '') {
									if (this.emailList[i].id) {
										EmailListUpdate.push(this.emailList[i]);
									}
									else {
										EmailListAdd.push({
											email: this.emailList[i].email,
											label: this.emailList[i].label,
											contactId: result
										});
									}
								}
							}
							if (EmailListUpdate.length > 0)
								this.updateEmailList(EmailListUpdate);
							if (EmailListAdd.length > 0) {
								this.addEmailList(EmailListAdd);
							}

							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async deactivateContacts(array) {
					array.forEach((contactId, i, a) => {
						customAjaxRequest(apiEndpoints.Contact.DeactivateContactById, 'POST', { contactId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async activateContacts(array) {
					array.forEach((contactId, i, a) => {
						customAjaxRequest(apiEndpoints.Contact.ActivateContactById, 'POST', { contactId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deleteContacts(array) {
					array.forEach((contactId, i, a) => {
						customAjaxRequest(apiEndpoints.Leads.DeleteLeadContact, 'DELETE', { contactId, leadId: '@Model.Id' }).then(() => {
							this.loadContact(contactId).then(result => {
								this.organizationContacts.push(result);
							});
							if (i === a.length - 1) {
								this.resetPageOptionsComponents(true);
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadContact(contactId) {
					return new Promise((resolve, reject) => {
						$.ajax({
							url: '/api/Contact/GetContactById',
							type: 'GET',
							contentType: "application/x-www-form-urlencoded",
							data: { contactId },
							success: data => {
								if (Array.isArray(data)) {
									resolve(data);
								}
								else {
									if (data.is_success) {
										resolve(data.result);
									} else if (!data.is_success) {
										reject(data.error_keys);
									} else {
										resolve(data);
									}
								}
							},
							error: e => {
								reject(e);
							}
						});
					});
				},
				async deletePhone(phoneId) {
					customAjaxRequest(apiEndpoints.Phone.DeletePhoneById, 'DELETE', { phoneId }).then(() => {
						this.tableKey++;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				async deleteEmail(emailId) {
					customAjaxRequest(apiEndpoints.Email.DeleteEmailById, 'DELETE', { emailId }).then(() => {
						this.tableKey++;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				resetPageOptionsComponents(add) {
					if (add) {
						this.pageOptionsComponents = [{
							name: 'Button',
							props: {
								label: '@Localizer["contacts_add_contact"]',
								className: 'ml-auto  fixed-length',
								btnType: 'primary',
								onClick: () => {
									this.editableContactModal = false;
									this.resetContactModalValues();
									this.refreshInputs++;
									this.modalKey++;
									$(`#${this.modalContactOrgProps.id}`).modal("show");
								}
							}
						}
						];
					}
					else {
						this.pageOptionsComponents = undefined;
					}
				},
				editContact(contactId) {
					this.hideEmailInputs = [];
					this.hidePhoneInputs = [];
					this.loadContact(contactId).then(result => {
						this.editableContactModal = true;
						this.contactValues = result;
						this.phoneList = result.phoneList.length > 0 ? result.phoneList : [];

						this.emailList = result.emailList.length > 0 ? result.emailList : [];

						for (i = 0; i < this.phoneList.length; i++) {
							this.hidePhoneInputs.push('');
						}
						for (i = this.phoneList.length; i < 3; i++) {
							this.hidePhoneInputs.push('hide-field');
							this.phoneList.push(
								{
									phone: '',
									countryCode: 'MD',
									dialCode: '373',
									label: '',
									contactId: contactId
								}
							);
						}
						this.hidePhoneInputs[0] = '';
						if (this.contactValues.notAvailable) {
							this.hideInput = {
								class: 'hide-field',
								checked: true
							}
						}
						else {
							this.hideInput = {
								class: '',
								checked: false
							}
						}
						for (i = 0; i < this.emailList.length; i++) {
							this.hideEmailInputs.push('');
						}
						for (i = this.emailList.length; i < 5; i++) {
							this.hideEmailInputs.push('hide-field');
							this.emailList.push(
								{
									email: '',
									label: '',
								}
							);
						}
						this.hideEmailInputs[0] = '';
						this.editContactId = contactId;
						this.modalKey++;
						this.refreshInputs++;
						$(`#${this.modalContactProps.id}`).modal("show");
					});
				},
				resetContactModalValues() {
					this.contactValues = {
						organizationId: '@Model.OrganizationId',
						email: '',
						requiredPhone: true,
						phoneList: [],
						firstName: '',
						lastName: '',
						description: '',
						jobPositionId: '',
						notAvailable: false
					}
					this.phoneList = [
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: '',
							contactId: ''
						},
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: '',
							contactId: ''
						},
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: '',
							contactId: ''
						}
					];
					this.emailList = [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					];
					this.hideEmailInputs = ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'];
					this.hideInput = {
						class: '',
						checked: false,
					};
					this.hidePhoneInputs = ['', 'hide-field', 'hide-field'];
					this.editOrgId = '';
					this.currentHiddenEmailIndex = 1;
					this.currentHiddenPhoneIndex = 1;
				},
				resetPhone(index) {
					this.phoneList[index] = {
						phone: '',
						countryCode: 'MD',
						dialCode: '373',
						label: '',
						contactId: ''
					};
				},
				resetEmail(index) {
					this.emailList[index] = {
						email: '',
						label: ''
					};
					this.emailList.push({
						email: '',
						label: ''
					});
					this.emailList.pop();
				},
				emitValueContact(val) {
					if (val.id.includes('HideEmailInput')) {
						let index = val.id[14] - '0';
						if (val.value == '') this.hideEmailInputs[index] = val.value;
						else {
							this.hideEmailInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.emailList[index - 1].id) {
									this.deleteEmail(this.emailList[index - 1].id);
								}
								this.resetEmail(index - 1);
							}
						}
						this.hideEmailInputs.push(val.value);
						this.hideEmailInputs.pop();
					}
					if (val.id.includes('contact-email')) {
						let index = val.id[13] - '0';
						this.emailList[index - 1].email = val.value;
					}
					if (val.id.includes('contact_EmailLabel')) {
						let index = val.id[18] - '0';
						this.emailList[index - 1].label = val.value;
					}

					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.contactValues[val.id.replace('contact-', '')] = newVal;

					if (val.id == 'contact-organizationId') {
						this.newOrgId == newVal;
					}

					if (val.id.includes('contact-Phone')) {
						let length = val.id.length;
						let index = (val.id[length - 1] - '0') - 1;
						this.phoneList[index].phone = val.value.number;
						this.phoneList[index].countryCode = val.value.countryCode;
						this.phoneList[index].dialCode = val.value.dialCode;
					}
					if (val.id.includes('contact_PhoneLabel')) {
						let length = val.id.length;
						let index = (val.id[length - 1] - '0') - 1;
						this.phoneList[index].label = val.value;
					}

					if (val.id.includes('HideInput')) {
						let index = val.id[9] - '0';
						if (val.value == '') this.hidePhoneInputs[index] = val.value;
						else {
							this.hidePhoneInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.phoneList[index - 1].id) {
									this.deletePhone(this.phoneList[index - 1].id);
								}
								this.resetPhone(index - 1);
							}
						}
						this.hidePhoneInputs.push(val.value);
						this.hidePhoneInputs.pop();
					}
					if (val.id == 'N/ALabel') {
						this.hideInput = val.value;
						this.contactValues.notAvailable = val.value.checked;
						if (this.phoneList[0].id) {
							this.deletePhone(this.phoneList[0].id);
						}
						this.resetPhone(0);
					}
				},
				emitValueContactOrg(val) {
					this.leadContactId = val.value
				},
				convertToSelectList(array) {
					if (array.length === 0) return [];
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				convertContactsToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.firstName + ' ' + e.lastName,
							value: e.id
						}
						return newObj;
					});
				},
				convertEmailsToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e,
							value: e
						}
						return newObj;
					});
				},
				convertPhoneToSelectList(array) {
					if (array) {
						return array.map(e => {
							const newObj = {
								label: e.value,
								value: e.value,
								disabled: true,
							}
							return newObj;
						});
					} else return [];

				},
				convertLabelsToSelectList(array) {
					if (array) {
						let index = 0;
						return array.map(e => {
							const newObj = {
								label: e,
								value: index,
							}
							index++;
							return newObj;
						});
					} else return [];
				},
				convertUserToSelectList(array) {
					if (!array) return [];
					return array.map(e => {
						const newObj = {
							label: e.userName,
							value: e.id
						}
						return newObj;
					});
				},
				action(action) {
					switch (action.key) {
						case 'deactivate': {
							this.deactivateContacts(action.value);
							break;
						} case 'activate': {
							this.activateContacts(action.value);
							break;
						} case 'edit': {
							this.editContact(action.value[0]);
							break;
						} case 'delete': {
							this.deleteContacts(action.value);
							break;
						}

					}
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			}
		});
		Vue.component('Files',{
			template: "#files-template",
			data() {
				return {
					filesDataLoaded: false,
					refreshInputs: 0,
					modalKey: 0,
					fileUpload: {},
					files: [],
					waitAddButton: false,
					pageOptionsComponents: [
						{
							name: 'Button',
							props: {
								label: 'Add file',
								className: 'ml-auto  fixed-length',
								btnType: 'primary',
								onClick: this.resetFileModal,
								display: '@ViewBag.UserHasToken' == 'True'
							}
						},
						{
							name: 'Link',
							props: {
								href: `/home/LogInMicrosoft?leadId=${'@Model.Id'}`,
								display: '@ViewBag.UserHasToken' == 'False',
								text: 'Cloud Auth',
								className: 'btn btn-success ml-auto fixed-length text-white'
							}
						}
					],
				}
			},
			computed: {
				fileUploadModal() {
					return {
						id: 'fileModlat',
						label: "Upload file",
						formInputs: [
							{
								name: 'File',
								props: {
									id: 'upload-file',
									className: 'col-12',
									label: 'Upload File',
									required: true,
									acceptedExtensions: '.doc,.docx,.xlsx,.pd,.jpeg,.png,.jpg,.mpp'
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: '@Localizer["cancel"]',
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.fileUploadModal.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							this.uploadFile().then(() => {
								$(`#${this.fileUploadModal.id}`).modal("hide");
							});

						}
					}
				}
			},
			methods: {
				makeInitialRequests() {
					if (!this.filesDataLoaded) {
						if ('@ViewBag.UserHasToken' != 'False') {
							customAjaxRequest(apiEndpoints.Leads.GetFiles, 'GET', { leadId: '@Model.Id' }).then(result => {
								this.files = result;
								this.filesDataLoaded = true;
							});
						}
						else {
							this.filesDataLoaded = true;
						}
					}
				},
				emitValue(val) {
					this.fileUpload.file = val;
				},
				resetFileModal() {
					this.makeInitialRequests()
					this.fileUpload = {
						leadId: '@Model.Id',
						file: null
					}
					$(`#${this.fileUploadModal.id}`).modal("show");
				},
				uploadFile() {
					this.waitAddButton = true;
					const objToSendToAPI = {
						File: this.fileUpload.file,
						LeadId: '@Model.Id'
					};

					let form_data = new FormData();
					for (let key in objToSendToAPI) {
						form_data.append(key, objToSendToAPI[key]);
					}
					return new Promise((resolve, reject) => {
						return new Promise((resolve, reject) => {
							$.ajax({
								url: apiEndpoints.Leads.UploadFile,
								data: form_data,
								processData: false,
								contentType: false,
								type: "POST",
								success: (data) => {
									this.filesDataLoaded = false;
									$(`#${this.fileUploadModal.id}`).modal("hide");
									customAjaxRequest(apiEndpoints.Leads.GetFiles, 'GET', { leadId: '@Model.Id' }).then(result => {
										this.files = result;
										this.filesDataLoaded = true;
									});
									resolve(data);
									this.tableKey++;
								},
								error: (e) => {
									toast.notifyErrorList(e);
									reject(e);
								}
							});
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				}
			}
		});
		Vue.component('LeadDetails', {
			template: '#page-template',
			data() {
				return {
					pipeLineStages: [],
					stageId: '@Model.StageId',
					lead: leadObject,
					openEditLeadsModal: false,
					actions: {
						single: {
							"moveToStage": { name: "Move to stage", icon: "move" },
							"updateStatus": { name: "Change state", icon: "repeat" },
							"edit": { name: 'Edit', icon: "edit" },
							"deactivate": { name: "Deactivate", icon: "eye-off" },
						},
					},
					leadValues: {
						name: null,
						organizationId: null,
						pipeLineId: '@Model.Id',
						stageId: null,
						leadStateId: null,
						value: null,
						currencyCode: null,
						created: moment().format(taskDateFormat).toString(),
						deadLine: moment().add(5, 'd').format(taskDateFormat).toString(),
						members: [],
						owner: null,
						productType: null
					},
					modalStageKey: 0,
					refreshInputs: 0,
					leadStatesSelect: [],
					waitStageAddButton: false,
					modalStateKey: 0,
					leadStatesSelect: [],
					noGoStates: [],
					noGoStateModal: {},
				}
			},
			beforeCreate() {
				const breadcrumbs = [
					'Pipelines',
					`<a href="/PipeLine/PipeLineLeads?id=@Model.PipeLineId">@Model.PipeLine?.Name</a>`,
					`@Model.Name`
				]
				this.$store.dispatch("setCustomBreadcrumbsAction", breadcrumbs);
			},
			created: async function () {
				this.$store.dispatch('getAllUsers');
				const promises = [
					customAjaxRequest(apiEndpoints.Leads.GetAllLeadStates),
					customAjaxRequest(apiEndpoints.PipeLines.GetPipeLineStages, 'get', { pipeLineId: '@Model.PipeLineId' })
				];
				Promise.all(promises).then(result => {
					this.leadStatesSelect = this.convertToSelectList(result[0]);
					this.pipeLineStages = this.convertToSelectList(result[1]);
				});
			},
			computed: {
				stageIndex() {
					return this.pipeLineStages.findIndex(x => x.value == this.stageId);
				},
				usersListSelect() {
					return this.$store.state.allUsers;
				},
				membersUsers() {
					return this.usersListSelect;
				},
				modalStageLead() {
					return {
						id: 'stageLead',
						modalSize: 'sm',
						label: 'Change lead stage',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'stageUpdate-stageId',
									label: 'Please select stage:',
									required: true,
									options: this.pipeLineStages,
									className: 'col-12',
									value: this.leadValues.stageId
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: '@Localizer["cancel"]',
									btnType: 'outline-secondary',
									waiting: this.waitStageAddButton,
									onClick: () => {
										$(`#${this.modalStageLead.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									waiting: this.waitStageAddButton,
									btnType: 'success',
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							this.updateLeadStage().then((stageId) => {
								$(`#${this.modalStageLead.id}`).modal("hide");
								this.stageId = stageId;
							});
						}
					}
				},
                modalStateLead() {
                    return {
                        id: 'statusLead',
                        modalSize: 'sm',
                        label: 'Change lead state',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'leadStateId',
                                    label: 'Lead state',
                                    required: true,
                                    options: this.leadStatesSelect,
                                    className: 'col-12',
                                    value: this.leadValues.leadStateId
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitStatusAddButton,
                                    onClick: () => {
                                        $(`#${this.modalStateLead.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitStatusAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
						onSubmit: async () => {
							try {
								const stateId = await this.updateLeadState();
								$(`#${this.modalStateLead.id}`).modal("hide");
								const leadState = await customAjaxRequest(apiEndpoints.Leads.GetLeadStateById, 'GET', { stateId });
								console.log(leadState);
							} catch (err) {
								toast.notifyErrorList(err);
							}
                        }
                    }
                },
                modalNoGoState() {
                    return {
                        id: 'noGoStateModal',
                        label: 'AddNoGoState',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'entity-noGoState',
                                    label: 'NoGoStates',
                                    required: true,
                                    options: this.noGoStates,
                                    className: 'col-12',
                                    value: this.noGoStateModal.noGoStateId
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitTeamAddButton,
                                    onClick: () => {
                                        $(`#${this.modalNoGoState.id}`).modal("hide");
                                        $(`#${this.modalStateLead.id}`).modal("show");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitTeamAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.addLeadToNoGoState();
                        }
                    }
                },
			},
			methods: {
				edit() {
					window.location.href = '/Pipeline/edit?leadId=' + '@Model.Id';
				},
				convertToSelectList(array) {
					return array.length > 0 ? array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					}) : [];
				},
				openModal() {
					this.$refs['modals'].editLead('@Model.Id');
					this.openEditLeadsModal = true;
				},
				modalAction() {
					location.reload();
				},
				action(action) {
					switch (action.key) {
						case 'deactivate': {
							this.deactivateLeads(action.value[0]);
							break;
						} case 'edit': {
							this.edit();
							break;
						} case 'moveToStage': {
							this.changeLeadStage(action.value[0]);
							break;
						} case 'updateStatus': {
							this.changeLeadState(action.value[0]);
							break;
						}
					}
				},
				async changeLeadState(leadId, stageId) {
					utils.setBodyProgressCursor();
					this.leadValues = await this.loadLead(leadId);
					if (stageId) {
						this.loadStatesByStage(stageId);
					} else {
						this.loadAllStates();
					}
					this.modalStateKey++;
					$(`#${this.modalStateLead.id}`).modal("show");
					utils.unsetBodyProgressCursor();
				},
				async loadLead(leadId) {
					try {
						const lead = await customAjaxRequest(apiEndpoints.Leads.GetLeadById, 'GET', { leadId });
						return lead;
					} catch (err) {
						toast.notifyErrorList(err);
					}
				},
				async loadStatesByStage(stageId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Leads.GetAllLeadStatesByStage, 'GET', { stageId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					})
				},
				async loadAllStates() {
					customAjaxRequest(apiEndpoints.Leads.GetAllLeadStates, 'get').then(result => {
						this.leadStatesSelect = this.convertToSelectList(result);
					});
				},
				async deactivateLeads(leadId) {
					customAjaxRequest(apiEndpoints.Leads.DisableLead, 'DELETE', { leadId }).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				editLead(leadId) {
					window.location.href = 'Edit?leadId=' + leadId;
				},
				async changeLeadStage(leadId) {
					utils.setBodyProgressCursor();
					this.leadValues = await this.loadLead(leadId);
					this.displayStates = 'hide-field';
					this.modalStageKey++;
					$(`#${this.modalStageLead.id}`).modal("show");
					utils.unsetBodyProgressCursor();
				},
				emitValueStageUpdate(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.leadValues[val.id.replace('stageUpdate-', '')] = newVal;
					if (val.id == 'stageUpdate-stageId') {
						this.loadStatesByStage(val.value).then(result => {
							this.leadValues.leadStateId = null;
							this.displayStates = 'hide-field';
							this.leadStatesSelect = utils.convertToSelectList(result);
							if (this.leadStatesSelect.length == 1) {
								this.leadValues.leadStateId = this.leadStatesSelect[0].value;
							}
							else if (this.leadStatesSelect.length > 1) {
								this.displayStates = '';
							}
						});

					}
				},
				async loadStatesByStage(stageId) {
					try {
						const result = await customAjaxRequest(apiEndpoints.Leads.GetAllLeadStatesByStage, 'GET', { stageId });
						return result;
					} catch (err) {
						toast.notifyErrorList(err);
					}
				},
				async updateLeadStage() {
					try {
						this.waitStageAddButton = true;
						const values = {
							leadId: this.leadValues.id,
							stageId: this.leadValues.stageId,
							stateId: this.leadValues.leadStateId
						}
						await customAjaxRequest(apiEndpoints.Leads.MoveLeadToStage, 'POST', values);
						this.waitStageAddButton = false;
						return values.stageId;
					} catch (err) {
						toast.notifyErrorList(err);
						this.waitStageAddButton = false;
						return null;
					}
				},
				async updateLeadState() {
					try {
						this.waitStatusAddButton = true;
						const values = {
							leadId: this.leadValues.id,
							stateId: this.leadValues.leadStateId
						}
						await customAjaxRequest(apiEndpoints.Leads.ChangeLeadState, 'POST', values);
						this.waitStatusAddButton = false;
						return values.stateId;
					} catch (err) {
						toast.notifyErrorList(e);
						this.waitStatusAddButton = false;
						return err;
					}
				},
				emitValueLeadChanges(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.leadValues[val.id] = newVal;
					if (val.id == 'leadStateId' && val.value == '981bd00a-ecaf-4d1f-b691-925f855aef16') {
						$(`#${this.modalStateLead.id}`).modal("hide");
						this.resetModalNoGoState();
						$(`#${this.modalNoGoState.id}`).modal("show");
					}
					if (val.id == 'owner') {
						this.usersListSelect = this.membersUsers.map(m => {
							m.disabled = false;
							return m;
						});
						utils.changeObjPropInArrayById(this.membersUsers, true, 'disabled', newVal, 'value');
						this.leadValues.members = this.leadValues.members.filter(m => {
							return m != newVal;
						});
					}
				},
				resetModalNoGoState() {
					this.noGoStateModal = {
						leadId: '@Model.Id',
						noGoStateId: null
					}
				},
				addLeadToNoGoState() {
					customAjaxRequest(apiEndpoints.Leads.AddLeadToNoGoState, 'POST', this.noGoStateModal).then(() => {
						$(`#${this.modalNoGoState.id}`).modal("hide");
						$(`#${this.modalStateLead.id}`).modal("show");
					});
				},
			}
		});
		Vue.component('Comments', {
			template: '#comments-template',
			data() {
				return {
					apiUrl: apiEndpoints.Comments.GetAllCommentByLeadId,
					entityField: 'leadId',
					entityId: '@Model.Id'
				}
			}
		});
		Vue.component('LeadAudit', {
			template: "#audit-template",
			props: {
				pipelineStages: Array
			},
			data() {
				return {
					eventType: ['Deleted', 'Added', 'Updated', 'Restored', 'PermanentDeleted'],
					pageRequest: {
						includeDeleted: true,
						page: 1,
						pageSize: 50,
						recordId: '@Model.Id'
					},
				}
			},
			methods: {
				incrementPage() {
					this.pageRequest.page++;
				}
			},
		});
	</script>
	<script type="text/x-template" id="page-template">
		<div>
			<ul class="nav nav-tabs content-header-tabs mx-0">
				<li class="nav-item">
					<a class="nav-link active" data-toggle="tab" href="#details-tab" role="tab" aria-controls="details-tab" aria-selected="false">Opportunity</a>
				</li>
			</ul>
			<div class="tab-content">
				<div class="tab-pane fade show active" id="details-tab">
					<div class="row ml-10px mr-0">
						<div class="col-8">
							<ProgressBar :stages="pipeLineStages"
										 :stageIndex="stageIndex"
										 :stageId="stageId" />
							<div class="bg-white border rounded py-15 px-20 align-self-baseline">
								<div class="row">
									<div class="col-6 px-10">
										<h6>@Localizer["details"]</h6>

										<hr class="my-5px">
										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_state"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0 color-black">@Model.LeadState?.Name</p>
											</div>
										</div>

										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_value"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0 color-black">@Model.Value @Model.Currency?.Symbol</p>
											</div>
										</div>

										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_start_date"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0 color-black">@Model.Created</p>
											</div>
										</div>
										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_end_date"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0 color-black">@Model.DeadLine</p>
											</div>
										</div>
										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_organization"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0 color-black">
													<a href="/Organizations/Details?id=@Model.OrganizationId">@Model.Organization?.Name</a>
												</p>
											</div>
										</div>
										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_pipeline"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0">
													<a href="/PipeLine/PipeLineLeads?id=@Model.PipeLineId">@Model.PipeLine?.Name</a>
												</p>
											</div>
										</div>
										<div class="row no-gutters">
											<div class="col-fixed-220">
												<p class="p-sm mb-0">@Localizer["details_stage"]</p>
											</div>
											<div class="d-block mb-sm-0 mb-1">
												<p class="p-sm mb-0 color-black">@Model.Stage?.Name</p>
											</div>
										</div>
									</div>
									<div class="col-6 px-10">
										<div class="d-flex">
											<h6>Product & Service details</h6>
											<Dropdown :actions="actions.single"
													  :id="'@Model.Id'"
													  @@actionEmit="action" />
										</div>
										<hr class="my-5px mt-0">
										<div v-for="(productOrService, index) in lead.productOrServiceList">
											<div v-if="productOrService.productOrServiceId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">Product/Service:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.productOrService.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.productTypeId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">ProductType:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.productType.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.technologyTypeId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">TechnologyType:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.technologyType.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.serviceTypeId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">ServiceType:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.serviceType.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.developmentVariationId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">Development Variation:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.developmentVariation.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.consultancyVariationId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">Consultancy Variation:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.consultancyVariation.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.qaVariationId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">QA Variation:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.qaVariation.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.designVariationId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">Design Variation:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.designVariation.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.developementFrameworkId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">Developement Framework:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.developementFramework.name}}</p>
												</div>
											</div>
											<div v-if="productOrService.pmFrameworkId"
												 class="row no-gutters">
												<div class="col-fixed-220">
													<p class="p-sm mb-0">PM Framework:</p>
												</div>
												<div class="d-block mb-sm-0 mb-1">
													<p class="p-sm mb-0 color-black">{{productOrService.pmFramework.name}}</p>
												</div>
											</div>
										</div>
									</div>
								</div>
								@if (Model.Description != null)
								{
									<div class="row mt-3">
										<div class="col-12 px-10">
											<h6>@Localizer["description"]</h6>
											<hr class="my-5px">
											<div class="lead-description">
												@Html.Raw(Model.Description)
											</div>
										</div>
									</div>
								}
							</div>
							<div class="mt-2">
								<div>
									<LeadTasks />
								</div>
								<div>
									<Contacts />
								</div>
								<div>
									<Files />
								</div>
								<div>
									<Members />
								</div>
							</div>
						</div>
						<div class="col-4">
							<Comments />
							<LeadAudit :pipelineStages="pipeLineStages" />
						</div>
						<EditLeadModalForm ref="modals" @@action="modalAction" v-if="openEditLeadsModal" />
						<Modal :modalProps="modalStageLead" @@newValue="emitValueStageUpdate" :refreshInputs="refreshInputs" :inputsKey="modalStageKey" />
						<Modal :modalProps="modalStateLead" @@newValue="emitValueLeadChanges" :refreshInputs="refreshInputs" :inputsKey="modalStateKey" />
					</div>
				</div>
			</div>
		</div>
	</script>
	<script type="text/x-template" id="comments-template">
		<CommentsMain :apiUrl="apiUrl"
					  :entityField="entityField"
					  :entityId="entityId" />
	</script>
	<script type="text/x-template" id="audit-template">
		<Audit :pageRequest="pageRequest"
			   :stages="pipelineStages"
			   @@incrementPage="incrementPage" />
	</script>
	<script type="text/x-template" id="files-template">
		<div class="bg-white border rounded mb-2 padding">
			<PageOptionsBar :searcheable="false"
							:pageOptionsComponents="pageOptionsComponents"
							:addDefaultClassName="false"
							:pageOptionsName="'Upload Documents'"
							:collapsableTarged="'lead-files'"
							:collapsable="true"
							:dataLoaded="filesDataLoaded"
							@@getData="makeInitialRequests" />
			<div id="lead-files" class="collapse mt-2">
				<div v-if="!filesDataLoaded" class="group-loader">
					<Loader />
				</div>
				<template v-else>
					<div v-if="'@ViewBag.UserHasToken' != 'False'">
						<hr class="hr-description w-100 mx-0 mb-2">
						<div v-if="files.length > 0">
							<div class="d-flex align-items-center" v-for="file in files">
								<a v-bind:href="file.downloadUrl" class="mr-2 text-primary">{{file.name}}</a>
								<span class="text-secondary f-size-12">{{file.createDateTime}}</span>
							</div>
						</div>
						<div v-else>
							<p class="mb-0">There are no files</p>
						</div>
					</div>
					<div v-else>
						<h6 class="text-secondary">Please, log Into the cloud, in order to be able to download or upload files.</h6>
					</div>
				</template>
			</div>
			<Modal :refreshInputs="refreshInputs" :modalProps="fileUploadModal" @@newValue="emitValue" :inputsKey="modalKey" />
		</div>
	</script>
	<script type="text/x-template" id="contacts-template">
		<div class="bg-white border rounded mb-2">
			<PageOptionsBar :searcheable="false"
							:pageOptionsComponents="pageOptionsComponents"
							:className="'page-options-bar-details'"
							:pageOptionsName="'Contacts'"
							:collapsableTarged="'contact-table-lead-details'"
							:collapsable="true"
							:dataLoaded="dataLoaded"
							@@getData="makeInitialRequests" />
			<div id="contact-table-lead-details" class="collapse">
				<div v-if="!dataLoaded" class="table-loader"><Loader /></div>
				<template v-else>
					<Table :fields="tableFields"
						   :apiUrl="apiUrl"
						   :httpMethod="httpMethod"
						   @@triggeredMenuAction="action"
						   tableId="contacts-table"
						   :sortOrder="tableConfig.sortCol"
						   :customQueryparams="customQueryparams"
						   :hasCustomQUeryparams="true"
						   :initialPageSize="20"
						   :reload="tableKey"
						   dataPath="result.result"
						   :actionsSingle="tableActions.single"
						   :actionsSingleDisabled="tableActions.singleDisabled"
						   :actionsMultiple="tableActions.multiple"
						   :actionsMultipleDisabled="tableActions.multipleDisabled"
						   :haveContextMenu="true">
						<slot slot="firstName" slot-scope="props">
							<a :href="'/contact/details?id=' + props.rowData.id" @@click.stop>
								{{ props.rowData.firstName }} {{ props.rowData.lastName }}
							</a>
						</slot>
						<slot slot="phone" slot-scope="props">
							<span v-if="props.rowData.phone">+{{props.rowData.dialCode}} {{ props.rowData.phone }}</span>
						</slot>
						<slot slot="organization" slot-scope="props">
							<a v-if="props.rowData.organization" :href="'/organizations/details?id=' + props.rowData.organizationId" target="_blank" @@click.stop>
								{{ props.rowData.organization }}
							</a>
						</slot>
						<slot slot="email" slot-scope="props">
							<template v-if="props.rowData.email">
								<div v-for="email in props.rowData.email">
									{{ email }}
								</div>
							</template>
						</slot>
						<slot slot="phone" slot-scope="props">
							<template v-if="props.rowData.phone">
								<div v-for="phone in props.rowData.phone">
									{{ phone }}
								</div>
							</template>
						</slot>
					</Table>
				</template>
			</div>
			<Modal :refreshInputs="refreshInputs" :modalProps="modalContactProps" @@newValue="emitValueContact" :inputsKey="modalKey" />
			<Modal :refreshInputs="refreshInputs" :modalProps="modalContactOrgProps" @@newValue="emitValueContactOrg" :inputsKey="modalKey" />
		</div>
	</script>
	<script type="text/x-template" id="lead-tasks-template">
		<div class="bg-white border rounded mb-2">
			<PageOptionsBar :searcheable="false"
							:pageOptionsComponents="pageOptionsComponents"
							:className="'page-options-bar-details'"
							:pageOptionsName="'Tasks'"
							:collapsableTarged="'task-table-lead-details'"
							:collapsable="true"
							:dataLoaded="loadTable"
							@@getData="makeInitialRequests" />
			<div id="task-table-lead-details"
				 class="collapse">
				<div v-if="!loadTable" class="table-loader"><Loader /></div>
				<template v-else>
					<Table :fields="tableFields"
						   className="light-table"
						   :apiUrl="apiUrl"
						   :httpMethod="httpMethod"
						   @@triggeredMenuAction="action"
						   tableId="task-table"
						   :sortOrder="tableConfig.sortCol"
						   :customQueryparams="customQueryparams"
						   :hasCustomQUeryparams="true"
						   :initialPageSize="20"
						   :reload="tableKey"
						   dataPath="result.result"
						   :actionsSingle="tableActions.single"
						   :actionsSingleDisabled="tableActions.singleDisabled"
						   :actionsMultiple="tableActions.multiple"
						   :actionsMultipleDisabled="tableActions.multipleDisabled"
						   :haveContextMenu="true">
						<slot slot="assignedUsers" slot-scope="props">
							<a v-for="member in props.rowData.assignedUsers"
							   :key="member.id"
							   class="btn btn-outline-primary user-rectangle"
							   href="#"
							   @@click.stop.prevent>
								{{ initials(member.firstName, member.lastName) }}
							</a>
						</slot>
						<slot slot="name" slot-scope="props">
							<a :href="'/TaskManager/details?id=' + props.rowData.id" @@click.stop>
								{{ props.rowData.name }}
							</a>
						</slot>
					</Table>
				</template>
			</div>
			<Modal :modalProps="modalTaskProps" @@newValue="emitValueTask" :refreshInputs="refreshInputs" :inputsKey="modalTaskKey" />
		</div>
	</script>
	<script type="text/x-template" id="members-template">
		<div class="bg-white border rounded padding">
			<div v-if="!dataLoaded" class="group-loader"><Loader /></div>
			<template v-else>
				<h6>@Localizer["details_owner"]</h6>
				<hr class="hr-description w-100 mx-0 mb-2">
				<div class="mb-3 w-100 d-flex" v-if="leadMembers.length > 0">
					<div class="d-block mb-sm-0 mb-3 mr-2">
						<a class="btn btn-outline-primary user-rectangle"
						   href="#"
						   :title="owner.firstName + ' ' + owner.lastName">
							{{ initials(owner.firstName, owner.lastName) }}
						</a>
					</div>
					<div class="d-block">
						<h6 class="mb-0">
							<a href="#">{{owner.firstName + ' ' + owner.lastName}}</a>
						</h6>
					</div>
				</div>
				<template v-if="members.length > 0">
					<h6>@Localizer["details_members"]</h6>
					<hr class="hr-description w-100 mx-0 mb-2">
					<div class="w-100">
						<div class="w-100 d-flex mb-2" v-for="m in members" :key="m.id">
							<div class="d-block mb-sm-0 mb-3 mr-2">
								<a class="btn btn-outline-primary user-rectangle"
								   href="#"
								   :title="m.firstName + ' ' + m.lastName">
									{{ initials(m.firstName, m.lastName) }}
								</a>
							</div>
							<div class="d-block">
								<h6 class="mb-0">
									<a href="#">{{m.firstName + ' ' + m.lastName}}</a>
								</h6>
							</div>
						</div>
					</div>
				</template>
			</template>
		</div>
	</script>
}