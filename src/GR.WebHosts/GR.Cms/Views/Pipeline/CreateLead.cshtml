@using GR.Core.Extensions;
@using GR.Crm.PipeLines.Abstractions.Models;
@model PipeLine

@{
	ViewData["Title"] = "Add Opportunity";
}

<CreateLead />

@section Scripts {
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/primitiveTextArea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components/button.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/modalForms/editLeadModalForm.js"></script>
	<script src="~/themes/gear/js/components/phone-input/addHideInput.js"></script>
	<script src="~/themes/gear/js/components/phone-input/phone-input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/modalForms/editContactModalForm.js"></script>
	<script src="~/themes/gear/js/components/phone-input/switcher.js"></script>

	<script type="text/x-template" id="page-template">
		<form v-on:submit.prevent="addLead">
			<div class="d-flex">
				<div class="col-6  ml-2">
					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>General</h6>
						<hr class="hr-description mb-20px" />
						<Input :label="'Opportunity title'"
							   :required="True"
							   :className="'col-12 px-0'"
							   :value="lead.name"
							   :id="'lead-name'"
							   :type="'text'"
							   @@newValue="emitValue" />
						<Select :label="'Organization'"
								:className="'col-12 px-0'"
								:value="lead.organizationId"
								:options="organizationsListSelect"
								:searchable="True"
								:required="True"
								:id="'lead-organizationId'"
								:addBtn="true"
								@@openModal="openOrgModal"
								@@newValue="emitValue" />
						<Select :label="'Contact'"
								:className="'col-12 px-0'"
								:value="lead.contactsIds"
								:options="orgContacts"
								:multiple="True"
								:searchable="True"
								:id="'lead-contactsIds'"
								:addBtn="lead.organizationId ? true : false"
								@@newValue="emitValue"
								@@openModal="openContactModal(lead.organizationId)" />
						<div class="d-flex">
							<Datepicker :id="'lead-created'"
										:label="'Start date'"
										:required="True"
										:className="'col-4 px-0'"
										:format="taskDatePickerFormat"
										:value="lead.created"
										@@newValue="emitValue" />
							<Datepicker :id="'lead-deadLine'"
										:label="'End date'"
										:required="True"
										:className="'col-4'"
										:format="taskDatePickerFormat"
										:value="lead.deadLine"
										@@newValue="emitValue" />
							<Datepicker :id="'lead-clarificationDeadline'"
										:required="True"
										:label="'Clarification deadline'"
										:className="'col-4 px-0'"
										:format="taskDatePickerFormat"
										:value="lead.clarificationDeadline"
										@@newValue="emitValue" />
						</div>
						<Select :label="'Source'"
								:className="'col-12 px-0'"
								:value="lead.sourceId"
								:options="soucesListSelect"
								:searchable="True"
								:id="'lead-sourceId'"
								@@newValue="emitValue" />
						<Textarea :id="'lead-description'"
								  :label="'Description'"
								  :value="lead.description"
								  :className="'col-12 px-0'"
								  @@newValue="emitValue" />
					</div>

					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>Pipeline</h6>
						<hr class="hr-description" />
						<div class="mb-3"><span class="d-inline text-secondary">@Model.Name</span></div>
						<Select :label="'Stage'"
								:className="'col-12 px-0'"
								:required="True"
								:value="lead.stageId"
								:options="pipelineStagesListSelect"
								:searchable="True"
								:id="'lead-stageId'"
								@@newValue="emitValue" />
					</div>

					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>Financials</h6>
						<hr class="hr-description mb-20px" />
						<div class="d-flex">
							<Select :label="'Currency'"
									:className="'col-6 pl-0 pr-7-5px'"
									:value="lead.currencyCode"
									:options="currenciesListSelect"
									:required="lead.value != null && lead.value != ''"
									:searchable="True"
									:id="'lead-currencyCode'"
									@@newValue="emitValue" />
							<Input :label="'Budget forecasting'"
								   :className="'col-6 pr-0 pl-7-5px'"
								   :value="lead.value"
								   :id="'lead-value'"
								   :step="'any'"
								   :type="'number'"
								   @@newValue="emitValue" />
						</div>
					</div>

					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>Team</h6>
						<hr class="hr-description mb-20px" />
						<Select :label="'Owner'"
								:className="'col-12 px-0'"
								:value="lead.ownerId"
								:options="usersListSelect"
								:searchable="True"
								:id="'lead-ownerId'"
								:mustSearch="true"
								@@newValue="emitValue" />
						<Select :label="'Members'"
								:className="'col-12 px-0'"
								:value="lead.members"
								:options="getAllLdapUsers"
								:multiple="true"
								:searchable="True"
								:id="'lead-members'"
								:mustSearch="true"
								@@newValue="emitValue" />
					</div>
				</div>
				<div class="col-5 mr-2 pl-0 pr-4">
					<div class="bg-white border rounded mb-20px py-15 px-20" v-for="(prodOrServ, index) in productOrService" :key="index">
						<div class="d-flex">
							<h6>Product/Service</h6>
							<a v-show="index != 0 || (index === 0 && getProductService[index].productOrServiceId)"
							   href="#" class="ml-auto" v-on:click="removeProductService(index)">
								<svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-square" id="icon-0"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line></svg>
							</a>
						</div>
						<hr class="hr-description mb-20px" />
						<div class="mb-20px">

							<Radio :id="'productOrServiceId-' + index"
								   :className="'d-flex col-12 p-0'"
								   :options="getAllProductServices"
								   :value="getProductService[index].productOrServiceId"
								   @@newValue="emitProductServiceValue" />
						</div>
						<div v-show="getProductService[index].productOrServiceId === '666e1dd1-a596-4b1b-aa85-b14ac52727bf'">
							<Select :label="'Product Type'"
									:className="'col-12 px-0'"
									:value="productOrService[index].productTypeId"
									:options="getProductTypes"
									:searchable="True"
									:required="getProductService[index].productOrServiceId === '666e1dd1-a596-4b1b-aa85-b14ac52727bf'"
									:id="'productTypeId-' + index"
									@@newValue="emitProductServiceValue" />
							<div v-show="productOrService[index].productTypeId">
								<Select :label="'Technology Type'"
										:className="'col-12 px-0'"
										:value="productOrService[index].technologyTypeId"
										:options="getAllTechnologyTypes"
										:searchable="True"
										:id="'technologyTypeId-' + index"
										@@newValue="emitProductServiceValue" />
							</div>
						</div>
						<div v-show="productOrService[index].productOrServiceId === '4eeeb9b0-844f-4367-8d13-579586bb8e53'">
							<Select :label="'Service Type'"
									:className="'col-12 px-0'"
									:value="productOrService[index].serviceTypeId"
									:options="getServiceTypes"
									:searchable="True"
									:required="productOrService[index].productOrServiceId === '4eeeb9b0-844f-4367-8d13-579586bb8e53'"
									:id="'serviceTypeId-' + index"
									@@newValue="emitProductServiceValue" />
							<div v-show="productOrService[index].serviceTypeId === '42726aa2-725c-432d-35dd-08d77d8680ea'">
								<Select :label="'Development Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].developmentVariationId"
										:options="getDevelopementServices"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === '42726aa2-725c-432d-35dd-08d77d8680ea'"
										:id="'developmentVariationId-' + index"
										@@newValue="emitProductServiceValue" />
								<div v-show="getProductService[index].developmentVariationId">
									<Select :label="'Technology Type'"
											:className="'col-12 px-0'"
											:value="productOrService[index].technologyTypeId"
											:options="getAllTechnologyTypes"
											:searchable="True"
											:required="!!getProductService[index].developmentVariationId"
											:id="'-technologyTypeId-' + index"
											@@newValue="emitProductServiceValue" />
									<Select :label="'Developement Framework'"
											:className="'col-12 px-0'"
											:value="getProductService[index].developementFrameworkId"
											:options="getDevelopementFrameWorks"
											:searchable="True"
											:id="'developementFrameworkId-' + index"
											@@newValue="emitProductServiceValue" />
								</div>
							</div>
							<div v-show="productOrService[index].serviceTypeId === 'abf505e2-3e01-4c0d-b3ad-5348e121d9b0'">
								<Select :label="'Consultancy Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].consultancyVariationId"
										:options="getConsultancyService"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === 'abf505e2-3e01-4c0d-b3ad-5348e121d9b0'"
										:id="'consultancyVariationId-' + index"
										@@newValue="emitProductServiceValue" />
								<div v-show="getProductService[index].consultancyVariationId">
									<Select :label="'PM Framework'"
											:className="'col-12 px-0'"
											:value="getProductService[index].pmFrameworkId"
											:options="getPMFrameWorks"
											:searchable="True"
											:id="'pmFrameworkId-' + index"
											@@newValue="emitProductServiceValue" />
								</div>
							</div>
							<div v-show="productOrService[index].serviceTypeId === 'd3d407b5-e615-486d-eaaf-08d6e50b94b6'">
								<Select :label="'QA Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].qaVariationId"
										:options="getQaServices"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === 'd3d407b5-e615-486d-eaaf-08d6e50b94b6'"
										:id="'qaVariationId-' + index"
										@@newValue="emitProductServiceValue" />
							</div>
							<div v-show="productOrService[index].serviceTypeId === '8e60c41b-83e2-4066-f393-08d69cd57754'">
								<Select :label="'Design Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].designVariationId"
										:options="getDesigneServices"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === '8e60c41b-83e2-4066-f393-08d69cd57754'"
										:id="'designVariationId-' + index"
										@@newValue="emitProductServiceValue" />
							</div>

						</div>
					</div>
					<button class="btn btn-primary ml-4 mb-2" v-on:click="addProductService" type="button">Add service or product</button>
				</div>
			</div>
			<div class="bg-white border py-15 px-20 mb-n-20 footer-panel">
				<div class="d-flex">
					<button class="btn btn-secondary ml-auto" v-on:click="goToIndexPage">Discard</button>
					<button class="btn btn-success ml-2" v-bind:disabled="waitButton" type="submit">Add</button>
				</div>
			</div>
			<Modal :modalProps="modalAddOrganizationProps"
				   @@newValue="emitValueOrg"
				   @@resetValue="resetValue"
				   :refreshInputs="refreshInputs"
				   :inputsKey="modalOrgKey"
				   @@getData="getOrgData" />
			<Modal :refreshInputs="refreshInputs"
				   :modalProps="modalAddIndustry"
				   @@newValue="emitIndustryValue"
				   :inputsKey="modalKey" />
			@*<Modal :modalProps="modalContactProps"
				   @@newValue="emitValueContact"
				   @@newPhone="emitNewPhone"
				   :refreshInputs="refreshInputs"
				   :inputsKey="modalContactKey"
				   @@getData="getContactData" />*@
			<EditContactModalForm ref="contactModal"
								  :editable="false"
								  @@loadContacts="loadOrganizationContacts" />
		</form>
	</script>

	<script>
		Vue.component('CreateLead', {
			template: '#page-template',
			data() {
				return {
					lead: {},
					True: true,
					taskDateFormat: 'YYYY/MM/DD',
					taskDatePickerFormat: 'yyyy/mm/dd',
					pipeLineId: '',
					productOrService: [],
					waitButton: false,
					orgValues: {},
					orgAddress: {},
					orgRevenue: {},
					editOrgId: null,
					refreshInputs: 0,
					modalOrgKey: 0,
					regions: [],
					cities: [],
					hideEmailInputs: ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'],
					emailList: [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					],
					states: [],
					modalValues: {},
					modalKey: 0,
					addByStage: false,
					editableOrgModal: false,
					newOrgId: null,
					currentHiddenPhoneIndex: 1,
					currentHiddenEmailIndex: 1,
				}
			},
			mounted: function() {
				feather.replace();
			},
			computed: {
				countries() {
					return this.$store.state.allCountries;
				},
				getEmailList() {
					return this.hideEmailInputs;
				},
				labels() {
					return this.$store.state.allPhoneLabels;
				},
				listIndustry() {
					let listOfIndustries = [];
					listOfIndustries = this.$store.state.selectorsForOrganization.listIndustry?.map(e => {
						const newObj = {
							label: e.text,
							value: e.value,
						}
						return newObj;
					});
					return listOfIndustries ? listOfIndustries : [];
				},
				employeesSelect() {
					return this.$store.state.allEmployees.map(e => {
						const newObj = {
							label: e.interval,
							value: e.id,
						}
						return newObj;
					});
				},
				emailLabels() {
					return this.$store.state.allEmailLabels;
				},
				organizationStages() {
					return this.$store.state.allOrganizationStages;
				},
				modalAddOrganizationProps() {
					return {
						id: 'organizationModal',
						modalSize: 'lg',
						label: 'Add Organization',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'company-name',
									type: 'text',
									label: 'Name',
									required: true,
									value: this.orgValues.name,
									className: 'col-12 col-md-6',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-fiscalCode',
									label: 'Fiscal Code',
									type: 'text',
									value: this.orgValues.fiscalCode,
									className: 'col-12 col-md-6',
									validator: value => fieldValidationFunc(value, 'fiscalCodeMd'),
									validatorInput: value => fieldValidationInputFunc(value, 'fiscalCodeMd')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-industryId',
									label: 'Industry',
									options: this.listIndustry,
									size: 10,
									searchable: true,
									value: this.orgValues.industryId,
									className: 'col-11 col-md-5 col-lg-3'
								}
							},
							{
								name: 'Button',
								props: {
									label: '<span>&#43;<span/>',
									className: "wrapper",
									wrapper: "div",
									wrapperClass: "col-1",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalAddOrganizationProps.id}`).modal("hide");
										this.resetModalValues();
										this.modalKey++;
										$(`#${this.modalAddIndustry.id}`).modal("show");
									}
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-employeeId',
									label: 'Nr. of employees',
									value: this.orgValues.employeeId,
									options: this.employeesSelect,
									className: 'col-12 col-md-6 col-lg-4'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-vitCode',
									type: 'text',
									label: 'Vit Code',
									value: this.orgValues.vitCode,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar50'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email1',
									type: 'email',
									label: 'Email',
									className: 'col-6',
									value: this.emailList[0].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel1',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[0].label,
									className: 'col-6'
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput1',
									className: 'col-12 ' + this.getEmailList[0],
									hideDelete: true,
									hidePlus: this.getEmailList[1] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email2',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[1],
									value: this.emailList[1].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel2',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[1].label,
									className: 'col-6 ' + this.getEmailList[1]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput2',
									className: 'col-12 ' + this.getEmailList[1],
									hidePlus: this.getEmailList[2] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email3',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[2],
									value: this.emailList[2].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel3',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[2].label,
									className: 'col-6 ' + this.getEmailList[2]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput3',
									className: 'col-12 ' + this.getEmailList[2],
									hidePlus: this.getEmailList[3] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email4',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[3],
									value: this.emailList[3].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel4',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[3].label,
									className: 'col-6 ' + this.getEmailList[3]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput4',
									className: 'col-12 ' + this.getEmailList[3],
									hidePlus: this.getEmailList[4] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email5',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[4],
									value: this.emailList[4].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel5',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[4].label,
									className: 'col-6 ' + this.getEmailList[4]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput5',
									className: 'col-12 ' + this.getEmailList[4],
									hidePlus: true,
									hideLabel: false,

								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-phone',
									label: 'Phone',
									type: 'tel',
									inputPrefix: '(+373)',
									value: this.orgValues.phone,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'phone'),
									validatorInput: value => fieldValidationInputFunc(value, 'phone')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'responsible-phone',
									type: 'text',
									label: 'Responsible',
									value: this.orgValues.ResponsibleForPhoneNumber,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-webSite',
									label: 'WEB Site',
									type: 'text',
									value: this.orgValues.webSite,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar50'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
								}
							},
							{
								name: 'Yearpicker',
								props: {
									id: 'company-dateOfFounding',
									label: 'Year of Founding',
									required: false,
									className: 'col-12 col-md-6 col-lg-4',
									value: this.orgValues.dateOfFounding
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-bank',
									label: 'Bank',
									type: 'text',
									value: this.orgValues.bank,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar500'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar500')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-iBANCode',
									label: 'IBAN Code',
									type: 'text',
									value: this.orgValues.iBANCode,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},

							{
								name: 'Input',
								props: {
									id: 'company-codSwift',
									type: 'text',
									label: 'Swift Code',
									value: this.orgValues.codSwift,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar50'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-stageId',
									label: 'Stage',
									options: this.organizationStages,
									disabled: this.addByStage,
									required: true,
									value: this.orgValues.stageId,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-stateId',
									label: 'State',
									options: this.states,
									size: 10,
									value: this.orgValues.stateId,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-isDeleted',
									label: 'Status',
									required: true,
									disabled: !this.editableOrgModal,
									value: this.orgValues.isDeleted,
									options: [
										{
											label: 'Active',
											value: 'false',
										},
										{
											label: 'Inactive',
											value: 'true'
										}
									],
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'addressC-countryId',
									label: 'Country',
									size: 10,
									required: true,
									searchable: true,
									options: this.countries,
									value: this.orgAddress.countryId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'addressC-regionId',
									label: 'Region',
									size: 10,
									noneSelectedText: 'Please select the country first',
									searchable: true,
									options: this.regions,
									value: this.orgAddress.regionId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'addressC-cityId',
									label: 'City',
									noneSelectedText: 'Please select the region first',
									options: this.cities,
									required: true,
									size: 10,
									searchable: true,
									value: this.orgAddress.cityId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'addressC-street',
									label: 'Street',
									type: 'text',
									value: this.orgAddress.street,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'addressC-zip',
									label: 'ZIP',
									type: 'text',
									value: this.orgAddress.zip,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'zip'),
									validatorInput: value => fieldValidationInputFunc(value, 'zip')
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'company-description',
									label: 'Description',
									value: this.orgValues.description,
									className: 'col-12'
								}
							}
						],
						formSubmits: this.orgFormSubmits,
						onSubmit: () => {
							if (!this.editableOrgModal) {
								if (this.orgValues.dateOfFounding) {
									this.orgValues.dateOfFounding = moment(this.orgValues.dateOfFounding).format("YYYY/MM/DD");
								};
								this.resetContactValues();
								this.addNewOrganization().then(() => {
									this.addOrganizationAddress(this.newOrgId).then(() => {
										$(`#${this.modalAddOrganizationProps.id}`).modal("hide");
										if (this.addContacts)
											this.openContactModal();
									});
								});
							}
						}
					}
				},
				modalAddIndustry() {
					return {
						id: 'industryModal',
						label: 'Add industry',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'entity-name',
									type: 'text',
									label: 'Name',
									required: true,
									className: 'col-12',
									value: this.modalValues.name,
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalAddIndustry.id}`).modal("hide");
										$(`#${this.modalAddOrganizationProps.id}`).modal("show");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label:  "@Localizer["save"]",
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							this.addNewEntity().then(() => {
								this.$store.dispatch('getAllSelectorsForOrganization');
									$(`#${this.modalAddIndustry.id}`).modal("hide");
									$(`#${this.modalAddOrganizationProps.id}`).modal("show");
							});
						}
					}
				},
				orgFormSubmits() {
					const resultArray = [
						{
							name: 'Button',
							props: {
								label:"@Localizer["cancel"]",
								btnType: 'outline-secondary',
								onClick: () => {
									$(`#${this.modalAddOrganizationProps.id}`).modal("hide");
								}
							}
						},
						{
							name: 'Button',
							props: {
								label: "@Localizer["save"]",
								btnType: 'success',
								btnDOMType: 'submit',
								onMouseDown: () => {
									this.addContacts = false;
								}
							}
						}
					];
					if (!this.editableOrgModal) {
						resultArray.push({
							name: 'Button',
							props: {
								label: 'Save and add contacts',
								btnType: 'success',
								btnDOMType: 'submit',
								onMouseDown: () => {
									this.addContacts = true;
								}
							}
						});
					}
					return resultArray;
				},
				orgContacts() {
					return this.$store.getters.contactsByOrganizationIdSelectList
				},
				pipelineStagesListSelect() {
					return this.$store.getters.pipelineStagesSelectList
				},
				organizationsListSelect() {
					return this.$store.state.allOrganizationsForSelect;
				},
				soucesListSelect() {
					return this.$store.state.allSources;
				},
				stagesListSelect() {
					return this.$store.state.allStages
				},
				currenciesListSelect() {
					return this.$store.state.allCurrencies;
				},
				usersListSelect() {
					return this.$store.state.allUsers;
				},
				getProductService() {
					return this.productOrService;
				},
				getAllProductServices() {
					return this.$store.state.allProductServices
				},
				getServiceTypes() {
					return this.$store.state.allServiceTypes;
				},
				getProductTypes() {
					return this.$store.state.allProductTypes;
				},
				getDesigneServices() {
					return this.$store.state.allDesigneServices;
				},
				getDevelopementServices() {
					return this.$store.state.allDevelopementServices;
				},
				getQaServices() {
					return this.$store.state.allQaServices;
				},
				getConsultancyService() {
					return this.$store.state.allConsultancyServices;
				},
				getPMFrameWorks() {
					return this.$store.state.allPmFrameWorks;
				},
				getDevelopementFrameWorks() {
					return this.$store.state.allDevelopementFrameWorks;
				},
				getAllTechnologyTypes() {
					return this.$store.state.allTechnologyTypes;
				},
				getAllLdapUsers() {
					return this.$store.state.allLdapUsers;
				}
			},
			created() {
				this.$store.dispatch('getAllTechnologyTypes');
				this.$store.dispatch('getAllProductTypes');
				this.$store.dispatch('getAllCurrencies');
				this.$store.dispatch('getAllUsers');
				this.$store.dispatch('getAllProductServices');
				this.$store.dispatch('getAllServiceTypes');
				this.$store.dispatch('getAllDevelopementServices');
				this.$store.dispatch('getAllDesigneServices');
				this.$store.dispatch('getAllQaServices');
				this.$store.dispatch('getAllConsultancyServices');
				this.$store.dispatch('getAllPMFrameWorks');
				this.$store.dispatch('getAllDevelopmentFrameWorks');
				this.$store.dispatch('getAllSource');
				this.$store.dispatch('getAllOrganizationsForSelect');
				this.$store.dispatch('getPipeLineStages', { pipeLineId: '@Model.Id' });
				this.$store.dispatch('getAllLdapUsers');

				this.resetLead();
				this.resetProductAndService();
			},
			methods: {
				async deleteEmail(emailId) {
					customAjaxRequest(apiEndpoints.Email.DeleteEmailById, 'DELETE', { emailId }).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				async addNewEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Industry.AddNewIndustry, 'PUT', this.modalValues).then(() => {
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async addNewOrganization() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.AddNewOrganization, 'PUT', this.orgValues).then(result => {
							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.hideEmailInputs[i] == '' && this.emailList[i].email != '') {
									EmailListAdd.push({
										email: this.emailList[i].email,
										label: this.emailList[i].label,
										organizationId: result
									});
								}
							}
							if (EmailListAdd.length > 0)
								this.addEmailList(EmailListAdd);

							this.$store.dispatch('getAllOrganizationsForSelect');
							this.newOrgId = result;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async addEmailList(ListToAdd) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Email.AddEmailRange, 'PUT', { model: ListToAdd }).then(() => {
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async addOrganizationAddress(orgId) {
					this.waitAddressButton = true;
					this.orgAddress.organizationId = orgId;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.AddOrganizationAddress, 'PUT', this.orgAddress).then(result => {
							this.appendAddressToListing(result).then(() => {
								this.waitAddressButton = false;
							});
							resolve(true);
						}).catch(e => {
							this.waitAddressButton = false;
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async appendAddressToListing(addressId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressById, 'GET', { addressId }).then(result => {
							this.orgAddresses.push({
								id: result.id,
								organizationId: result.organizationId,
								country: result.city.crmCountry.name,
								region: result.rigion ? result.rigion.name : 'n/a',
								city: result.city.name,
								street: result.street,
								zip: result.zip
							});
							resolve(true);
						}).then(e => {
							reject(e);
						});
					});
				},
				resetModalValues() {
					this.modalValues = {
						name: null
					}
				},
				convertToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				resetEmail(index) {
					this.emailList[index] = {
						email: '',
						label: ''
					};
					this.emailList.push({
						email: '',
						label: ''
					});
					this.emailList.pop();
				},
				async loadRegionCities(regionId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllCitiesByRegionId, 'get', { regionId }).then(result => {
						this.cities = this.convertToSelectList(result);
					});
				},
				async loadCountryCities(countryId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllCitiesByCountryId, 'get', { countryId }).then(result => {
						this.cities = this.convertToSelectList(result);
					})
				},
				async loadCountryRegions(countryId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllRegionsByCountryId, 'get', { countryId }).then(result => {
						this.regions = this.convertToSelectList(result);
					});
				},
				async deleteEmail(emailId) {
					customAjaxRequest(apiEndpoints.Email.DeleteEmailById, 'DELETE', { emailId }).then(() => {
						resolve(true)
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				async loadStatesByStage(stageId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationHelper.GetOrganizationStatesByStage, 'GET', { stageId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					})
				},
				emitValueOrg(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					if (val.id.includes('addressC')) {
						this.orgAddress[val.id.replace('addressC-', '')] = newVal;
						if (val.id === 'addressC-countryId') {
							this.loadCountryRegions(val.value);
							this.loadCountryCities(val.value);
						}
						if (val.id === 'addressC-regionId') {
							this.cities = [];
							this.loadRegionCities(val.value);
						}
					} else {
						this.orgValues[val.id.replace('company-', '')] = newVal;
					}
					if (val.id.includes('HideEmailInput')) {
						let index = val.id[14] - '0';
						if (val.value == '') this.hideEmailInputs[index] = val.value;
						else {
							this.hideEmailInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.emailList[index - 1].id) {
									this.deleteEmail(this.emailList[index - 1].id);
								}
								this.resetEmail(index - 1);
							}
						}
						this.hideEmailInputs.push(val.value);
						this.hideEmailInputs.pop();
					}
					if (val.id.includes('org-email')) {
						let index = val.id[9] - '0';
						this.emailList[index - 1].email = val.value;
					}
					if (val.id.includes('org_EmailLabel')) {
						let index = val.id[14] - '0';
						this.emailList[index - 1].label = val.value;
					};
					if (val.id === 'company-stageId') {
						this.states = [];
						this.loadStatesByStage(val.value).then(result => {
							this.states = this.convertToSelectList(result);
						});
					}
				},
				emitIndustryValue(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.modalValues[val.id.replace('entity-', '')] = newVal;
				},
				getOrgData() {
					this.$store.dispatch('getAllEmployees');
					this.$store.dispatch('getAllSelectorsForOrganization');
					this.$store.dispatch('getAllOrganizationStages');
					this.$store.dispatch('getAllCountries');
					this.getAllEmails();
					this.$store.dispatch('getAllPhoneLabels');
				},
				getAllEmails() {
					this.$store.dispatch('getAllEmailLabels');
				},
				//reset functions
				resetValue(val) {
					if (val === 'company-Addresses') {
						this.resetOrgAddressValues();
					};
					if (val === 'company-Revenues') {
						this.resetOrgRevenueValues();
					}
				},
				resetOrgAddressValues() {
					this.orgAddress = {
						countryId: null,
						organizationId: null,
						regionId: null,
						cityId: null,
						street: null,
						zip: null
					}
					this.editOrgId = '';
					this.refreshInputs++;
				},
				resetOrgRevenueValues() {
					this.orgRevenue = {
						organizationId: null,
						year: null,
						currencyCode: null,
						amount: null
					}
					this.editOrgId = '';
					this.refreshInputs++;
				},
				resetProductAndService() {
					this.productOrService = [];
					this.addProductService();
				},
				resetLead() {
					this.lead = {
						name: '',
						organizationId: null,
						contactId: null,
						created: moment().format(this.taskDateFormat).toString(),
						deadLine: moment().add(5, 'd').format(this.taskDateFormat).toString(),
						clarificationDeadline: moment().add(5, 'd').format(this.taskDateFormat).toString(),
						sourceId: null,
						description: null,
						pipeLineId: '@Model.Id',
						stageId: null,
						currencyCode: '',
						value: '',
						members: [],
						owner: null
					};
				},
				resetPartialProdServ(index, arr) {
					arr.forEach(prop => {
						this.productOrService[index][prop] = null;
					});
				},
				//emit functions
				emitValue(val) {
					this.lead[val.id.replace('lead-', '')] = val.value;
					if (val.id == 'lead-organizationId') {
						this.loadOrganizationContacts(val.value);
					}
				},
				emitProductServiceValue(val) {
					if (val.id[0] == '-') {
						val.id = val.id.slice(1, val.id.length);
					}
					let index = parseInt(val.id.slice(val.id.indexOf('-') + 1, val.id.length));
					let value = val.id.slice(0, val.id.indexOf('-'));
					this.productOrService[index][value] = val.value;
					if (val.value === '666e1dd1-a596-4b1b-aa85-b14ac52727bf') {
						this.resetPartialProdServ(index, ['serviceTypeId', 'developmentVariationId', 'developementFrameworkId', 'consultancyVariationId', 'pMFrameworkId', 'qAVariationId', 'designVariationId']);
					}
					if (val.value === '4eeeb9b0-844f-4367-8d13-579586bb8e53') {
						this.resetPartialProdServ(index, ['productTypeId', 'technologyTypeId']);
					}
					if (value === 'developmentVariationId') {
						this.resetPartialProdServ(index, ['consultancyVariationId', 'pMFrameworkId', 'qAVariationId', 'designVariationId']);
					}
					if (value === 'consultancyVariationId') {
						this.resetPartialProdServ(index, ['developmentVariationId', 'developementFrameworkId', 'qAVariationId', 'designVariationId']);
					}
					if (value === 'qAVariationId') {
						this.resetPartialProdServ(index, ['developmentVariationId', 'developementFrameworkId', 'consultancyVariationId', 'pMFrameworkId', 'designVariationId']);
					}
					if (value === 'designVariationId') {
						this.resetPartialProdServ(index, ['developmentVariationId', 'developementFrameworkId', 'consultancyVariationId', 'pMFrameworkId', 'qAVariationId']);
					}
				},
				//async functions
				async setLeadOwner(ownerId, leadId, listMembersId = []) {
					try {
						await customAjaxRequest(apiEndpoints.Leads.SetLeadMembers, 'POST', { ownerId, leadId, listMembersId });
						this.tableKey++;
					} catch (err) {
						toast.notifyErrorList(e);
						this.waitButton = false;
					}
				},
				async setLeadProdServices(leadId) {
					let prodAndServices = [];
					for (let i = 0; i < this.productOrService.length; i++) {
						if (this.productOrService[i].productOrServiceId) {
							this.productOrService[i].leadId = leadId;
							prodAndServices.push(this.productOrService[i]);
						}
					}
					if (prodAndServices.length > 0) {
						try {
							await customAjaxRequest(apiEndpoints.Leads.AddProductOrServices, 'PUT', { model: prodAndServices });
						} catch (err) {
							toast.notifyErrorList(e);
							this.waitButton = false;
						}
					}
				},
				async addLead() {
					this.waitButton = true;
					if (this.lead.value == null || this.lead.value == '')
						this.lead.value = 0;

					try {
						const leadId = await customAjaxRequest(apiEndpoints.Leads.AddLead, 'PUT', this.lead);
						await this.setLeadProdServices(leadId);
						if (this.lead.ownerId) {
							await this.setLeadOwner(this.lead.ownerId, leadId, this.lead.members);
							this.goToDetailsPage(leadId);
							this.waitButton = false;
						} else {
							this.goToDetailsPage(leadId);
							this.waitButton = false;
						}
					} catch (err) {
						toast.notifyErrorList(err);
						this.waitButton = false;
					}
				},
				addProductService() {
					this.productOrService.push({
						leadId: null,
						productOrServiceId: null,
						productTypeId: null,
						technologyTypeId: null,
						serviceTypeId: null,
						developmentVariationId: null,
						consultancyVariationId: null,
						qAVariationId: null,
						designVariationId: null,
						developementFrameworkId: null,
						pMFrameworkId: null,
						productOrServiceId: null
					})
				},
				removeProductService(index) {
					if (index === 0 && this.productOrService.length === 1) {
						this.resetProductAndService();
					}
					else {
						this.productOrService.splice(index, 1);
					}
				},
				goToIndexPage() {
					window.location.href = 'PipeLineLeads?id=' + '@Model.Id';
				},
				goToDetailsPage(leadId) {
					sessionStorage.setItem("showModal", "true");
					window.location.href = '/leads/details?id=' + leadId;
				},
				loadOrganizationContacts(organizationId) {
					this.$store.dispatch('getContactsByOrganizationId', { organizationId });
				},
				openOrgModal() {
					this.editableOrgModal = false;
					this.resetOrgModalValues();
					this.resetOrgAddressValues();
					this.addByStage = false;
					this.refreshInputs++;
					this.orgAddresses = [];
					this.orgRevenues = [];
					this.cities = [];
					this.modalOrgKey++;
					$(`#${this.modalAddOrganizationProps.id}`).modal("show");
				},
				openContactModal(orgId) {
					this.$refs['contactModal'].openModal(orgId);
				},
				resetOrgModalValues() {
					this.orgValues = {
						name: null,
						ResponsibleForPhoneNumber: null,
						clientType: 0,
						bank: null,
						email: null,
						phone: null,
						webSite: null,
						fiscalCode: null,
						iBANCode: null,
						industryId: null,
						employeeId: null,
						description: null,
						vitCode: null,
						codSwift: null,
						dateOfFounding: null,
						isDeleted: false,
						stageId: null,
						stateId: null
					}
					this.emailList = [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					];
					this.hideEmailInputs = ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'];
					this.editOrgId = '';
					this.refreshInputs++;
				},
			}
		});
	</script>
}
