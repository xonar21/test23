@using GR.Core.Extensions;
@using GR.Crm.Leads.Abstractions.ViewModels;

@model GetLeadsViewModel

@{
	ViewData["Title"] = "Edit " + Model.Name;
}

<CreateLead />

@section Scripts {
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/primitiveTextArea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components/button.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/modalForms/editLeadModalForm.js"></script>
	<script src="~/themes/gear/js/components/phone-input/addHideInput.js"></script>
	<script src="~/themes/gear/js/components/phone-input/phone-input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/modalForms/editContactModalForm.js"></script>
	<script src="~/themes/gear/js/components/phone-input/switcher.js"></script>

	<script type="text/x-template" id="page-template">
		<form v-on:submit.prevent="updateLead">
			<div class="d-flex">
				<div class="col-6  ml-2">
					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>General</h6>
						<hr class="hr-description mb-20px" />
						<Input :label="'Opportunity title'"
							   :required="True"
							   :className="'col-12 px-0'"
							   :value="lead.name"
							   :id="'lead-name'"
							   :type="'text'"
							   @@newValue="emitValue" />
						<Select :label="'Organization'"
								:className="'col-12 px-0'"
								:value="lead.organizationId"
								:options="organizationsListSelect"
								:searchable="True"
								:required="True"
								:id="'lead-organizationId'"
								@@newValue="emitValue" />
						<Select :label="'Contacts'"
								:className="'col-12 px-0'"
								:value="lead.contacts"
								:options="orgContacts"
								:searchable="True"
								:multiple="True"
								:id="'lead-contacts'"
								:addBtn="lead.organizationId ? true : false"
								@@newValue="emitValue"
								@@openModal="openContactModal(lead.organizationId)" />
						<div class="d-flex">
							<Datepicker :id="'lead-created'"
										:label="'Start date'"
										:required="True"
										:className="'col-4 px-0'"
										:format="taskDatePickerFormat"
										:value="lead.created"
										@@newValue="emitValue" />
							<Datepicker :id="'lead-deadLine'"
										:label="'End date'"
										:required="True"
										:className="'col-4'"
										:format="taskDatePickerFormat"
										:value="lead.deadLine"
										@@newValue="emitValue" />
							<Datepicker :id="'lead-clarificationDeadline'"
										:required="True"
										:label="'Clarification deadline'"
										:className="'col-4 px-0'"
										:format="taskDatePickerFormat"
										:value="lead.clarificationDeadline"
										@@newValue="emitValue" />
						</div>
						<Select :label="'Source'"
								:className="'col-12 px-0'"
								:value="lead.sourceId"
								:options="soucesListSelect"
								:searchable="True"
								:id="'lead-sourceId'"
								@@newValue="emitValue" />
						<Textarea :id="'lead-description'"
								  :label="'Description'"
								  :value="lead.description"
								  :className="'col-12 px-0'"
								  @@newValue="emitValue" />
					</div>

					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>Pipeline</h6>
						<hr class="hr-description" />
						<div class="mb-3"><span class="d-inline text-secondary">@Model.PipeLine?.Name</span></div>
						<Select :label="'Stage'"
								:className="'col-12 px-0'"
								:required="True"
								:value="lead.stageId"
								:options="pipelineStagesListSelect"
								:searchable="True"
								:id="'lead-stageId'"
								@@newValue="emitValue" />
					</div>

					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>Finacials</h6>
						<hr class="hr-description mb-20px" />
						<div class="d-flex">
							<Select :label="'Currency'"
									:className="'col-6 pl-0 pr-7-5px'"
									:value="lead.currencyCode"
									:required="lead.value != null && lead.value != ''"
									:options="currenciesListSelect"
									:searchable="True"
									:id="'lead-currencyCode'"
									@@newValue="emitValue" />
							<Input :label="'Budget forecasting'"
								   :className="'col-6 pr-0 pl-7-5px'"
								   :value="lead.value"
								   :id="'lead-value'"
								   :type="'number'"
								   :step="'any'"
								   @@newValue="emitValue" />
						</div>
					</div>

					<div class="bg-white border rounded mb-20px py-15 px-20">
						<h6>Team</h6>
						<hr class="hr-description mb-20px" />
						<Select :label="'Owner'"
								:className="'col-12 px-0'"
								:value="lead.ownerId"
								:options="usersListSelect"
								:searchable="True"
								:id="'lead-ownerId'"
								@@newValue="emitValue" />
						<Select :label="'Members'"
								:className="'col-12 px-0'"
								:value="lead.members"
								:options="getAllLdapUsers"
								:multiple="True"
								:searchable="True"
								:id="'lead-members'"
								@@newValue="emitValue" />
					</div>
				</div>
				<div class="col-5 mr-2 pl-0 pr-4">
					<div class="bg-white border rounded mb-20px py-15 px-20" v-for="(prodOrServ, index) in productOrService" :key="index">
						<div class="d-flex">
							<h6>Product/Service</h6>
							<a v-show="index != 0 || (index === 0 && getProductService[index].productOrServiceId)"
							   href="#" class="ml-auto" v-on:click="removeProductService(index)">
								<svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-square" id="icon-0"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line></svg>
							</a>
						</div>
						<hr class="hr-description mb-20px" />
						<div class="mb-20px">

							<Radio :id="'productOrServiceId-' + index"
								   :className="'d-flex col-12 p-0'"
								   :options="getAllProductServices"
								   :value="getProductService[index].productOrServiceId"
								   @@newValue="emitProductServiceValue" />
						</div>
						<div v-show="getProductService[index].productOrServiceId === '666e1dd1-a596-4b1b-aa85-b14ac52727bf'">
							<Select :label="'Product Type'"
									:className="'col-12 px-0'"
									:value="productOrService[index].productTypeId"
									:options="getProductTypes"
									:searchable="True"
									:required="getProductService[index].productOrServiceId === '666e1dd1-a596-4b1b-aa85-b14ac52727bf'"
									:id="'productTypeId-' + index"
									@@newValue="emitProductServiceValue" />
							<div v-show="productOrService[index].productTypeId">
								<Select :label="'Technology Type'"
										:className="'col-12 px-0'"
										:value="productOrService[index].technologyTypeId"
										:options="getAllTechnologyTypes"
										:searchable="True"
										:id="'technologyTypeId-' + index"
										@@newValue="emitProductServiceValue" />
							</div>
						</div>
						<div v-show="productOrService[index].productOrServiceId === '4eeeb9b0-844f-4367-8d13-579586bb8e53'">
							<Select :label="'Service Type'"
									:className="'col-12 px-0'"
									:value="productOrService[index].serviceTypeId"
									:options="getServiceTypes"
									:searchable="True"
									:required="productOrService[index].productOrServiceId === '4eeeb9b0-844f-4367-8d13-579586bb8e53'"
									:id="'serviceTypeId-' + index"
									@@newValue="emitProductServiceValue" />
							<div v-show="productOrService[index].serviceTypeId === '42726aa2-725c-432d-35dd-08d77d8680ea'">
								<Select :label="'Development Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].developmentVariationId"
										:options="getDevelopementServices"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === '42726aa2-725c-432d-35dd-08d77d8680ea'"
										:id="'developmentVariationId-' + index"
										@@newValue="emitProductServiceValue" />
								<div v-show="getProductService[index].developmentVariationId">
									<Select :label="'Technology Type'"
											:className="'col-12 px-0'"
											:value="productOrService[index].technologyTypeId"
											:options="getAllTechnologyTypes"
											:searchable="True"
											:required="!!getProductService[index].developmentVariationId"
											:id="'-technologyTypeId-' + index"
											@@newValue="emitProductServiceValue" />
									<Select :label="'Developement Framework'"
											:className="'col-12 px-0'"
											:value="getProductService[index].developementFrameworkId"
											:options="getDevelopementFrameWorks"
											:searchable="True"
											:id="'developementFrameworkId-' + index"
											@@newValue="emitProductServiceValue" />
								</div>
							</div>
							<div v-show="productOrService[index].serviceTypeId === 'abf505e2-3e01-4c0d-b3ad-5348e121d9b0'">
								<Select :label="'Consultancy Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].consultancyVariationId"
										:options="getConsultancyService"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === 'abf505e2-3e01-4c0d-b3ad-5348e121d9b0'"
										:id="'consultancyVariationId-' + index"
										@@newValue="emitProductServiceValue" />
								<div v-show="getProductService[index].consultancyVariationId">
									<Select :label="'PM Framework'"
											:className="'col-12 px-0'"
											:value="getProductService[index].pmFrameworkId"
											:options="getPMFrameWorks"
											:searchable="True"
											:id="'pmFrameworkId-' + index"
											@@newValue="emitProductServiceValue" />
								</div>
							</div>
							<div v-show="productOrService[index].serviceTypeId === 'd3d407b5-e615-486d-eaaf-08d6e50b94b6'">
								<Select :label="'QA Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].qaVariationId"
										:options="getQaServices"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === 'd3d407b5-e615-486d-eaaf-08d6e50b94b6'"
										:id="'qaVariationId-' + index"
										@@newValue="emitProductServiceValue" />
							</div>
							<div v-show="productOrService[index].serviceTypeId === '8e60c41b-83e2-4066-f393-08d69cd57754'">
								<Select :label="'Design Variations'"
										:className="'col-12 px-0'"
										:value="getProductService[index].designVariationId"
										:options="getDesigneServices"
										:searchable="True"
										:required="productOrService[index].serviceTypeId === '8e60c41b-83e2-4066-f393-08d69cd57754'"
										:id="'designVariationId-' + index"
										@@newValue="emitProductServiceValue" />
							</div>

						</div>
					</div>
					<button class="btn btn-primary ml-4 mb-2" v-on:click="addProductService" type="button">Add service or product</button>
				</div>
			</div>
			<div class="bg-white border py-15 px-20 footer-panel">
				<div class="d-flex">
					<button class="btn btn-secondary ml-auto" v-on:click="goToIndexPage">Discard</button>
					<button class="btn btn-success ml-2" v-bind:disabled="waitButton" type="submit">Save</button>
				</div>
			</div>
			<EditContactModalForm ref="modals" :editable="false" @@loadContacts="loadOrganizationContacts"/>
		</form>
	</script>

	<script>
		Vue.component('CreateLead', {
			template: '#page-template',
			data() {
				return {
					lead: {},
					True: true,
					taskDateFormat: 'YYYY/MM/DD',
					taskDatePickerFormat: 'yyyy/mm/dd',
					pipeLineId: '',
					pipelineStagesListSelect: [],
					productOrService: [],
					waitButton: false,
					orgContacts: []
				}
			},
			mounted() {
				feather.replace();
			},
			computed: {
				organizationsListSelect() {
					return this.$store.state.allOrganizationsForSelect;
				},
				contactsListSelect() {
					return this.$store.state.allContacts;
				},
				soucesListSelect() {
					return this.$store.state.allSources;
				},
				stagesListSelect() {
					return this.$store.state.allStages
				},
				currenciesListSelect() {
					return this.$store.state.allCurrencies;
				},
				usersListSelect() {
					return this.$store.state.allUsers;
				},
				getProductService() {
					return this.productOrService;
				},
				getAllProductServices() {
					return this.$store.state.allProductServices
				},
				getServiceTypes() {
					return this.$store.state.allServiceTypes;
				},
				getProductTypes() {
					return this.$store.state.allProductTypes;
				},
				getDesigneServices() {
					return this.$store.state.allDesigneServices;
				},
				getDevelopementServices() {
					return this.$store.state.allDevelopementServices;
				},
				getQaServices() {
					return this.$store.state.allQaServices;
				},
				getConsultancyService() {
					return this.$store.state.allConsultancyServices;
				},
				getPMFrameWorks() {
					return this.$store.state.allPmFrameWorks;
				},
				getDevelopementFrameWorks() {
					return this.$store.state.allDevelopementFrameWorks;
				},
				getAllTechnologyTypes() {
					return this.$store.state.allTechnologyTypes;
				},
				getAllLdapUsers() {
					return this.$store.state.allLdapUsers;
				}
			},
			created: async function () {
				this.lead = JSON.parse('@Html.Raw(Model.SerializeAsJson().Replace("\n", "\\n").Replace("\\t" , "").Replace("\\\"", "\\\\\\\""))');
				this.$store.dispatch('getAllTechnologyTypes');
				this.$store.dispatch('getAllProductTypes');
				this.$store.dispatch('getAllCurrencies');
				this.$store.dispatch('getAllUsers');
				this.$store.dispatch('getAllProductServices');
				this.$store.dispatch('getAllServiceTypes');
				this.$store.dispatch('getAllDevelopementServices');
				this.$store.dispatch('getAllDesigneServices');
				this.$store.dispatch('getAllQaServices');
				this.$store.dispatch('getAllConsultancyServices');
				this.$store.dispatch('getAllPMFrameWorks');
				this.$store.dispatch('getAllDevelopmentFrameWorks');
				this.$store.dispatch('getAllContacts');
				this.$store.dispatch('getAllSource');
				this.$store.dispatch('getAllOrganizationsForSelect');
				this.$store.dispatch('getAllLdapUsers');
				//format date
				this.lead.created = moment(this.lead.created, 'YYYY/MM/DD').format(this.taskDateFormat);
				this.lead.deadLine = moment(this.lead.deadLine, 'YYYY/MM/DD').format(this.taskDateFormat);
				this.lead.clarificationDeadline = moment(this.lead.clarificationDeadline, 'YYYY/MM/DD').format(this.taskDateFormat);
				let arr = [];
				this.lead.leadMembers?.forEach(m => {
					arr.push(m.userId);
				});
				this.loadOrganizationContacts(this.lead.organizationId);
				this.lead.members = arr;
				arr = [];

				this.lead.contacts?.forEach(m => {
					arr.push(m.contactId);
				});
				this.lead.contacts = arr;
				this.resetProductAndService();
				const promises = [
					customAjaxRequest(apiEndpoints.PipeLines.GetPipeLineStages, 'GET', { pipeLineId: this.lead.pipeLineId })
				];
				Promise.all(promises).then(result => {
					this.pipelineStagesListSelect = this.convertToSelectList(result[0]);
				});
			},
			methods: {
				openContactModal(orgId) {
					this.$refs['modals'].openModal(orgId);
				},
				//reset function
				resetProductAndService() {
					this.productOrService = [];
					if (this.lead.productOrServiceList) {
						this.productOrService = this.lead.productOrServiceList;
					} else {
						this.addProductService();
					}
				},
				resetPartialProdServ(index, arr) {
					arr.forEach(prop => {
						this.productOrService[index][prop] = null;
					});
				},
				//convert functions
				convertToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				convertContactsToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: `${e.firstName} ${e.lastName}`,
							value: e.id
						}
						return newObj;
					});
				},
				//emit functions
				emitValue(val) {
					this.lead[val.id.replace('lead-', '')] = val.value;
					if (val.id == 'lead-organizationId') {
						this.loadOrganizationContacts(val.value);
					}
				},
				emitProductServiceValue(val) {
					if (val.id[0] == '-') {
						val.id = val.id.slice(1, val.id.length);
					}
					let index = parseInt(val.id.slice(val.id.indexOf('-') + 1, val.id.length));
					let value = val.id.slice(0, val.id.indexOf('-'));
					if(val.id[0] === '$')
						value = val.id.slice(1, val.id.indexOf('-'));
					this.productOrService[index][value] = val.value;
					if (value === 'productTypeId') {
						this.resetPartialProdServ(index, ['serviceTypeId', 'developmentVariationId', 'developementFrameworkId', 'consultancyVariationId', 'pmFrameworkId', 'qaVariationId', 'designVariationId']);
					}
					if (value === 'serviceTypeId') {
						this.resetPartialProdServ(index, ['productTypeId', 'technologyTypeId']);
					}
					if (value === 'developmentVariationId') {
						this.resetPartialProdServ(index, ['consultancyVariationId', 'pmFrameworkId', 'qaVariationId', 'designVariationId']);
					}
					if (value === 'consultancyVariationId') {
						this.resetPartialProdServ(index, ['developmentVariationId', 'developementFrameworkId', 'qaVariationId', 'designVariationId']);
					}
					if (value === 'qaVariationId') {
						this.resetPartialProdServ(index, ['developmentVariationId', 'developementFrameworkId', 'consultancyVariationId', 'pmFrameworkId', 'designVariationId']);
					}
					if (value === 'designVariationId') {
						this.resetPartialProdServ(index, ['developmentVariationId', 'developementFrameworkId', 'consultancyVariationId', 'pmFrameworkId', 'qaVariationId']);
					}
				},
				//async functions
				async setLeadOwner(ownerId, leadId, listMembersId = []) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Leads.SetLeadMembers, 'POST', { ownerId, leadId, listMembersId }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							this.waitButton = false;
							reject(false);
						});
					});
				},
				async setLeadProdServices() {
					let addProdServices = [];
					let updateProdServices = [];
					for (let i = 0; i < this.productOrService.length; i++) {
						if (this.productOrService[i].id) {
							updateProdServices.push(this.productOrService[i]);
						} else {
							addProdServices.push(this.productOrService[i]);
						}
					}
					if (addProdServices.length > 0) {
						return new Promise((resolve, reject) => {
							customAjaxRequest(apiEndpoints.Leads.AddProductOrServices, 'PUT', { model: addProdServices }).then(() => {
								resolve(true);
							}).catch(e => {
								toast.notifyErrorList(e);
								this.waitButton = false;
								reject(false);
							});
						});
					}
					else {
						return new Promise((resolve, reject) => {
							customAjaxRequest(apiEndpoints.Leads.UpdateProductOrServices, 'POST', { model: updateProdServices }).then(() => {
								resolve(true);
							}).catch(e => {
								toast.notifyErrorList(e);
								this.waitButton = false;
								reject(false);
							});
						});
					}
				},
				async updateLead() {
					this.waitButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Leads.UpdateLead, 'POST', this.lead).then(() => {
							this.setLeadProdServices().then(() => {
								if (this.lead.ownerId) {
									this.setLeadOwner(this.lead.ownerId, this.lead.id, this.lead.members).then(() => {
										resolve(true);
										this.goToDetailsPage();
										this.waitButton = false;
									});
								}
								else {
									resolve(true);
									this.goToDetailsPage();
									this.waitButton = false;
								}
							});
						}).catch(e => {
							toast.notifyErrorList(e);
							this.waitButton = false;
							reject(false);
						});
					});
				},
				async removeProductService(index) {
					if (this.productOrService[index].id) {
						customAjaxRequest(apiEndpoints.Leads.DeleteProductOrServices, 'DELETE', { id: this.productOrService[index].id }).then(() => {
							if (index === 0) {
								this.resetProductAndService();
							}
							else {
								this.productOrService.splice(index, 1);
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					}
					else {
						if (index === 0 && this.productOrService.length === 1) {
							this.resetProductAndService();
						}
						else {
							this.productOrService.splice(index, 1);
						}
					}
				},
				addProductService() {
					this.productOrService.push({
						leadId: this.lead.id,
						productOrServiceId: null,
						productTypeId: null,
						technologyTypeId: null,
						serviceTypeId: null,
						developmentVariationId: null,
						consultancyVariationId: null,
						qaVariationId: null,
						designVariationId: null,
						developementFrameworkId: null,
						pmFrameworkId: null,
						productOrServiceId: null
					})
				},
				goToIndexPage() {
					window.location.href = 'PipeLineLeads?id=' + this.lead.pipeLineId;
				},
				goToDetailsPage() {
					window.location.href = '/leads/details?id=' + this.lead.id;
				},
				loadOrganizationContacts(organizationId) {
					customAjaxRequest(apiEndpoints.Contact.GetContactByOrganizationId, 'GET', { organizationId }).then(result => {
						this.orgContacts = this.convertContactsToSelectList(result);
					});
				},
			}
		});
	</script>
}
