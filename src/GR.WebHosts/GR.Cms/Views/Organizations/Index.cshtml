@inject IStringLocalizer Localizer
@model int 
@{
	ViewData["Title"] = Localizer["organizations"];
}
<Organizations />
@section Scripts
{
	<script src="https://unpkg.com/vue-draggable@1.0.9/lib/vue-draggable.js"></script>
	<script src="~/lib/vue-handy-scroll/dist/handy-scroll.umd.js"></script>
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/listing.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components//form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/components//form-controls/checkbox.js"></script>
	<script src="~/themes/gear/js/components//form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components/form-controls/yearpicker.js"></script>
	<script src="~/themes/gear/js/components/phone-input/addHideInput.js"></script>
	<script src="~/themes/gear/js/components/phone-input/phone-input.js"></script>
	<script src="~/themes/gear/js/components/phone-input/switcher.js"></script>
	<script type="text/x-template" id="organizations-template">
		<div>
			<div v-show="!showFilters" class="page-loader"><Loader /></div>
			<PageOptionsBar v-if="showFilters"
							:searcheable="listView"
							:pageOptionsComponents="pageOptionsComponents"
							@@searchInput="searchTable"
							:filters="tableFilters"
							@@filterResult="filterResult" />
			<div v-if="listView">
				<OrgTable :tableKey="tableKey"
						  @@action="action"
						  :searchString="searchString"
						  :tableActions="tableActions"
						  :customQueryParams="customQueryparams"
						  :listView="listView" />
			</div>
			<div v-else>
				<OrganizationsGrid :key="tableKey"
								   @@addOrganizationByStage="addOrganizationByStage"
								   :actions="tableActions.single"
								   @@action="action"
								   :listView="listView" />
			</div>
			<Modal :modalProps="modalOrgProps" @@newValue="emitValueOrg" @@resetValue="resetValue" :refreshInputs="refreshInputs" :inputsKey="modalOrgKey" @@getData="getOrgData" />
			<Modal :modalProps="modalImportOrg" @@newValue="importItem" :refreshInputs="refreshImportOrg" :inputsKey="modalImportKey" />
			<Modal :modalProps="modalContactProps" @@newValue="emitValueContact" @@newPhone="emitNewPhone" :refreshInputs="refreshInputs" :inputsKey="modalContactKey" @@getData="getContactData" />
			<Modal :modalProps="modalMergeOrg" @@newValue="selectItem" :refreshInputs="refreshInputs" :inputsKey="modalMergeKey" />
			<Modal :modalProps="modalUpdateStage" @@newValue="emitValueStageChange" :refreshInputs="refreshInputs" :inputsKey="modalTypeKey" />
			<Modal :modalProps="modalUpdateState" @@newValue="emitValueStateChange" :refreshInputs="refreshInputs" :inputsKey="modalStateKey" />
			<Modal :refreshInputs="refreshInputs" :modalProps="modalAddIndustry" @@newValue="emitIndustryValue" :inputsKey="modalKey" />
			<Modal :modalProps="modalAddressProps" @@newValue="emitValueAddress" :refreshInputs="refreshInputs" :inputsKey="modalAddressKey">
				<slot slot="cityId" slot-scope="props">
					{{ props.rowData.city ? props.rowData.city.name: ''}}
				</slot>
				<slot slot="regionId" slot-scope="props">
					{{ props.rowData.city ? props.rowData.city.region.name : ''}}
				</slot>
				<slot slot="countryId" slot-scope="props">
					{{ props.rowData.city ? getCountryName(props.rowData.city.region.countryId) : ''}}
				</slot>
			</Modal>
			<Modal :modalProps="modalRevenueProps" @@newValue="emitValueRevenue" :refreshInputs="refreshInputs" :inputsKey="modalRevenueKey" @@getData="getRevenueData" />
			<Modal :modalProps="editRevenueProps" @@newValue="emitValueRevenueEdit" :refreshInputs="refreshInputs" :inputsKey="modalEditRevenueKey" @@getData="getRevenueData" />
			<Modal :modalProps="editAddressProps" @@newValue="emitValueAddressEdit" :refreshInputs="refreshInputs" :inputsKey="modalEditAddressKey" />
		</div>
	</script>
	<script type="text/x-template" id="org-table-template">
		<div>
			<Table :fields="tableFields"
				   :apiUrl="apiUrl"
				   :httpMethod="httpMethod"
				   @@triggeredMenuAction="action"
				   tableId="organizations-table"
				   :sortOrder="tableConfig.sortCol"
				   :initialPageSize="20"
				   :reload="tableKey"
				   dataPath="result.result"
				   :controller="'Organizations'"
				   :changeUrl="true"
				   :pageChange="pageChange"
				   :customQueryparams="customQueryParams"
				   :hasCustomQUeryparams="true"
				   :actionsSingle="tableActions.single"
				   :actionsSingleDisabled="tableActions.singleDisabled"
				   :actionsMultiple="tableActions.multiple"
				   :actionsMultipleDisabled="tableActions.multipleDisabled"
				   :haveContextMenu="true">
				<slot v-if="props.rowData.state" slot="state" slot-scope="props">
					<span class="badge" :class="'badge-' + props.rowData.state.stateStyleClass">
						{{ props.rowData.state.name }}
					</span>
				</slot>
				<slot slot="name" slot-scope="props">
					<a :href="'/organizations/details?organization=' + props.rowData.name.split(' ').join('_') + '&id=' + props.rowData.id" @@click.stop>
						{{ props.rowData.name }}
					</a>
				</slot>
				</slot>
				<slot slot="email" slot-scope="props">
					<template v-if="props.rowData.email">
						<div v-for="email in props.rowData.email">
							{{ email }}
						</div>
					</template>
				</slot>
				<slot slot="author" slot-scope="props">
					<a :key="props.rowData.tenantId"
					   :href="'/users/GetUserById?id=' + props.rowData.tenantId"
					   class="btn btn-outline-primary user-rectangle"
					   @@click.stop
					   :title="props.rowData.author + ' on ' + props.rowData.created">
						{{ initials(props.rowData.author) }}
					</a>
				</slot>
				<slot slot="contacts" slot-scope="props">
					<template v-for="contact in props.rowData.contacts">
						<a :key="contact.id"
						   v-if="!contact.isDeleted"
						   :href="'/contact/details?name=' + contact.firstName.split(' ').join('_') + '_' + contact.lastName + '&id=' + contact.id"
						   class="btn btn-outline-primary user-rectangle"
						   @@click.stop
						   :title="contact.firstName + ' ' + contact.lastName">
							{{ initials(contact.firstName, contact.lastName) }}
						</a>
					</template>
				</slot>
			</Table>
		</div>
	</script>
	<script type="text/x-template" id="org-grid-template">
		<div v-drag-and-drop:options="dragOptions">
			<handy-scroll>
				<div class="row flex-nowrap pipeline-grid">
					<div v-for="stage in organizationsStagesListSelect"
						 :key="stage.value"
						 :id="stage.value"
						 class="col-12 col-sm-6 col-md-4 col-lg-3 pipeline-section px-0">
						<div class="pipeline-header">
							<div>
								<h3>
									{{ findObjectByPropValue(organizationsStagesListSelect, stage.value, 'value').label }}
								</h3>
							</div>
						</div>
						<ul :data-stage-id="stage.value" class="list-unstyled pipeline-list">
							<li class="pipeline-opportunity"
								v-for="organization in allOrganizations[stage.value]"
								:key="organization.id"
								:data-organization-id="organization.id">
								<div>
									<div v-if="organization.state" class="grid-badge">
										<span :class="['grid-badge__item', 'badge-' + organization.state.stateStyleClass]"></span>
										<span class="mb-0 grid-badge__text">{{ organization.state.name }}</span>
									</div>
									<a :href="'/organizations/details?id=' + organization.id" class="pipeline-opportunity__link">
										{{ organization.name }}
									</a>
									<div class="pipeline-opportunity__info">
										<p>
											<i data-feather="list"></i>
											Opportunities: {{ organization.leadCount }}
										</p>
										<p v-if="organization.phone">
											<i data-feather="phone"></i>
											Phone: {{ organization.phone }}
										</p>
										<p v-if="organization.emailList?.length">
											<i data-feather="mail"></i>
											Email: {{ organization.emailList.map(e => e.email).join(', ') }}
										</p>
										<p>
											<i data-feather="user"></i>
											Contacts: {{ organization.contacts?.length || 0 }}
										</p>
									</div>
									<hr class="hr-description pipeline-opportunity__hr" />
									<div class="pipeline-opportunity__info pipeline-footer">
										<p class="mb-0">Days in stage: {{ organization.daysInStage }}</p>
										<div class="dropdown datatables-dropdown ml-auto">
											<div class="more-vertical" data-toggle="dropdown"></div>
											<ul class="dropdown-menu dropdown-menu-right" x-placement="bottom-end">
												<li v-for="(action, index, i) in actions"
													:key="i"
													class="position-relative pl-30px dropdown-item context-menu-icon"
													:class="'context-menu-icon-' + action.icon"
													@@click.stop.prevent="actionEmit(index, organization.id)"
													data-toggle="dropdown">
													<span>{{ action.name }}</span>
												</li>
											</ul>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
				<div v-if="!dataLoaded && !listView" class="group-loader"><Loader /></div>
			</handy-scroll>
		</div>
	</script>
	<script>
        const utils = {
            findObjectByPropValue: (array, value, prop) => {
                return array.find(x => x[prop] === value);
            },
            changeObjPropInArrayById: (array, value, prop, id, idProp) => {
                for (var i in array) {
                    if (array[i][idProp] == id) {
                        array[i][prop] = value;
                        break;
                    }
                }
            },
		};

        Vue.use(VueDraggable.default);
		Vue.component('Organizations', {
			template: '#organizations-template',
			data() {
				return {
					modalOrgKey: 0,
					modalContactKey: 0,
					modalTypeKey: 0,
					modalKey: 0,
					modalMergeKey: 0,
					modalImportKey: 0,
					modalAddressKey: 0,
					modalRevenueKey: 0,
					refreshImportOrg: 0,
					modalEditRevenueKey: 0,
					modalEditAddressKey: 0,
					modalStateKey: 0,
					listView: true,
					tableActions: {
						single: {
							"details": { name: 'Details', icon: "details" },
							"edit": { name: 'Edit', icon: "edit" },
							"updateStage": { name: "Move to stage", icon: "move" },
							"updateState": { name: "Change state", icon: "repeat" },
							"deactivate": { name: "Deactivate", icon: "eye-off" },
							"addContacts": { name: 'Add contact', icon: "user-plus" },
							"addAddresses": { name: "Add Addresses", icon: "map-pin" },
							"addRevenue": { name: "Add revenue", icon: "" }
						},
						singleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: 'Delete', icon: "delete" }
						},
						multiple: {
							"deactivate": { name: "Deactivate", icon: "eye-off" },
							"merge": { name: "Merge" }

						},
						multipleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: 'Delete', icon: "delete" }
						}
					},
					mergeOrgModal: {
						mergeSelectOrg: [],
						mergeSelectLeads: [],
						mergeSelectAddress: [],
						mergeSelectContacts: [],
						mergeSelectSourceLeads: [],
						mergeSelectSourceContacts: [],
						mergeSelectSourceAddresses: [],
						mergeSourceLeads: [],
						mergeSourceAddresses: [],
						mergeSourceContacts: [],
						mergeTargetOrganization: null,
						mergeRemainingOrgs: [],
						mergeMapper: [],
						mergeTargetAction: 'delete'
					},
					importOrgModal:
					{
						importDelimiter: [{ name: 'Comma', id: 1 }, { name: 'Semicolon', id: 2 }, { name: 'Tabulation', id: 3 }],
						importProperties: [{ name: 'Name', id: 1 }, { name: 'FiscalCode', id: 2 }, { name: 'Industry', id: 4 },
							{ name: 'VitCode', id: 6 }, { name: 'Email', id: 7 },
							{ name: 'Phone', id: 8 }, { name: 'Website', id: 9 }, { name: 'Bank', id: 10 },
							{ name: 'IBANCode', id: 11 }, { name: 'CodSwift', id: 12 }, { name: 'Type of Organization Prospect', id: 13 },
							{ name: 'Region', id: 14 }, { name: 'City', id: 15 }, { name: 'Street', id: 16 }, { name: 'Zip Code', id: 17 }, { name: 'Description', id: 18 }],
						importEncoding: [{ name: 'UTF-8', id: 1 }],
						sourceImportProperties: [],
						importParameter: [],
						importHideSelects: true,
						fileExtension: '',
						sourceImportDelimiter: null,
						sourceImportEncoding: null,
						sourceImportAction: null,
						sourceImportParameter: [],
						action: true,
						file: null,
						checkExtension: false,
						checkState: true
					},
					regions: [],
					cities: [],
					states: [],
					modalValues: {},
					orgValues: {},
					orgAddress: {},
					orgRevenue: {},
					editOrgId: null,
					contacts: [],
					newOrgId: null,
					newContactValues: {
						organizationId: '',
						email: '',
						phone: '',
						requiredPhone: true,
						phoneList: [],
						firstName: '',
						lastName: '',
						description: ''
					},
					tableKey: 0,
					pageRequestFilters: [],
					modalKey: 0,
					refreshInputs: 0,
					addByStage: false,
					currentStage: null,
					showFilters: false,
					waitAddressButton: false,
					waitRevenueButton: false,
					editableOrgModal: false,
					orgAddresses: [],
					orgRevenues: [],
					revenue: {},
					address: {},
					countryName: '',
					regionName: '',
					searchString: '',
					displayStates: 'hide-field',
					hideEmailInputs: ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'],
					emailList: [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					],

					phoneList: [
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: ''
						},
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: ''
						},
						{
							phone: '',
							countryCode: 'MD',
							dialCode: '373',
							label: ''
						}],
					contactEmailList: [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					],
					hidePhoneInputs: ['', 'hide-field', 'hide-field'],
					contactHideEmailInputs: ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'],
					hideInput: {},
					orgColumns: [
						{
							name:'Country',
							id: 'address-country'
						},
						{
							name:'Region',
							id: 'address-region'
						},
						{
							name:'City',
							id: 'address-city'
						},
						{
							name: 'Street',
							id: 'address-street'
						},
						{
							name: 'ZIP',
							id: 'address-zip'
						}
					],
					orgColumnsRevenue: [
						{
							name: 'Year',
							id: 'revenue-year',
						},
						{
							name: 'Currency',
							id: 'revenue-currencyCode'
						},
						{
							name: 'Amount',
							id: 'revenue-amount'
						}
					],
					addOrgAddr: false,
					currentHiddenPhoneIndex: 1,
					currentHiddenEmailIndex: 1,
				};
			},
			computed: {
				labels() {
					return this.$store.state.allPhoneLabels;
				},
				emailLabels() {
					return this.$store.state.allEmailLabels;
				},
				currenciesListSelect() {
					return this.$store.state.allCurrencies;
				},
				countries() {
					return this.$store.state.allCountries;
				},
				organizationStages() {
					return this.$store.state.allOrganizationStages;
				},
				organizationsListSelect() {
					return this.$store.getters.allOrganizationsSelect;
				},
				employeesSelect() {
					return this.$store.state.allEmployees.map(e => {
						const newObj = {
							label: e.interval,
							value: e.id,
						}
						return newObj;
					});
				},
				pageOptionsComponents() {
					return [
							{
							name: 'Button',
							props: {
								label: '',
								btnType: this.listView ? 'primary' : 'outline-primary',
								className: 'ml-auto' + (this.listView ? ' list-btn active' : ' list-btn'),
								onClick: () => {
									this.tableKey++;
									this.listView = true;
								}
							}
						},
							{
								name: 'Button',
								props: {
									label: '',
									btnType: this.listView ? 'outline-primary' : 'primary',
									className: this.listView ? 'grid-btn' : 'grid-btn active',
									onClick: () => {
										this.listView = false;
									}
								}
							},
							{
							name: 'Button',
							props: {
								label: "@Localizer["add_organization"]",
								className: 'ml-auto',
								btnType: 'success',
								className: 'ml-3',
								onClick: () => {
									this.editableOrgModal = false;
									this.resetOrgModalValues();
									this.resetOrgAddressValues();
									this.addByStage = false;
									this.refreshInputs++;
									this.orgAddresses = [];
									this.orgRevenues = [];
									this.cities = [];
									this.modalOrgKey++;
									this.modalOrgKey++;
									$(`#${this.modalOrgProps.id}`).modal("show");
								}
							}
						},
							{
								name: 'Button',
								props: {
									label: 'Import',
									className: 'ml-2',
									btnType: 'primary',
									onClick: () => {
										this.resetImportModalValues();
										$(`#${this.modalImportOrg.id}`).modal("show");
									}
								}
							}
					]
				},
				listIndustry() {
					let listOfIndustries = [];
					listOfIndustries = this.$store.state.selectorsForOrganization.listIndustry?.map(e => {
						const newObj = {
							label: e.text,
							value: e.value,
						}
						return newObj;
					});
					return listOfIndustries ? listOfIndustries : [];
				},
				modalAddIndustry() {
					return {
						id: 'industryModal',
						label: 'Add industry',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'entity-name',
									type: 'text',
									label: 'Name',
									required: true,
									className: 'col-12',
									value: this.modalValues.name,
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalAddIndustry.id}`).modal("hide");
										$(`#${this.modalOrgProps.id}`).modal("show");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label:  "@Localizer["save"]",
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							this.addNewEntity().then(() => {
								this.$store.dispatch('getAllSelectorsForOrganization');
									$(`#${this.modalAddIndustry.id}`).modal("hide");
									$(`#${this.modalOrgProps.id}`).modal("show");
							});
						}
					}
				},
				modalImportOrg() {
					return {
						id: 'importOrganizations',
						label: 'Import Organizations',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'import-Properties',
									label: 'Properties',
									required: true,
									multiple: true,
									disabled: false,
									options: this.convertToSelectList(this.importOrgModal.importProperties),
									value: this.importOrgModal.sourceImportProperties,
									className: 'col-12'
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Choose file type',
									className: 'col-3 ml-2'
								}
							},
							{
								name: 'Radio',
								props: {
									id: 'import-fileType',
									label: 'Choose file type:',
									required: true,
									className: 'row ml-1',
									options: [{ value: 'XLS', label: 'Excel' }, { value: 'CSV', label: 'Spreadsheets' }],
									value: 'Excel'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'import-Delimiter',
									label: 'Delimiter',
									required: !this.importOrgModal.importHideSelects,
									disabled: this.importOrgModal.importHideSelects,
									options: this.convertToSelectList(this.importOrgModal.importDelimiter),
									value: this.importOrgModal.sourceImportDelimiter,
									className: 'col-6 mt-2'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'import-Encoding',
									label: 'Encoding',
									required: !this.importOrgModal.importHideSelects,
									disabled: this.importOrgModal.importHideSelects,
									options: this.convertToSelectList(this.importOrgModal.importEncoding),
									value: this.importOrgModal.sourceImportEncoding,
									className: 'col-6 mt-2'
								}
							},
							{
								name: 'File',
								props: {
									id: 'import-File',
									className: 'col-6 mt-1',
									label: 'Upload File',
									disabled: false,
									required: true,
									acceptedExtensions: this.importOrgModal.fileExtension
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Wrong extension!!!',
									className: 'col-5 ml-1 mt-2 text-danger',
									hidden: this.importOrgModal.checkExtension
								}
							},
							{
								name: 'Select',
								props: {
									id: 'import-MachingParameter',
									label: 'Matching parameter',
									required: true,
									multiple: true,
									disabled: false,
									options: this.convertToSelectList(this.importOrgModal.importParameter),
									value: this.importOrgModal.sourceImportParameter,
									className: 'col-12 mt-3'
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Actions',
									className: 'col-3 ml-1'
								}
							},
							{
								name: 'CheckBox',
								props: {
									id: 'import-Action',
									label: 'Choose file type:',
									required: this.importOrgModal.action,
									className: 'col-12 ml-1',
									options: [{ value: 'Delete', label: 'Delete all existing records before import' },
										{ value: 'Update', label: 'Update existing record (Only ADD missing information)' },
										{ value: 'No maching', label: 'If no matching record is found. Create new record' },
										{ value: 'More than one', label: 'If more than one records are found. Create a new record'}],
									value: 'Delete'
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: 'Import',
									btnType: 'success',
									disabled: !this.importOrgModal.checkState,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: async () => {
							$(`#${this.modalImportOrg.id}`).modal("hide");
							this.importOrgsPost();
						}
					}
				},
				modalMergeOrg() {
					return {
						id: 'mergeOrganizations',
						label: 'Merge Organizations',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'merge-SelectedOrganizations',
									label: 'Target',
									required: true,
									disabled: false,
									options: this.convertToSelectList(this.mergeOrgModal.mergeSelectOrg),
									value: this.mergeOrgModal.mergeTargetOrganization,
									multiple: false,
									className: 'col-12'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'merge-ContactsId',
									label: 'Contacts',
									required: false,
									disabled: false,
									options: this.convertContactsToSelectList(this.mergeOrgModal.mergeSelectSourceContacts),
									value: this.mergeOrgModal.mergeSourceContacts,
									multiple: true,
									className: 'col-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'merge-LeadsId',
									label: 'Leads',
									required: false,
									disabled: false,
									options: this.convertToSelectList(this.mergeOrgModal.mergeSelectSourceLeads),
									value: this.mergeOrgModal.mergeSourceLeads,
									multiple: true,
									className: 'col-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'merge-AddressesId',
									label: 'Addresses',
									required: false,
									disabled: false,
									options: this.convertToSelectList(this.mergeOrgModal.mergeSelectSourceAddresses),
									value: this.mergeOrgModal.mergeSourceAddresses,
									multiple: true,
									className: 'col-4'
								}
							},
							{
								name: 'TextBlock',
								props: {
									value: 'Source Organizations:'
								}
							},
							{
								name: 'Radio',
								props: {
									id: 'merge-targetActionId',
									label: 'Choose Action',
									required: true,
									options: [{ value: 'delete', label: 'Delete' }, { value: 'deactivate', label: 'Disable' }],
									value: this.mergeOrgModal.mergeTargetAction
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: 'Merge',
									btnType: 'success',
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: async () => {
							$(`#${this.modalMergeOrg.id}`).modal("hide");
							this.mergeOrgsPost();
						}
					}
				},
				modalContactProps() {
					return {
						id: 'addcontacts',
						label: 'Add contact',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'contact-firstName',
									type: 'text',
									label: 'First Name',
									required: true,
									value: this.newContactValues.firstName,
									className: 'col-12 col-md-6',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-lastName',
									type: 'text',
									label: 'Last Name',
									required: true,
									value: this.newContactValues.lastName,
									className: 'col-12 col-md-6',
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact-organizationId',
									label: 'Organization' ,
									required: true,
									disabled: true,
									options: this.organizationsListSelect,
									value: this.newContactValues.organizationId,
									className: 'col-12'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email1',
									type: 'email',
									label: 'Email',
									required: true,
									className: 'col-6',
									value: this.contactEmailList[0].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel1',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.contactEmailList[0].label,
									className: 'col-5'
								}
							},
							{
								name: 'Button',
								props: {
									label: '&#43;',
									className: 'btn btn-outline-secondary btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: 'text-center',
									disabled: !this.getContactEmailList[4],
									onClick: () => this.emitValueContact({ value: '', id: `HideEmailInputContact${this.currentHiddenEmailIndex++}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email2',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getContactEmailList[1],
									value: this.contactEmailList[1].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel2',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.contactEmailList[1].label,
									className: 'col-5 ' + this.getContactEmailList[1]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[1]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email3',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getContactEmailList[2],
									value: this.contactEmailList[2].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel3',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.contactEmailList[2].label,
									className: 'col-5 ' + this.getContactEmailList[2]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[2]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email4',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getContactEmailList[3],
									value: this.contactEmailList[3].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel4',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.contactEmailList[3].label,
									className: 'col-5 ' + this.getContactEmailList[3]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[3]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'Input',
								props: {
									id: 'contact-email5',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getContactEmailList[4],
									value: this.contactEmailList[4].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_EmailLabel5',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.contactEmailList[4].label,
									className: 'col-5 ' + this.getContactEmailList[4]
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[4]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'contact-Phone1',
									type: 'text',
									label: 'Phone',
									required: this.hideInput.class == '' ? true : false,
									className: 'col-6',
									disabled: this.hideInput.class == '' ? false : true,
									dialCode: this.phoneList[0].dialCode,
									defaultCountry: this.phoneList[0].countryCode,
									value: this.phoneList[0].phone,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_PhoneLabel1',
									label: 'Label',
									disabled: this.hideInput.class == '' ? false : true,
									noneSelectedText: 'Select label',
									options: this.labels,
									value: this.phoneList[0].label,
									className: 'col-5'
								}
							},
							{
								name: 'Button',
								props: {
									label: '&#43;',
									className: 'btn btn-outline-secondary btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: 'text-center',
									disabled: Boolean(this.hideInput.class || this.hidePhoneInputs[0] || !this.hidePhoneInputs[2]),
									onClick: () => this.emitValueContact({ value: '', id: `HideInput${this.currentHiddenPhoneIndex++}` })
								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'contact-Phone2',
									type: 'text',
									label: 'Phone',
									className: 'col-6 ' + this.hidePhoneInputs[1] + ' ' + this.hideInput.class,
									dialCode: this.phoneList[1].dialCode,
									defaultCountry: this.phoneList[1].countryCode,
									value: this.phoneList[1].phone,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_PhoneLabel2',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.labels,
									value: this.phoneList[1].label,
									className: 'col-5 ' + this.hidePhoneInputs[1] + ' ' + this.hideInput.class
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.hidePhoneInputs[1]} ${this.hideInput.class}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideInput${this.currentHiddenPhoneIndex--}` })
								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'contact-Phone3',
									type: 'text',
									label: 'Phone',
									className: 'col-6 ' + this.hidePhoneInputs[2] + ' ' + this.hideInput.class,
									dialCode: this.phoneList[2].dialCode,
									defaultCountry: this.phoneList[2].countryCode,
									value: this.phoneList[2].phone,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'contact_PhoneLabel3',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.labels,
									value: this.phoneList[2].label,
									className: 'col-5 ' + this.hidePhoneInputs[2] + ' ' + this.hideInput.class
								}
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.hidePhoneInputs[2]} ${this.hideInput.class}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideInput${this.currentHiddenPhoneIndex--}` })
								}
							},
							{
								name: 'Switcher',
								props: {
									id: 'N/ALabel',
									value: this.newContactValues.notAvailable,
									wrapper: 'Div',
									wrapperClass: 'col-12 d-flex align-items-center mb-3',
									label: 'N/A'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'contact-description',
									label: 'Description',
									value: this.newContactValues.description,
									className: 'col-12'
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalContactProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: "@Localizer["add"]",
									btnType: 'success',
									btnDOMType: 'submit',
									onMouseDown: () => {
										this.editableOrgModal = true;
									}
								}
							}
						],
						onSubmit: () => {
							if (this.newContactValues.phoneList)
								this.newContactValues.phoneList = this.newContactValues.phoneList.map(e => e.value);
							if (this.newContactValues.phone)
								this.newContactValues.phoneList.push(this.newContactValues.phone);

							this.addNewContact().then(() => {
								$(`#${this.modalContactProps.id}`).modal("hide");
							});
						},
						onHide: e => {
							setTimeout(function(){ $('.modal-backdrop').remove(); }, 1000);
						}
					}
				},
				modalRevenueProps() {
					return {
						id: 'orgRevenue',
						label: 'Organization Revenue',
						modalSize: 'lg',
						formInputs: [
							{
								name: 'Listing',
								props: {
									inputPrefix: 'revenue-',
									id: 'company-Revenues',
									className: 'col-12',
									items: this.orgRevenues,
									columns: this.orgColumnsRevenue,
									deleteItem: revenueId => {
										this.deleteOrganizationRevenue(revenueId);
									},
									editItem: revenueId => {
										$(`#${this.modalRevenueProps.id}`).modal("hide");
										this.editOrganizationRevenue(revenueId);
									}
								}
							},
							{
								name: 'Yearpicker',
								props: {
									id: 'revenue-year',
									label: 'Year',
									required: true,
									value: this.orgRevenue.year,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'revenue-currencyCode',
									label: 'Currency',
									options: this.currenciesListSelect,
									required: true,
									size: 10,
									searchable: true,
									value: this.orgRevenue.currencyCode,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'revenue-amount',
									label: 'Amount',
									type: 'number',
									required: true,
									value: this.orgRevenue.amount,
									className: 'col-12 col-md-4',
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalRevenueProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: "@Localizer["add"]",
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitRevenueButton
								}
							}
						],
						onSubmit: () => {
							this.orgRevenue.year = moment(this.orgRevenue.year).format("YYYY/MM/DD");
							this.addOrganizationRevenue(this.orgRevenue.organizationId).then(() => {
								const orgId = this.orgRevenue.organizationId;
								this.resetOrgRevenueValues();
								this.orgRevenue.organizationId = orgId;
							});
						}
					}
				},
				editRevenueProps() {
					return {
						id: 'editOrgRevenue',
						label: 'Edit Organization Revenue',
						modalSize: 'lg',
						formInputs: [
							{
								name: 'Yearpicker',
								props: {
									id: 'editRevenue-year',
									label: 'Year',
									required: true,
									value: this.revenue.year,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'editRevenue-currencyCode',
									label: 'Currency',
									options: this.currenciesListSelect,
									required: true,
									size: 10,
									searchable: true,
									value: this.revenue.currencyCode,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'editRevenue-amount',
									label: 'Amount',
									type: 'number',
									required: true,
									value: this.revenue.amount,
									className: 'col-12 col-md-4',
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.editRevenueProps.id}`).modal("hide");
										$(`#${this.modalRevenueProps.id}`).modal("show");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: "@Localizer["save"]",
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitRevenueButton
								}
							}
						],
						onSubmit: () => {
							this.revenue.year = moment(this.revenue.year).format("YYYY/MM/DD");
							this.updateRevenue().then(() => {
								$(`#${this.editRevenueProps.id}`).modal("hide");
								this.addRevenue(this.revenue.organizationId);
								this.resetEditRevenueValues();
							});
						}
					}
				},
				orgFormSubmits() {
					const resultArray = [
						{
							name: 'Button',
							props: {
								label:"@Localizer["cancel"]",
								btnType: 'outline-secondary',
								onClick: () => {
									$(`#${this.modalOrgProps.id}`).modal("hide");
								}
							}
						},
						{
							name: 'Button',
							props: {
								label: "@Localizer["save"]",
								btnType: 'success',
								btnDOMType: 'submit',
								onMouseDown: () => {
									this.addContacts = false;
								}
							}
						}
					];
					if (!this.editableOrgModal) {
						resultArray.push({
							name: 'Button',
							props: {
								label: 'Save and add contacts',
								btnType: 'success',
								btnDOMType: 'submit',
								onMouseDown: () => {
									this.addContacts = true;
								}
							}
						});
					}
					return resultArray;
				},
				modalOrglabel() {
					return this.editableOrgModal ? 'Edit Organization' : 'Add Organization';
				},
				modalOrgProps() {
					return {
						id: 'organizationModal',
						modalSize: 'lg',
						label: this.modalOrglabel,
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'company-name',
									type: 'text',
									label: 'Name',
									required: true,
									value: this.orgValues.name,
									className: 'col-12 col-md-6',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-fiscalCode',
									label: 'Fiscal Code',
									type: 'text',
									value: this.orgValues.fiscalCode,
									className: 'col-12 col-md-6',
									validator: value => fieldValidationFunc(value, 'fiscalCodeMd'),
									validatorInput: value => fieldValidationInputFunc(value, 'fiscalCodeMd')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-industryId',
									label: 'Industry',
									options: this.listIndustry,
									size: 10,
									searchable: true,
									value: this.orgValues.industryId,
									className: 'col-11 col-md-5 col-lg-3'
								}
							},
							{
								name: 'Button',
								props: {
									label: '<span>&#43;<span/>',
									className: "wrapper",
									wrapper: "div",
									wrapperClass: "col-1",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalOrgProps.id}`).modal("hide");
										this.resetModalValues();
										this.modalKey++;
										$(`#${this.modalAddIndustry.id}`).modal("show");
									}
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-employeeId',
									label: 'Nr. of employees',
									value: this.orgValues.employeeId,
									options: this.employeesSelect,
									className: 'col-12 col-md-6 col-lg-4'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-vitCode',
									type: 'text',
									label:'Vit Code',
									value: this.orgValues.vitCode,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar50'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email1',
									type: 'email',
									label:'Email',
									className: 'col-6',
									value: this.emailList[0].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel1',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[0].label,
									className: 'col-6'
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput1',
									className: 'col-12 ' + this.getEmailList[0],
									hideDelete: true,
									hidePlus: this.getEmailList[1] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email2',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[1],
									value: this.emailList[1].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel2',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[1].label,
									className: 'col-6 ' + this.getEmailList[1]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput2',
									className: 'col-12 ' + this.getEmailList[1],
									hidePlus: this.getEmailList[2] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email3',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[2],
									value: this.emailList[2].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel3',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[2].label,
									className: 'col-6 ' + this.getEmailList[2]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput3',
									className: 'col-12 ' + this.getEmailList[2],
									hidePlus: this.getEmailList[3] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email4',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[3],
									value: this.emailList[3].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel4',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[3].label,
									className: 'col-6 ' + this.getEmailList[3]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput4',
									className: 'col-12 ' + this.getEmailList[3],
									hidePlus: this.getEmailList[4] == '' ? true : false,
									hideLabel: false,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'org-email5',
									type: 'email',
									label: 'Email',
									className: 'col-6 ' + this.getEmailList[4],
									value: this.emailList[4].email,
									validator: value => fieldValidationFunc(value, 'email')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'org_EmailLabel5',
									label: 'Label',
									noneSelectedText: 'Select label',
									options: this.emailLabels,
									value: this.emailList[4].label,
									className: 'col-6 ' + this.getEmailList[4]
								}
							},
							{
								name: 'AddHideInput',
								props: {
									id: 'HideEmailInput5',
									className: 'col-12 ' + this.getEmailList[4],
									hidePlus: true,
									hideLabel: false,

								}
							},
							{
								name: 'PhoneInput',
								props: {
									id: 'org-phone',
									type: 'text',
									label: 'Phone',
									className: 'col-12 col-md-6 col-lg-4',
									dialCode: this.orgValues.dialCode,
									defaultCountry: 'MD',
									value: this.orgValues.phone,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'responsible-phone',
									type: 'text',
									label: 'Responsible',
									value: this.orgValues.ResponsibleForPhoneNumber,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-webSite',
									label: 'WEB Site',
									type: 'text',
									value: this.orgValues.webSite,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar50'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
								}
							},
							{
								name: 'Yearpicker',
								props: {
									id: 'company-dateOfFounding',
									label: 'Year of Founding',
									required: false,
									className: 'col-12 col-md-6 col-lg-4',
									value: this.orgValues.dateOfFounding
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-bank',
									label: 'Bank',
									type: 'text',
									value: this.orgValues.bank,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar500'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar500')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'company-iBANCode',
									label: 'IBAN Code',
									type: 'text',
									value: this.orgValues.iBANCode,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},

							{
								name: 'Input',
								props: {
									id: 'company-codSwift',
									type: 'text',
									label: 'Swift Code',
									value: this.orgValues.codSwift,
									className: 'col-12 col-md-6 col-lg-4',
									validator: value => fieldValidationFunc(value, 'varChar50'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-stageId',
									label: 'Stage',
									options: this.organizationStages,
									disabled: this.addByStage,
									required: true,
									value: this.orgValues.stageId,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-stateId',
									label:'State',
									options: this.states,
									size: 10,
									value: this.orgValues.stateId,
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'company-isDeleted',
									label: 'Status',
									required: true,
									disabled: !this.editableOrgModal,
									value: this.orgValues.isDeleted,
									options: [
										{
											label: 'Active',
											value: 'false',
										},
										{
											label: 'Inactive',
											value: 'true'
										}
									],
									className: 'col-12 col-md-4'
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'addressC-countryId',
									label: 'Country',
									size: 10,
									required: true,
									searchable: true,
									options: this.countries,
									value: this.orgAddress.countryId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'addressC-regionId',
									label: 'Region',
									size: 10,
									noneSelectedText: 'Please select the country first',
									searchable: true,
									options: this.regions,
									value: this.orgAddress.regionId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'addressC-cityId',
									label: 'City',
									noneSelectedText: 'Please select the region first',
									options: this.cities,
									required: true,
									size: 10,
									searchable: true,
									value: this.orgAddress.cityId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'addressC-street',
									label: 'Street',
									type: 'text',
									value: this.orgAddress.street,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'addressC-zip',
									label: 'ZIP',
									type: 'text',
									value: this.orgAddress.zip,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'zip'),
									validatorInput: value => fieldValidationInputFunc(value, 'zip')
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'company-description',
									label: 'Description',
									value: this.orgValues.description,
									className: 'col-12'
								}
							}
						],
						formSubmits: this.orgFormSubmits,
						onSubmit: () => {
							if (this.orgValues.phone) {
								this.orgValues.dialCode = `+${this.orgValues.dialCode}`;
							}
							if (!this.editableOrgModal) {
								if (this.orgValues.dateOfFounding) {
									this.orgValues.dateOfFounding = moment(this.orgValues.dateOfFounding).format("YYYY/MM/DD");
								};
								this.resetContactValues();
								this.addNewOrganization().then(() => {
									this.addOrganizationAddress(this.newOrgId).then(() => {
										this.modalContactKey++;
										$(`#${this.modalOrgProps.id}`).modal("hide");
										if(this.addContacts)
										$(`#${this.modalContactProps.id}`).modal("show");
									});
								});
							} else {
								if (this.orgValues.dateOfFounding) {
									this.orgValues.dateOfFounding = moment(this.orgValues.dateOfFounding).format("YYYY/MM/DD");
								};
								let statesByStage = []
								this.loadStatesByStage(this.orgValues.stageId).then(result => {
									statesByStage = result.map(({ id }) => id)
									if (statesByStage.length == 1)
										this.orgValues.stateId = statesByStage[0];
									else if (!statesByStage.includes(this.orgValues.stateId))
										this.orgValues.stateId = null;
									this.updateOrganization().then(() => {
										$(`#${this.modalOrgProps.id}`).modal("hide");
									});
								});

							}
						}
					}
				},
				modalAddressProps() {
					return {
						id: 'orgAddress',
						label: 'Organization Address',
						modalSize: 'lg',
						formInputs: [
							{
								name: 'Listing',
								props: {
									inputPrefix: 'address-',
									id: 'company-Addresses',
									className: 'col-12',
									items: this.orgAddresses,
									columns: this.orgColumns,
									deleteItem: addressId => {
										this.deleteOrganizationAddress(addressId);
									},
									editItem: addressId => {
										$(`#${this.modalAddressProps.id}`).modal("hide");
										this.editOrganizationAddress(addressId);
									}
								}
							},
							{
								name: 'Select',
								props: {
									id: 'address-countryId',
									label: 'Country',
									size: 10,
									searchable: true,
									options: this.countries,
									value: this.orgAddress.countryId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'address-regionId',
									label: 'Region',
									size: 10,
									noneSelectedText: 'Select country first',
									searchable: true,
									options: this.regions,
									value: this.orgAddress.regionId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'address-cityId',
									label: 'City',
									noneSelectedText: 'Select region first',
									options: this.cities,
									required: true,
									size: 10,
									searchable: true,
									value: this.orgAddress.cityId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'address-street',
									label: 'Street',
									type: 'text',
									value: this.orgAddress.street,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'textField'),
									validatorInput: value => fieldValidationInputFunc(value, 'textField')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'address-zip',
									label: 'ZIP',
									type: 'text',
									value: this.orgAddress.zip,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'zip'),
									validatorInput: value => fieldValidationInputFunc(value, 'zip')
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalAddressProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: 'Add',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddressButton
								}
							}
						],
						onSubmit: () => {
							this.addOrganizationAddress(this.orgAddress.organizationId).then(() => {
								const orgId = this.orgAddress.organizationId;
								this.resetOrgAddressValues();
								this.regions = [];
								this.cities = [];
								this.orgAddress.organizationId = orgId;
							});
						}
					}
				},
				editAddressProps() {
					return {
						id: 'editOrgAddress',
						label: 'Edit address',
						modalSize: 'lg',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'editAddress-countryId',
									label: 'Country',
									size: 10,
									searchable: true,
									options: this.countries,
									value: this.address.countryId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'editAddress-regionId',
									label: 'Region',
									noneSelectedText: 'Select country first',
									size: 10,
									searchable: true,
									options: this.regions,
									value: this.address.regionId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'editAddress-cityId',
									label: 'City',
									noneSelectedText: 'Select region first',
									options: this.cities,
									required: true,
									size: 10,
									searchable: true,
									value: this.address.cityId,
									className: 'col-12 col-md-6 col-lg-3'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'editAddress-street',
									label: 'Street',
									type: 'text',
									value: this.address.street,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'textField'),
									validatorInput: value => fieldValidationInputFunc(value, 'textField')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'editAddress-zip',
									label: 'ZIP',
									type: 'text',
									value: this.address.zip,
									className: 'col-12 col-md-6 col-lg-3',
									validator: value => fieldValidationFunc(value, 'zip'),
									validatorInput: value => fieldValidationInputFunc(value, 'zip')
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.editAddressProps.id}`).modal("hide");
										$(`#${this.modalAddressProps.id}`).modal("show");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: 'Save',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddressButton
								}
							}
						],
						onSubmit: () => {
							this.updateAddress().then(() => {
								$(`#${this.editAddressProps.id}`).modal("hide");
								this.addAddresses(this.address.organizationId);
								this.resetEditAddressValues();
							});
						}
					}
				},
				modalUpdateStage() {
					return {
						id: 'orgType',
						modalSize: 'sm',
						label: 'Update Organization Stage',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'stageUpdate-stageId',
									label: 'Please select stage',
									options: this.organizationStages,
									required: true,
									value: this.orgValues.stageId,
									className: 'col-12'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'stageUpdate-stateId',
									label: 'Please select state:',
									className: 'col-12 ' + this.displayStates,
									options: this.states,
									value: this.orgValues.stateId
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalUpdateStage.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: 'Save',
									btnType: 'success',
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							this.updateOrganizationStage().then(() => {
								$(`#${this.modalUpdateStage.id}`).modal("hide");
							});
						}
					}
				},
				modalUpdateState() {
                    return {
                        id: 'stateOrg',
                        modalSize: 'sm',
                        label: 'Change organization state',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'stateId',
                                    label: 'Organization state',
                                    required: true,
									options: this.states,
                                    className: 'col-12',
                                    value: this.orgValues.stateId
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitStatusAddButton,
                                    onClick: () => {
										$(`#${this.modalUpdateState.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitStatusAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.updateOrganizationState().then(() => {
								$(`#${this.modalUpdateState.id}`).modal("hide");
                            });
                        }
                    }
                },
				tableFilters() {
					return [
						{
							id: 'countryId',
							label: 'Country',
							values: this.countriesListFilter
						},
						{
							id: 'employeeId',
							label: 'Nr. of employees',
							values: this.employeesListFilter
						},
						{
							id: 'industryId',
							label: 'Industry',
							values: this.industriesListFilter
						}
					]
				},
				customQueryparams() {
					const params = {
						gSearch: this.searchString,
						includeDeleted: false
					};
					this.pageRequestFilters.forEach((a,i) => {
						for (pv in a) {
							params[`pageRequestFilters[${i}][${pv}]`] = a[pv];
						}
					});
					return params;
				},
				countriesListFilter() {
					let newArray = [];
					this.countries.forEach(e => {
						let newElem = Object.assign({}, e);
						newElem.active = false;
						newArray.push(newElem);
					});
					return newArray;
				},
				employeesListFilter() {
					let newArray = [];
					this.employeesSelect.forEach(e => {
						let newElem = Object.assign({}, e);
						newElem.active = false;
						newArray.push(newElem);
					});
					return newArray;
				},
				industriesListFilter() {
					let newArray = [];
					this.listIndustry.forEach(e => {
						let newElem = Object.assign({}, e);
						newElem.active = false;
						newArray.push(newElem);
					});
					return newArray;
				},
				getEmailList() {
					return this.hideEmailInputs;
				},
				getContactEmailList() {
					return this.contactHideEmailInputs;
				}
			},
			created() {
				this.$store.dispatch('getAllOrganizationStages');
				this.$store.dispatch('getAllSelectorsForOrganization');
				this.$store.dispatch('getAllEmployees');
				this.$store.dispatch('getAllCountries');
				this.$store.dispatch('getAllOrganizations');
				
				this.resetOrgModalValues();
				this.showFilters = true;
			},
			methods: {
				getOrgData() {
					this.getAllEmails();
					if (!this.labels.length) {
						this.$store.dispatch('getAllPhoneLabels');
					}
				},
				getContactData() {
					this.getAllEmails();
				},
				getAllEmails() {
					if (!this.emailLabels.length) {
						this.$store.dispatch('getAllEmailLabels');
					}
				},
				getRevenueData() {
					if (!this.currenciesListSelect.length) {
						this.$store.dispatch('getAllCurrencies');
					}
				},
				async addNewEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Industry.AddNewIndustry, 'PUT', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async deleteEmail(emailId) {
					customAjaxRequest(apiEndpoints.Email.DeleteEmailById, 'DELETE', { emailId }).then(() => {
						this.tableKey++;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				async deletePhone(phoneId) {
					customAjaxRequest(apiEndpoints.Phone.DeletePhoneById, 'DELETE', { phoneId }).then(() => {
						this.tableKey++;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				async addEmailList(ListToAdd) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Email.AddEmailRange, 'PUT', { model: ListToAdd }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async updateEmailList(ListToUpdate) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Email.UpdateRangeEmail, 'POST', { model: ListToUpdate }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async addNewOrganization() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.AddNewOrganization, 'PUT', this.orgValues).then(result => {
							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.hideEmailInputs[i] == '' && this.emailList[i].email != '') {
									EmailListAdd.push({
										email: this.emailList[i].email,
										label: this.emailList[i].label,
										organizationId: result
									});
								}
							}
							if (EmailListAdd.length > 0)
								this.addEmailList(EmailListAdd);

							this.$store.dispatch('getAllOrganizationsForSelect');
							this.newOrgId = result;
							this.newContactValues.organizationId = result;
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async addOrganizationAddress(orgId) {
					this.waitAddressButton = true;
					this.orgAddress.organizationId = orgId;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.AddOrganizationAddress, 'PUT', this.orgAddress).then(result => {
							this.appendAddressToListing(result).then(() => {
								this.waitAddressButton = false;
							});
							resolve(true);
						}).catch(e => {
							this.waitAddressButton = false;
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async updateOrganization() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.UpdateOrganization, 'POST', this.orgValues).then(result => {
							let EmailListUpdate = [];
							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.emailList[i].email != '') {
									if (this.hideEmailInputs[i] == '') {
										if (this.emailList[i].id) {
											EmailListUpdate.push(this.emailList[i]);
										}
										else {
											EmailListAdd.push({
												email: this.emailList[i].email,
												label: this.emailList[i].label,
												organizationId: result
											});
										}
									}
								}

							}
							if (EmailListUpdate.length > 0)
								this.updateEmailList(EmailListUpdate);
							if (EmailListAdd.length > 0) {
								this.addEmailList(EmailListAdd);
							}
							if (this.addOrgAddr)
							{
								this.addOrganizationAddress(this.orgValues.id);
								this.addOrgAddr = false;
							}
							else
								this.updateOrganizationAddress();
							resolve(true);
							this.tableKey++;
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async loadOrganization(organizationId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.GetOrganizationById, 'GET', { organizationId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async addOrganizationRevenue(orgId) {
					this.waitRevenueButton = true;
					this.orgRevenue.organizationId = orgId;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationRevenue.AddNewOrganizationRevenue, 'PUT', this.orgRevenue).then(result => {
							this.appendRevenueToListing(result).then(() => {
								this.waitRevenueButton = false;
							})
							resolve(true);
						}).catch(e => {
							this.waitRevenueButton = false;
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async addPhoneList(ListToAdd) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Phone.AddPhoneRange, 'PUT', { model: ListToAdd }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async addNewContact() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Contact.AddNewContact, 'PUT', this.newContactValues).then(result => {
							if (this.hideInput.class == '') {
								let addList = [];
								for (i = 0; i < 3; i++) {
									if (this.hidePhoneInputs[i] == '') {
										addList.push({
											phone: this.phoneList[i].phone,
											countryCode: this.phoneList[i].countryCode,
											dialCode: this.phoneList[i].dialCode,
											label: this.phoneList[i].label,
											contactId: result
										});
									}
								}
								this.addPhoneList(addList);
							}

							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.contactHideEmailInputs[i] == '') {
									EmailListAdd.push({
										email: this.contactEmailList[i].email,
										label: this.contactEmailList[i].label,
										contactId: result
									});
								}
							}

							if (EmailListAdd.length > 0)
								this.addEmailList(EmailListAdd);
							resolve(true);
							this.tableKey++;
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async disableOrganizations(orgs) {
					orgs.forEach((organizationId, i, a) => {
						customAjaxRequest(apiEndpoints.Organization.DeactivateOrganizationById, 'DELETE', { organizationId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadCountryRegions(countryId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllRegionsByCountryId, 'get', { countryId }).then(result => {
						this.regions = this.convertToSelectList(result);
					});
				},
				async loadCountryCities(countryId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllCitiesByCountryId, 'get', { countryId }).then(result => {
						this.cities = this.convertToSelectList(result);
					})
				},
				async loadRegionCities(regionId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllCitiesByRegionId, 'get', { regionId }).then(result => {
						this.cities = this.convertToSelectList(result);
					});
				},
				async loadStatesByStage(stageId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationHelper.GetOrganizationStatesByStage, 'GET', { stageId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					})
				},
				async loadAllStates() {
					customAjaxRequest(apiEndpoints.OrganizationHelper.GetAllOrganizationStates, 'get').then(result => {
						this.states = this.convertToSelectList(result);
					});
				},
				async loadAddresses(organizationId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressesByOrganizationId, 'GET', { organizationId }).then(result => {
							this.orgAddresses = result.map(e => {
								const newObj = {
									id: e.id,
									organizationId: e.organizationId,
									country: e.city.crmCountry.name,
									region: e.rigion ? e.rigion.name : 'n/a',
									city: e.city.name,
									street: e.street,
									zip: e.zip
								}
								return newObj;
							})
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async loadAddress(addressId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressById, 'GET', { addressId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async loadRevenues(organizationId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationRevenue.GetOrganizationRevenues, 'GET', { organizationId }).then(result => {
							this.orgRevenues = result;
							this.orgRevenues.forEach(revenue => {
								revenue.year = moment(revenue.year).format("YYYY");
							});
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async loadRevenue(revenueId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationRevenue.GetRevenueById, 'GET', { revenueId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async updateRevenue() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationRevenue.UpdateOrganizationRevenue, 'POST', this.revenue).then(() => {
							const index = this.orgRevenues.findIndex(obj => obj.id === this.revenue.id);
							this.orgRevenues.splice(index, 1);
							this.appendRevenueToListing(this.revenue.id).then(() => {
								this.waitRevenueButton = false;
							});
							resolve(true);
							this.tableKey++;
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async updateAddress() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.UpdateOrganizationAddress, 'POST', this.address).then(() => {
							const index = this.orgAddresses.findIndex(obj => obj.id === this.address.id);
							this.orgAddresses.splice(index, 1);
							this.appendAddressToListing(this.address.id).then(() => {
								this.waitAddressButton = false;
							});
							resolve(true);
							this.tableKey++;
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				updateOrgState(organizationId) {
					this.selectedOrg = organizationId;
					this.loadOrganization(organizationId).then(org => {
						this.orgValues = org;
						this.loadAllStates();
						this.modalStateKey++;
						$(`#${this.modalUpdateState.id}`).modal("show");
					});
				},
				async updateOrganizationState() {
					this.waitStatusAddButton = true;
					const values = {
						organizationId: this.orgValues.id,
						stateId: this.orgValues.stateId
					}
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.UpdateOrganizationState, 'POST', values).then(() => {
							this.tableKey++;
							this.waitStatusAddButton = false;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							this.waitStatusAddButton = false;
							reject(false);
						});
					});
				},
				async appendAddressToListing(addressId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressById, 'GET', { addressId }).then(result => {
							this.orgAddresses.push({
								id: result.id,
								organizationId: result.organizationId,
								country: result.city.crmCountry.name,
								region: result.rigion ? result.rigion.name : 'n/a',
								city: result.city.name,
								street: result.street,
								zip: result.zip
							});
							resolve(true);
						}).then(e => {
							reject(e);
						});
					});
				},
				async appendRevenueToListing(revenueId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationRevenue.GetRevenueById, 'GET', { revenueId }).then(result => {
							result.year = moment(result.year).format("YYYY");
							this.orgRevenues.push(result);
							resolve(true);
						}).then(e => {
							reject(e);
						});
					});
				},
				deleteOrganizations(orgs) {
					orgs.forEach((organizationId, i, a) => {
						customAjaxRequest(apiEndpoints.Organization.DeleteOrganizationPermanentlyById, 'DELETE', { organizationId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				activateOrganizations(orgs) {
					orgs.forEach((organizationId, i, a) => {
						customAjaxRequest(apiEndpoints.Organization.ActivateOrganizationById, 'POST', { organizationId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
                addOrganizationByStage(prop) {
                    this.resetOrgModalValues();
                    this.editableOrgModal = false;
					this.addByStage = true;
					this.loadStatesByStage(prop).then(result => {
						this.states = this.convertToSelectList(result);
					});
					this.orgValues.stageId = prop;
					this.modalOrgKey++;
                    $(`#${this.modalOrgProps.id}`).modal("show");
                },
				initializeMergeModal() {
					this.mergeOrgModal.mergeSelectOrg = [];
					this.mergeOrgModal.mergeSelectLeads = [];
					this.mergeOrgModal.mergeSelectAddress = [];
					this.mergeOrgModal.mergeSelectContacts = [];
					this.mergeOrgModal.mergeSourceLeads = [];
					this.mergeOrgModal.mergeSourceAddresses = [];
					this.mergeOrgModal.mergeSourceContacts = [];
					this.mergeOrgModal.mergeTargetOrganization = null;
					this.mergeOrgModal.mergeRemainingOrgs = [];
					this.mergeOrgModal.mergeSelectSourceLeads = [];
					this.mergeOrgModal.mergeSelectSourceContacts = [];
					this.mergeOrgModal.mergeSelectSourceAddresses = [];
					this.mergeOrgModal.mergeMapper = [];
					this.mergeOrgModal.mergeTargetAction = 'delete';
				},
				async mergeOrgsPost() {

					const objToSentToApi = {
						TargetOrganization: this.mergeOrgModal.mergeTargetOrganization,
						SourceLeads: this.mergeOrgModal.mergeSourceLeads,
						SourceContacts: this.mergeOrgModal.mergeSourceContacts,
						SourceAddress: this.mergeOrgModal.mergeSourceAddress,
						RemainingOrgs: this.mergeOrgModal.mergeRemainingOrgs,
						TargetAction: this.mergeOrgModal.mergeTargetAction
					};

					customAjaxRequest(apiEndpoints.Organization.MergeOrganizations, 'POST', JSON.stringify(objToSentToApi), true).then(() => {
						this.initializeMergeModal();
						this.tableKey++;
					});
				},
				async importOrgsPost() {
					let properties = [];
					sourceImportProperties = this.importOrgModal.sourceImportProperties;
					sourceImportProperties.forEach(id => { if (id) properties.push(this.importOrgModal.importProperties.find(x => x.id === id).name) });

					let parameters = [];
					let delim = null;
					sourceImportParameter = this.importOrgModal.sourceImportParameter;
					sourceImportParameter.forEach(id => { if (id) parameters.push(this.importOrgModal.importProperties.find(x => x.id === id).name) });
					if (this.importOrgModal.fileExtension === '.csv') {
						this.importOrgModal.sourceImportDelimiter = this.importOrgModal.importDelimiter.find(x => x.id === this.importOrgModal.sourceImportDelimiter).name;
						this.importOrgModal.sourceImportEncoding = this.importOrgModal.importEncoding.find(x => x.id === this.importOrgModal.sourceImportEncoding).name;
						switch (this.importOrgModal.sourceImportDelimiter) {
							case 'Comma':
								delim = ',';
								break;
							case 'Semicolon':
								delim = ';';
								break;
							case 'Tabulation':
								delim = '	';
								break;
							default:
						}
					}
					const objToSendToAPI = {
						ImportFile: this.importOrgModal.file,
						Delimiter: delim,
						Action: this.importOrgModal.sourceImportAction,
						Encoding: this.importOrgModal.sourceImportEncoding,
						Parameters: parameters,
						Properties: properties,
						Type: 'Organization'
					};

					let form_data = new FormData();
					for (let key in objToSendToAPI) {
						form_data.append(key, objToSendToAPI[key]);
					}
					return new Promise((resolve, reject) => {
						$.ajax({
							url: apiEndpoints.Organization.ImportOrganizations,
							data: form_data,
							processData: false,
							contentType: false,
							type: "POST",
							success: (data) => {
								resolve(data);
								this.tableKey++;
							},
							error: (e) => {
								toast.notifyErrorList(e);
								reject(e);
							}
						});
					});
				},
				updateOrgStage(orgId) {
					this.loadOrganization(orgId).then(result => {
						this.orgValues = result;
						this.editOrgId = orgId;
						this.displayStates = 'hide-field';
						this.refreshInputs++;
						this.modalTypeKey++;
						$(`#${this.modalUpdateStage.id}`).modal("show");
					});
				},
				updateOrganizationStage() {
					const values = {
						organizationId: this.orgValues.id,
						stageId: this.orgValues.stageId,
						stateId: this.orgValues.stateId
					}
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.UpdateOrganizationStage, 'POST',  values ).then(() => {
							resolve(true);
							this.tableKey++;
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				addContacts(orgId) {
					this.newOrgId = orgId;
					this.resetContactValues();
					this.newContactValues.organizationId = orgId;
					this.modalContactKey++;
					$(`#${this.modalContactProps.id}`).modal("show");
				},
				addAddresses(orgId) {
					this.loadAddresses(orgId).then(() => {
						this.resetOrgAddressValues();
						this.regions = [];
						this.cities = [];
						this.orgAddress.organizationId = orgId;
						this.refreshInputs++;
						this.modalAddressKey++;
						$(`#${this.modalAddressProps.id}`).modal("show");
					});
				},
				addRevenue(orgId) {
					this.loadRevenues(orgId).then(() => {
						this.resetOrgRevenueValues();
						this.orgRevenue.organizationId = orgId;
						this.refreshInputs++;
						this.modalRevenueKey++;
						$(`#${this.modalRevenueProps.id}`).modal("show");
					});
				},
				deleteOrganizationAddress(addressId) {
					this.orgAddresses = this.orgAddresses.filter(a => a.id != addressId);
					customAjaxRequest(apiEndpoints.OrganizationAddress.DeleteOrganizationAddress, 'DELETE', { addressId });
				},
				updateOrganizationAddress() {
					customAjaxRequest(apiEndpoints.OrganizationAddress.UpdateOrganizationAddress, 'POST', this.orgAddress);
				},

				resetModalValues() {
					this.modalValues = {
						name: null
					}
				},
				resetImportModalValues() {
					this.importOrgModal.importParameter = [];
					this.importOrgModal.sourceImportProperties = [];
					this.importOrgModal.importHideSelects = true;
					this.importOrgModal.fileExtension = '';
					this.importOrgModal.sourceImportDelimiter = null;
					this.importOrgModal.sourceImportEncoding = null;
					this.importOrgModal.sourceImportAction = null;
					this.importOrgModal.sourceImportParameter = [];
					this.importOrgModal.file = null;
					this.importOrgModal.action = true;
					this.importOrgModal.checkExtension = false;
					this.importOrgModal.checkState = true;
					this.modalImportKey++;
				},
				resetOrgModalValues() {
					this.orgValues = {
						name: null,
						ResponsibleForPhoneNumber: null,
						clientType: 0,
						bank: null,
						email: null,
						phone: '',
						dialCode: '373',
						webSite: null,
						fiscalCode: null,
						iBANCode: null,
						industryId: null,
						employeeId: null,
						description: null,
						vitCode: null,
						codSwift: null,
						dateOfFounding: null,
						isDeleted: false,
						stageId: null,
						stateId: null
					}
					this.emailList = [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					];
					this.hideEmailInputs = ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'];
					this.editOrgId = '';
					this.refreshInputs++;
				},
				resetOrgAddressValues() {
					this.orgAddress = {
						countryId: null,
						organizationId: null,
						regionId: null,
						cityId: null,
						street: null,
						zip: null
					}
					this.editOrgId = '';
					this.refreshInputs++;
				},
				resetEditAddressValues() {
					this.address = {
						countryId: null,
						organizationId: null,
						regionId: null,
						cityId: null,
						street: null,
						zip: null
					}
					this.refreshInputs++;
				},
				resetOrgRevenueValues() {
					this.orgRevenue = {
						organizationId: null,
						year: null,
						currencyCode: null,
						amount: null
					}
					this.editOrgId = '';
					this.refreshInputs++;
				},
				resetEditRevenueValues() {
					this.revenue = {
						organizationId: null,
						year: null,
						currencyCode: null,
						amount: null
					}
				},
				resetEmail(index) {
					this.emailList[index] = {
						email: '',
						label: ''
					};
					this.emailList.push({
						email: '',
						label: ''
					});
					this.emailList.pop();
				},
				resetContactEmail(index) {
					this.contactEmailList[index] = {
						email: '',
						label: ''
					};
					this.contactEmailList.push({
						email: '',
						label: ''
					});
					this.contactEmailList.pop();
				},
				resetContactValues() {
					this.newContactValues = {
						organizationId: '',
						email: '',
						phone: '',
						requiredPhone: true,
						phoneList: [],
						firstName: '',
						lastName: '',
						description: '',
						notAvailable: false
					},
					this.phoneList = [
							{
								phone: '',
								countryCode: 'MD',
								dialCode: '373',
								label: '',
								contactId: ''
							},
							{
								phone: '',
								countryCode: 'MD',
								dialCode: '373',
								label: '',
								contactId: ''
							},
							{
								phone: '',
								countryCode: 'MD',
								dialCode: '373',
								label: '',
								contactId: ''
							}
						];
					this.contactEmailList = [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					];
					this.contactHideEmailInputs = ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'];
					this.hidePhoneInputs = ['', 'hide-field', 'hide-field'];
					this.hideInput = {
						class: '',
						checked: false,
					};
					this.hidePhoneInputs = ['', 'hide-field', 'hide-field'];
					this.currentHiddenEmailIndex = 1;
					this.currentHiddenPhoneIndex = 1;
				},
				editOrganization(orgId) {
					this.loadOrganization(orgId).then(result => {
						this.editableOrgModal = true;
						this.orgValues = result;
						if (result.addresses[0]) {
							this.orgAddress = {
								id: result.addresses[0].id,
								organizationId: result.id,
								countryId: result.addresses[0].city.crmCountryId,
								regionId: result.addresses[0].regionId,
								cityId: result.addresses[0].cityId,
								street: result.addresses[0].street,
								zip: result.addresses[0].zip
							}
							this.loadCountryRegions(result.addresses[0].city.crmCountryId);
							this.loadCountryCities(result.addresses[0].city.crmCountryId);
							if (result.addresses[0].regionId != null) this.loadRegionCities(result.addresses[0].regionId);
						}
						else {
							this.addOrgAddr = true;
							this.orgAddress = {
								organizationId: result.id,
								countryId: null,
								regionId: null,
								cityId: null,
								street: '',
								zip: ''
							};
						};
						if (this.orgValues.dateOfFounding) {
							this.orgValues.dateOfFounding = moment(this.orgValues.dateOfFounding).format("YYYY");
						}
						this.hideEmailInputs = [];
						this.emailList = result.emailList.length > 0 ? result.emailList : [];
						for (i = 0; i < this.emailList.length; i++) {
							this.hideEmailInputs.push('');
						}
						for (i = this.emailList.length; i < 5; i++) {
							this.hideEmailInputs.push('hide-field');
							this.emailList.push(
								{
									email: '',
									label: '',
								}
							);
						}
						this.hideEmailInputs[0] = '';
						this.orgValues.iBANCode = result.ibanCode;
						this.loadStatesByStage(this.orgValues.stageId).then(result => {
							this.states = this.convertToSelectList(result);
						});
						this.editOrgId = orgId;
						this.refreshInputs++;
						this.modalOrgKey++;
						$(`#${this.modalOrgProps.id}`).modal("show");
					});
				},
				editOrganizationRevenue(revenueId) {
					this.loadRevenue(revenueId).then(result => {
						this.revenue = result;
						this.revenue.year = moment(this.revenue.year).format("YYYY");
						this.modalEditRevenueKey++;
						$(`#${this.editRevenueProps.id}`).modal("show");

					});
				},
				editOrganizationAddress(addressId) {
					this.loadAddress(addressId).then(result => {
						this.address = {
							id: result.id,
							organizationId: result.organizationId,
							countryId: result.city.crmCountry.id,
							regionId: result.regionId,
							cityId: result.cityId,
							street: result.street,
							zip: result.zip
						}
						this.loadCountryRegions(this.address.countryId);
						this.loadCountryCities(this.address.countryId);
						this.modalEditAddressKey++;
						$(`#${this.editAddressProps.id}`).modal("show");

					});
				},
				emitIndustryValue(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.modalValues[val.id.replace('entity-', '')] = newVal;
				},
				emitValueStateChange(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.orgValues[val.id] = newVal;
				},
				emitValueOrg(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					if (val.id.includes('addressC')) {
						this.orgAddress[val.id.replace('addressC-', '')] = newVal;
						if (val.id === 'addressC-countryId') {
							this.loadCountryRegions(val.value);
							this.loadCountryCities(val.value);
						}
						if (val.id === 'addressC-regionId') {
							this.cities = [];
							this.loadRegionCities(val.value);
						}
					} else {
						this.orgValues[val.id.replace('company-', '')] = newVal;
					}
					if (val.id.includes('HideEmailInput')) {
						let index = val.id[14] - '0';
						if (val.value == '') this.hideEmailInputs[index] = val.value;
						else {
							this.hideEmailInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.emailList[index - 1].id) {
									this.deleteEmail(this.emailList[index - 1].id);
								}
								this.resetEmail(index - 1);
							}
						}
						this.hideEmailInputs.push(val.value);
						this.hideEmailInputs.pop();
					}
					if (val.id.includes('org-email')) {
						let index = val.id[9] - '0';
						this.emailList[index - 1].email = val.value;
					}
					if (val.id.includes('org_EmailLabel')) {
						let index = val.id[14] - '0';
						this.emailList[index - 1].label = val.value;
					};
					if (val.id === 'company-stageId') {
						this.states = [];
						this.loadStatesByStage(val.value).then(result => {
							this.states = this.convertToSelectList(result);
						});
					}
					if (val.id === 'org-phone') {
						this.orgValues.phone = val.value.number;
						this.orgValues.dialCode = val.value.dialCode;
					}
				},
				emitValueStageChange(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.orgValues[val.id.replace('stageUpdate-', '')] = newVal;
					if (val.id == 'stageUpdate-stageId') {
						this.loadStatesByStage(val.value).then(result => {
							this.states = this.convertToSelectList(result);
							this.orgValues.stateId = null;
							this.displayStates = 'hide-field';
							if (this.states.length == 1) {
								this.orgValues.stateId = this.states[0].value;
							}
							else if (this.states.length > 1) {
								this.displayStates = '';
							}
						});
					}
				},
				emitValueAddress(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.orgAddress[val.id.replace('address-', '')] = newVal;
					if (val.id === 'address-countryId') {
						this.loadCountryRegions(val.value);
						this.cities = [];
						this.loadCountryCities(val.value);
					}
					if (val.id === 'address-regionId') {
						this.cities = [];
						this.loadRegionCities(val.value);
					}
				},
				emitValueAddressEdit(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.address[val.id.replace('editAddress-', '')] = newVal;
					if (val.id === 'editAddress-countryId') {
						this.loadCountryRegions(val.value);
						this.cities = [];
						this.loadCountryCities(val.value);
					}
					if (val.id === 'editAddress-regionId') {
						this.cities = [];
						this.loadRegionCities(val.value);
					}
				},
				emitValueRevenue(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.orgRevenue[val.id.replace('revenue-', '')] = newVal;
				},
				emitValueRevenueEdit(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.revenue[val.id.replace('editRevenue-', '')] = newVal;
				},
				resetValue(val) {
    				if (val === 'company-Addresses') {
    						this.resetOrgAddressValues();
    					};
					if (val === 'company-Revenues') {
						this.resetOrgRevenueValues();
					}
				},
				resetPhone(index) {
					this.phoneList[index] = {
						phone: '',
						countryCode: 'MD',
						dialCode: '373',
						label: '',
						contactId: ''
					};

					this.phoneList.push({
						phone: '',
						countryCode: 'MD',
						dialCode: '373',
						label: '',
						contactId: ''
					});
					this.phoneList.pop;
				},
				emitNewPhone(val) {
					this.newContactValues.phone = '';
					this.newContactValues.requiredPhone = false;
					this.newContactValues.phoneList.push(val);
				},
				emitValueContact(val) {
					if (val.id.includes('HideEmailInputContact')) {
						let index = val.id[21] - '0';
						if (val.value == '') this.contactHideEmailInputs[index] = val.value;
						else {
							this.contactHideEmailInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.contactEmailList[index - 1].id) {
									this.deleteEmail(this.contactEmailList[index - 1].id);
								}
								this.resetContactEmail(index - 1);
							}
						}
						this.contactHideEmailInputs.push(val.value);
						this.contactHideEmailInputs.pop();
					}
					if (val.id.includes('contact-email')) {
						let index = val.id[13] - '0';
						this.contactEmailList[index - 1].email = val.value;
					}
					if (val.id.includes('contact_EmailLabel')) {
						let index = val.id[18] - '0';
						this.contactEmailList[index - 1].label = val.value;
					}

					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.newContactValues[val.id.replace('contact-', '')] = newVal;

					if (val.id.includes('contact-Phone')) {
						let length = val.id.length;
						let index = (val.id[length - 1] - '0') - 1;
						this.phoneList[index].phone = val.value.number;
						this.phoneList[index].countryCode = val.value.countryCode;
						this.phoneList[index].dialCode = val.value.dialCode;
					}
					if (val.id.includes('contact_PhoneLabel')) {
						let length = val.id.length;
						let index = (val.id[length - 1] - '0') - 1;
						this.phoneList[index].label = val.value;
					}

					if (val.id.includes('HideInput')) {
						let index = val.id[9] - '0';
						if (val.value == '') this.hidePhoneInputs[index] = val.value;
						else {
							this.hidePhoneInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.phoneList[index - 1].id) {
									this.deletePhone(this.phonelist[index - 1].id);
								}
								this.resetPhone(index - 1);
							}
						}
						this.hidePhoneInputs.push(val.value);
						this.hidePhoneInputs.pop();
					}
					if (val.id == 'N/ALabel') {
						this.hideInput = val.value;
						this.newContactValues.notAvailable = val.value.checked;
						if (this.phoneList[0].id) {
							this.deletePhone(this.phoneList[0].id);
						}
						this.resetPhone(0);

					}
				},
				importItem(val) {
					if (val) {
						switch (val.id) {
							case 'import-Properties':
								this.importOrgModal.sourceImportProperties = val.value;
								let parameters = [];
								val.value.forEach(id => { if (id) parameters.push(this.importOrgModal.importProperties.find(x => x.id === id)) });

								this.importOrgModal.importParameter = parameters;
								break;
							case 'import-fileType':
								if (val.value === 'CSV') {
									this.importOrgModal.importHideSelects = false;
									this.importOrgModal.fileExtension = '.csv';
									if (this.importOrgModal.file != null) {
										if (this.importOrgModal.file.name.includes('.xls')) {
											this.importOrgModal.checkExtension = true;
											this.importOrgModal.checkState = false;
										}
										else {
											this.importOrgModal.checkExtension = false;
											this.importOrgModal.checkState = true;
										}
									}

								} else {
									this.importOrgModal.importHideSelects = true;
									this.importOrgModal.fileExtension = '.xls;*.xlsx';
									if (this.importOrgModal.file != null) {
										if (this.importOrgModal.file.name.includes('.csv')) {
											this.importOrgModal.checkExtension = true;
											this.importOrgModal.checkState = false;
										}
										else {
											this.importOrgModal.checkExtension = false;
											this.importOrgModal.checkState = true;
										}
									}
								}
								break;
							case 'import-Delimiter':
								this.importOrgModal.sourceImportDelimiter = val.value;
								break;
							case 'import-Encoding':
								this.importOrgModal.sourceImportEncoding = val.value;
								break;
							case 'import-Action':
								if (val.value.length > 0) this.importOrgModal.action = false;
								else this.importOrgModal.action = true;
								this.importOrgModal.sourceImportAction = val.value;
								break;
							case 'import-MachingParameter':
								this.importOrgModal.sourceImportParameter = val.value;
								break;
							default:
								if (val.name.includes(this.importOrgModal.fileExtension)) {
									this.importOrgModal.checkExtension = false;
									this.importOrgModal.checkState = true;
								}
								this.importOrgModal.file = val;
						}
					} else {
						this.importOrgModal.file = null;
						this.importOrgModal.checkExtension = false;
						this.importOrgModal.checkState = true;
					}

				},
				selectItem(val) {
					if (val.id === 'merge-SelectedOrganizations') {
						this.selectAllSourceFields(val.value);
						return;
					}
					if (val.id === 'merge-targetActionId') {
						this.mergeOrgModal.mergeTargetAction = val.value;
						return;
					}
					if (val.id === 'merge-ContactsId') {
						this.mergeOrgModal.mergeSourceContacts = val.value;
						return;
					}
					if (val.id === 'merge-LeadsId') {
						this.mergeOrgModal.mergeSourceLeads = val.value;
						return;
					}
					if (val.id === 'merge-AddressesId') {
						this.mergeOrgModal.mergeSourceAddresses = val.value;
						return;
					}
				},
				selectAllSourceFields(orgId) {
					this.mergeOrgModal.mergeTargetOrganization = orgId;
					this.mergeOrgModal.mergeSourceLeads = [];
					this.mergeOrgModal.mergeSourceContacts = [];
					this.mergeOrgModal.mergeSourceAddresses = [];
					const selectedOrg = this.mergeOrgModal.mergeMapper.find(e => e.orgId === orgId);
					if (selectedOrg != null) {
						if (this.mergeOrgModal.mergeSelectContacts != null)
							this.mergeOrgModal.mergeSelectSourceContacts = this.mergeOrgModal.mergeSelectContacts.filter(item => item.organizationId != orgId);
						if (this.mergeOrgModal.mergeSelectLeads != null)
							this.mergeOrgModal.mergeSelectSourceLeads = this.mergeOrgModal.mergeSelectLeads.filter(item => item.organizationId != orgId);
						if (this.mergeOrgModal.mergeSelectAddress != null)
							this.mergeOrgModal.mergeSelectSourceAddresses = this.mergeOrgModal.mergeSelectAddress.filter(item => item.organizationId != orgId);
					}

					this.getRemainingOrgs(orgId);
				},
				getRemainingOrgs(selectedOrgId) {
					const remainginOrs = [];
					this.mergeOrgModal.mergeSelectOrg.forEach((org, i, a) => {
						if (org.id != selectedOrgId) {
							remainginOrs.push(org.id);
						}
					});
					this.mergeOrgModal.mergeRemainingOrgs = remainginOrs;
				},
				convertPhoneToSelectList(array) {
					if (array) {
						return array.map(e => {
							const newObj = {
								label: e.value,
								value: e.value,
								disabled: true,
							}
							return newObj;
						});
					} else return [];
				},
				convertToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				convertCurrenciesToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: `${e.name}(${e.symbol})`,
							value: e.code
						}
						return newObj;
					});
				},
				convertContactsToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.firstName,
							value: e.id
						}
						return newObj;
					});
				},
				convertEmployeeToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.interval,
							value: e.id
						}
						return newObj;
					});
				},
				convertHelperToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.text,
							value: e.value
						}
						return newObj;
					});
				},
				mergeOrganizations(orgToBeMerged) {
					this.initializeMergeModal();
					orgToBeMerged.forEach((organizationId, i, a) => {
						let promises = [customAjaxRequest(apiEndpoints.Leads.GetLeadsByOrganizationId, 'GET', { organizationId }),
						customAjaxRequest(apiEndpoints.Organization.GetOrganizationById, 'GET', { organizationId }),
						customAjaxRequest(apiEndpoints.Contact.GetContactByOrganizationId, 'GET', { organizationId }),
						customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressesByOrganizationId, 'GET', { organizationId })
						];
						Promise.all(promises).then(result => {
							if (result[0] != null) this.mergeOrgModal.mergeSelectLeads.push(...result[0]);
							if (result[1] != null) {
								{
									result[1].name += ' : ' + result[0].length + ' ' + 'leads';
									this.mergeOrgModal.mergeSelectOrg.push(result[1]);
								}
							}
							if (result[2] != null) this.mergeOrgModal.mergeSelectContacts.push(...result[2]);
							if (result[3] != null) this.mergeOrgModal.mergeSelectAddress.push(result[3]);
							const leadId = result[0].map(e => { return e.id });
							const contactId = result[2].map(e => { return e.id });
							const addressId = result[3].map(e => { return e.id });
							this.mergeOrgModal.mergeMapper.push({
								orgId: result[1].id,
								leadId,
								contactId,
								addressId
							});

							if (i === a.length - 1) {
								this.mergeOrgModal.mergeSelectSourceLeads = this.mergeOrgModal.mergeSelectLeads;
								this.mergeOrgModal.mergeSelectSourceContacts = this.mergeOrgModal.mergeSelectContacts;
								this.mergeOrgModal.mergeSelectSourceAddresses = this.mergeOrgModal.mergeSelectAddress;
								$(`#${this.modalMergeOrg.id}`).modal("show");
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				action(action) {
					var orgName = this.$store.state.allOrganizations.find(l => l.id == action.value[0]).name.split(' ').join('_');
					switch (action.key) {
						case 'deactivate': {
							this.disableOrganizations(action.value);
							break;
						} case 'activate': {
							this.activateOrganizations(action.value);
							break;
						} case 'edit': {
							this.editOrganization(action.value[0]);
							break;
						} case 'delete': {
							this.deleteOrganizations(action.value);
							break;
						} case 'updateStage': {
							this.updateOrgStage(action.value[0]);
							break;
						}	case 'updateState': {
							this.updateOrgState(action.value[0]);
							break;
						} case 'addContacts': {
							this.addContacts(action.value[0]);
							break;
						}
						case 'addAddresses': {
							this.addAddresses(action.value[0]);
							break;
						} case 'details': {
							window.location.href = '/organizations/details?organization=' + orgName + '&id=' + action.value[0];
							break;
						} case 'merge': {
							this.mergeOrganizations(action.value);
							break;
						} case 'addRevenue': {
							this.addRevenue(action.value[0]);
							break;
						}
					}
				},
				findObjectByPropValue(array, value, prop) {
					return array.find(x => x[prop] === value);
				},
				getCountryName(countryId) {
					return this.findObjectByPropValue(this.countries, countryId, 'value').label;
				},
				getRegionName(regionId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetRegionById, 'get', { regionId }).then(result => {
						let regionName = result.name;
						return regionName;
					});
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				},
				openWarningWindow() {
					alert('Organization should have at least one active contact');
				},
				filterResult(val) {
					this.pageRequestFilters = [];
					val.forEach(f => {
						f.values.forEach(v => {
							if (v.active) {
								this.pageRequestFilters.push({
									Propriety: f.id,
									Value: v.value
								});
							}
						});
					});
					this.tableKey++;
				}
			}
		});
		Vue.component('OrgTable', {
			template: '#org-table-template',
			data() {
				return {
					apiUrl: apiEndpoints.CrmCommon.GetAllOrganizationForTable,
					httpMethod: 'post',
					tableFields: [
						{
							name: 'state',
							title: 'State',
							visible: true,
						},
						{
							name: 'name',
							title: 'Name',
							sortField: 'name',
							visible: true
						},
						{
							name: 'stage',
							title: 'Stage',
							sortField: 'stage',
							visible: true
						},
						{
							name: 'leadCount',
							title: 'Leads',
							sortField: 'leadCount',
							visible: true
						},
						{
							name: 'email',
							title: 'Email',
							visible: true
						},
						{
							name: 'contacts',
							title: 'Contacts',
							visible: true,
							dataClass: 'td-users'
						},
						{
							name: 'created',
							title: 'Created',
							sortField: 'created',
							visible: true
						},
						{
							name: 'author',
							title: 'Author',
							visible: true,
							dataClass: 'td-users'
						},
						{
							name: 'isDeleted',
							title: 'Status',
							visible: true
						}
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'name',
								sortField: 'name',
								direction: 'asc'
							}
						]
					},
					pageChange: 0,
				}
			},
			mounted() {
				 window.addEventListener('popstate', (event) => {
					 this.pageChange++;
				});
			},
			props: {
				tableActions: Object,
				tableKey: Number,
				customQueryParams: Object,
				searchString: {
					type: String,
					default: ''
				},
				listView: Boolean
			},
			methods: {
				initials(name, surname) {
					return name && surname ? `${name.charAt(0)} ${surname.charAt(0)}` : name ? `${name.charAt(0)} ${ name.charAt(1)}` : 'UP';
				},
				action(action) {
					this.$emit('action', action);
				}
			}
		});
		Vue.component('OrganizationsGrid', {
            template: '#org-grid-template',
			data() {
				return {
					dragOptions: {
						dropzoneSelector: 'ul',
						newPipeLine: null,
						draggableSelector: 'li',
						handlerSelector: null,
						reactivityEnabled: true,
						multipleDropzonesItemsDraggingEnabled: true,
						showDropzoneAreas: true,
						onDrop: function (event) {
						},
						onDragstart: function (event) { },
						onDragenter: function (event) { },
						onDragover: function (event) { },
						onDragend: async function (event) {
							const stageId = $(event.droptarget).data('stage-id');
							const organizationId = $(event.items[0]).data('organization-id');
							customAjaxRequest(apiEndpoints.Organization.UpdateOrganizationStage, 'post', { organizationId, stageId }).then().catch(e => {
								event.stop();
								toast.notifyErrorList(e);
							})
						}
					},
				}
			},
			props: {
				pipelineId: String,
				actions: Object,
				listView: Boolean,
			},
			updated() {
				feather.replace();
			},
			created() {
				this.$store.dispatch('getAllOrganizations');
			},
			computed: {
				dataLoaded() {
					return Boolean(this.$store.state.allOrganizations.length);
				},
				organizationsStagesListSelect() {
					return this.$store.state.allOrganizationStages;
				},
				organizations() {
					return this.$store.state.allOrganizations
				},
				allOrganizations() {
					return this.$store.getters.allOrganizationsGroupedByStageId;
				}
			},
			methods: {
				findObjectByPropValue(array, value, prop) {
					return utils.findObjectByPropValue(array, value, prop);
				},
				addOrganizationByStage(prop) {
					this.$emit('addOrganizationByStage', prop);
				},
				actionEmit(key, id) {
					this.$emit('action', { key, value: [id] });
				}
			}
		});
	</script>
}
