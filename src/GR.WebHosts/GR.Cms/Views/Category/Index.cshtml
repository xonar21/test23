@{
	ViewData["Title"] = "Product categories";
}

<MetadataPage />

@section Scripts
{
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components//form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script>
		Vue.component('MetadataPage', {
			template: `
					<div>
						<PageOptionsBar :searcheable="true" :pageOptionsComponents="pageOptionsComponents" @@searchInput="searchTable"/>
						<div>
							<Table
								v-if="dataLoad"
								:fields="tableFields"
								:apiUrl="apiUrl"
								:httpMethod="httpMethod"
								@@triggeredMenuAction="action"
								tableId="workCategories-table"
								:customQueryparams="customQueryparams"
								:changeUrl="true"
								:controller="'category'"
								:pageChange="pageChange"
								:hasCustomQUeryparams="true"
								:initialPageSize="20"
								:reload="tableKey"
								:sortOrder="tableConfig.sortCol"
								dataPath="result.result"
								:actionsSingle="tableActions.single"
								:actionsSingleDisabled="tableActions.singleDisabled"
								:actionsMultiple="tableActions.multiple"
								:actionsMultipleDisabled="tableActions.multipleDisabled"
								:haveContextMenu="true"
							>
							</Table>
						</div>
						<Modal :refreshInputs="refreshInputs" :modalProps="modalProps" @@newValue="emitModalValue" :inputsKey="modalKey"/>
					</div>`
			,
			data() {
				return {
					modalKey: 0,
					apiUrl: apiEndpoints.Category.GetAllPaginatedCategory,
					httpMethod: 'post',
					dataLoad: false,
					modalValues: {},
					categoryListSelect: {},
					pageOptionsComponents: [
						{
							name: 'Button',
							props: {
								label: 'Add Category',
								btnType: 'success',
								className: 'ml-auto',
								onClick: () => {
									this.editableModal = false;
									this.resetModalValues();
									this.modalKey++;
									$(`#${this.modalProps.id}`).modal("show");
								}
							}
						}
					],
					pageChange: 0,
					tableActions: {
						single: {
							"edit": { name: t('edit'), icon: "edit" },
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						singleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						},
						multiple: {
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						multipleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						}
					},
					tableKey: 0,
					waitAddButton: false,
					editableModal: false,
					refreshInputs: 0,
					searchString: '',
					tableFields: [
						{
							name: 'name',
							title: t('name'),
							visible: true,
							sortField: 'name'
						},
						{
							name: 'displayName',
							title: 'Display Name',
							visible: true
						},
						{
							name: 'displayOrder',
							title: 'Display Order',
							visible: true,
							sortField: 'displayOrder'
						},
						{
							name: 'isPublished',
							title: 'IsPublished',
							visible: true,
							sortField: 'IsPublished'
						}
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'name',
								sortField: 'name',
								direction: 'asc'
							}
						]
					}
				}
			},
			computed: {
				customQueryparams() {
					return {
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				modalProps() {
					return {
						id: 'productModal',
						label: this.editableModal ? 'Edit category' : 'Add category',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'entity-name',
									type: 'text',
									label: t('name'),
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.name,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'entity-displayName',
									type: 'text',
									label: 'Display Name',
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.displayName,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'entity-displayOrder',
									type: 'number',
									label: 'Display Order',
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.displayOrder
								}
							},
							{
								name: 'Select',
								props: {
									id: 'entity-parentCategoryId',
									label: 'Category',
									required: false,
									searchable: true,
									options: this.categoryListSelect,
									value: this.modalValues.categoryId,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Is published:',
									className: 'col-3 ml-2'
								}
							},
							{
								name: 'Radio',
								props: {
									id: 'entity-isPublished',
									label: '',
									required: true,
									className: 'row ml-1',
									options: [{ value: true, label: 'Yes' }, { value: false, label: 'No' }],
									value: this.modalValues.isPublished,
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'entity-description',
									label: t('description'),
									className: 'col-12',
									required: true,
									value: this.modalValues.description,
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: '@Localizer["cancel"]',
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							if (!this.editableModal) {
								this.addNewEntity().then(() => {
									$(`#${this.modalProps.id}`).modal("hide");
								});
							} else {
								this.updateEntity().then(() => {
									$(`#${this.modalProps.id}`).modal("hide");
								});
							}
						}
					}
				},
			},
			created: async function () {
				customAjaxRequest(apiEndpoints.Category.GetAllCategories).then(result => {
					this.categoryListSelect = this.convertToSelectList(result);
				});
				this.resetModalValues();
				this.dataLoad = true;
			},
			methods: {
				async addNewEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Category.AddCategory, 'PUT', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async updateEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Category.UpdateCategory, 'POST', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async deactivateEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Category.DisableCategory, 'POST', { categoryId: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async activateEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Category.ActivateCategory, 'POST', { categoryId: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deleteEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Category.DeleteCategory, 'DELETE', { categoryId: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadEntity(entityId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Category.GetCategoryById, 'GET', { categoryId: entityId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				convertToSelectList(array) {
					if (array.length === 0) return [];
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				editEntity(entityId) {
					this.loadEntity(entityId).then(result => {
						this.editableModal = true;
						this.modalValues = result;
						this.modalKey++;
						this.refreshInputs++;
						$(`#${this.modalProps.id}`).modal("show");
					});
				},
				resetModalValues() {
					this.modalValues = {
						name: null,
						displayName: null,
						description: null,
						displayOrder: null,
						parentCategoryId: null,
						isPublished: null
					}
				},
				emitModalValue(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.modalValues[val.id.replace('entity-', '')] = newVal;
				},
				action(action) {
					switch (action.key) {
						case 'deactivate': {
							this.deactivateEntities(action.value);
							break;
						} case 'activate': {
							this.activateEntities(action.value);
							break;
						} case 'edit': {
							this.editEntity(action.value[0]);
							break;
						} case 'delete': {
							this.deleteEntities(action.value);
							break;
						}
					}
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			},
			mounted() {
				window.addEventListener('popstate', (event) => {
					this.pageChange++;
				});
			},
		});

	</script>
}
