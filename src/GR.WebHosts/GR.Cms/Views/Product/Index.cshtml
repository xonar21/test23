@inject IStringLocalizer Localizer
@{
	ViewData["Title"] = Localizer["system_commerce_products"];
}

<MetadataPage />

@section Scripts
{
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components//form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script>
		Vue.component('MetadataPage', {
			template: `
					<div>
						<PageOptionsBar :searcheable="true" :pageOptionsComponents="pageOptionsComponents" @@searchInput="searchTable"/>
						<div>
							<Table
								v-if="dataLoad"
								:fields="tableFields"
								:apiUrl="apiUrl"
								:httpMethod="httpMethod"
								@@triggeredMenuAction="action"
								tableId="workCategories-table"
								:customQueryparams="customQueryparams"
								:changeUrl="true"
								:controller="'Product'"
								:pageChange="pageChange"
								:hasCustomQUeryparams="true"
								:initialPageSize="20"
								:reload="tableKey"
								:sortOrder="tableConfig.sortCol"
								dataPath="result.result"
								:actionsSingle="tableActions.single"
								:actionsSingleDisabled="tableActions.singleDisabled"
								:actionsMultiple="tableActions.multiple"
								:actionsMultipleDisabled="tableActions.multipleDisabled"
								:haveContextMenu="true"
							>
							</Table>
						</div>
						<Modal :refreshInputs="refreshInputs" :modalProps="modalProps" @@newValue="emitModalValue" :inputsKey="modalKey"/>
					</div>`
			,
			data() {
				return {
					modalKey: 0,
					apiUrl: apiEndpoints.Product.GetAllPaginatedProduct,
					httpMethod: 'post',
					dataLoad: false,
					modalValues: {},
					categoryListSelect: [],
					productManufactoriesListSelect: [],
					pageChange: 0,
					pageOptionsComponents: [
						{
							name: 'Button',
							props: {
								label: 'Add product template',
								btnType: 'success',
								className: 'ml-auto',
								onClick: () => {
									this.editableModal = false;
									this.resetModalValues();
									this.modalKey++;
									$(`#${this.modalProps.id}`).modal("show");
								}
							}
						}
					],
					tableActions: {
						single: {
							"edit": { name: t('edit'), icon: "edit" },
							"deactivate": { name: "Deactivate", icon: "eye-off" },
							"details": { name: t('details'), icon: "details" }
						},
						singleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						},
						multiple: {
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						multipleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						}
					},
					tableKey: 0,
					waitAddButton: false,
					editableModal: false,
					refreshInputs: 0,
					searchString: '',
					tableFields: [
						{
							name: 'name',
							title: t('name'),
							visible: true,
							sortField: 'name'
						},
						{
							name: 'productCode',
							title: 'Product Code',
							sortField: 'productCode',
							visible: true
						},
						{
							name: 'categoryName',
							title: t('iso_category'),
							visible: true,
							sortField: 'categoryName'
						},
						{
							name: 'ean',
							title: 'EAN',
							visible: true,
							sortField: 'eAN'
						},
						{
							name: 'warranty',
							title: 'Warranty',
							visible: true,
							sortField: 'warranty'
						},
						{
							name: 'canBeSold',
							title: 'Can Be Sold',
							visible: true,
							sortField: 'canBeSold'
						},
						{
							name: 'sellingPrice',
							title: 'Selling Price',
							visible: true,
							sortField: 'sellingPrice'
						},
						{
							name: 'currencyCode',
							tile: t('iso_active_currency'),
							visible: true
						}
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'title',
								sortField: 'title',
								direction: 'asc'
							}
						]
					}
				}
			},
			computed: {
				CurrencyListSelect() {
					return this.$store.state.allCurrencies;
				},
				customQueryparams() {
					return {
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				modalProps() {
					return {
						id: 'productModal',
						label: this.editableModal ? 'Edit product template' : 'Add product template',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'entity-name',
									type: 'text',
									label: t('name'),
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.name,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'entity-productManufactoriesId',
									label: 'Manufacturies',
									required: true,
									searchable: true,
									options: this.productManufactoriesListSelect,
									value: this.modalValues.productManufactoriesId,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'entity-type',
									label: 'Product type',
									value: this.modalValues.type,
									required: true,
									options: [
										{
											label: 'Product',
											value: 0,
										},
										{
											label: 'Service',
											value: 1
										},
									],
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'entity-categoryId',
									label: t('iso_category'),
									required: true,
									searchable: true,
									options: this.categoryListSelect,
									value: this.modalValues.categoryId,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Can be sold:',
									className: 'col-3 ml-2'
								}
							},
							{
								name: 'Radio',
								props: {
									id: 'entity-canBeSold',
									label: '',
									required: true,
									className: 'row ml-1',
									options: [{ value: true, label: 'Yes' }, { value: false, label: 'No' }],
									value: this.modalValues.canBeSold,
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Input',
								props: {
									id: 'entity-eAN',
									type: 'text',
									label: 'EAN',
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.eAN,
									disabled: this.editableModal ? true : false
								}
							},
							{
								name: 'Input',
								props: {
									id: 'entity-warranty',
									type: 'text',
									label: 'Warranty',
									className: 'col-12 col-md-6',
									value: this.modalValues.warranty,
								}
							},
							{
								name: 'Input',
								props: {
									id: 'entity-sellingPrice',
									type: 'decimal',
									required: true,
									label: 'SellingPrice',
									className: 'col-12 col-md-6',
									value: this.modalValues.sellingPrice,
								}
							},
							{
								name: 'Select',
								props: {
									id: 'entity-currencyCode',
									label: t('iso_active_currency'),
									options: this.CurrencyListSelect,
									disabled:true,
									size: 10,
									searchable: true,
									className: 'col-12 col-md-6',
									value: this.editableModal ? this.modalValues.currencyCode : 'EUR'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'entity-description',
									label: t('description'),
									required: true,
									className: 'col-12',
									value: this.modalValues.description,
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label:  '@Localizer["cancel"]',
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							if (!this.editableModal) {
								this.addNewEntity().then(() => {
									$(`#${this.modalProps.id}`).modal("hide");
								});
							} else {
								this.updateEntity().then(() => {
									$(`#${this.modalProps.id}`).modal("hide");
								});
							}
						}
					}
				},
			},
			created: async function () {
				this.$store.dispatch('getAllCurrencies');
				customAjaxRequest(apiEndpoints.Category.GetAllCategories).then(result => {
					this.categoryListSelect = this.convertToSelectList(result);
				});
				customAjaxRequest(apiEndpoints.Manufactory.GetAllManufactories).then(result => {
					this.productManufactoriesListSelect = this.convertToSelectList(result);
				});
				this.resetModalValues();
				this.dataLoad = true;
			},
			methods: {
				async addNewEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Product.AddProduct, 'PUT', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async updateEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Product.UpdateProduct, 'POST', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async deactivateEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Product.DisableProduct, 'POST', { productId: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async activateEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Product.ActivateProduct, 'POST', { productId: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deleteEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Product.DeleteProduct, 'DELETE', { productId: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadEntity(entityId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Product.GetProductById, 'GET', { productId: entityId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				convertCurrenciesToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: `${e.name}(${e.symbol})`,
							value: e.code
						}
						return newObj;
					});
				},
				convertToSelectList(array) {
					if (array.length === 0) return [];
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				editEntity(entityId) {
					this.loadEntity(entityId).then(result => {
						this.editableModal = true;
						this.modalValues = result;
						this.modalValues.eAN = result.ean;
						this.modalKey++;
						this.refreshInputs++;
						$(`#${this.modalProps.id}`).modal("show");
					});
				},
				resetModalValues() {
					this.modalValues = {
						name: null,
						type: null,
						categoryId: null,
						description: null,
						eAN: null,
						warranty: null,
						canBeSold: null,
						productManufactoriesId: null,
						sellingPrice: null,
						currencyCode: null,
					}
				},
				emitModalValue(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.modalValues[val.id.replace('entity-', '')] = newVal;
				},
				action(action) {
					switch (action.key) {
						case 'deactivate': {
							this.deactivateEntities(action.value);
							break;
						} case 'activate': {
							this.activateEntities(action.value);
							break;
						} case 'edit': {
							this.editEntity(action.value[0]);
							break;
						} case 'delete': {
							this.deleteEntities(action.value);
							break;
						} case 'details': {
							window.location.href = '/product/details?id=' + action.value[0];
							break;
						}

					}
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			},
			mounted() {
				window.addEventListener('popstate', (event) => {
					this.pageChange++;
				});
			},
		});

	</script>
}
