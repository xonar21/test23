@{
	ViewData["Title"] = "Marketing Lists";
}

<MarketingList />

@section Scripts {
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script>
		Vue.component('MarketingList', {
			template: `
					<div>
						<PageOptionsBar :searcheable="true" :pageOptionsComponents="pageOptionsComponents" @@searchInput="searchTable"/>
						<Table
								:fields="tableFields"
								:apiUrl="apiUrl"
								:httpMethod="httpMethod"
								@@triggeredMenuAction="action"
								tableId="marketingLists-table"
								:sortOrder="tableConfig.sortCol"
								:initialPageSize="20"
								:reload="tableKey"
								dataPath="result.result"
								:customQueryparams="customQueryparams"
								:hasCustomQUeryparams="true"
								:controller="'MarketingList'"
								:pageChange="pageChange"
								:changeUrl="true"
								:hasCustomQUeryparams="true"
								:actionsSingle="tableActions.single"
								:actionsSingleDisabled="tableActions.singleDisabled"
								:actionsMultiple="tableActions.multiple"
								:actionsMultipleDisabled="tableActions.multipleDisabled"
								:haveContextMenu="true"
							>
							</Table>
						<Modal :modalProps="modalMarketingListProps" @@newValue="emitValueMarketingList" :refreshInputs="refreshInputs" :inputsKey="modalKey"/>
						<Modal :modalProps="modalAddMarketingListMemberProps" @@newValue="emitValueMarketingListMember" :refreshInputs="refreshNewMemberInputs" :inputsKey="memberModalKey"/>
					</div>
				`,
			data() {
				return {
					apiUrl: apiEndpoints.CrmCommon.GetMarketingListsPaginated,
					httpMethod: 'get',
					tableKey: 0,
					refreshInputs: 0,
					modalKey: 0,
					memberModalKey: 0,
					refreshNewMemberInputs: 0,
					pageChange: 0,
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'name',
								sortField: 'name',
								direction: 'asc'
							}
						]
					},
					tableFields: [
						{
							name: 'name',
							title: t('name'),
							sortField: 'name',
							visible: true
						},
						{
							name: 'targetType',
							title: 'Target Type',
							sortField: 'targetType',
							visible: true,
							formatter(value) {
								return value === 0 ? 'Prospect' : value === 1 ? 'Client' : 'Lead';
							}
						},
						{
							name: 'membersCount',
							title: t('details_members'),
							visible: true,
							dataClass: 'td-users'
						},
						{
							name: 'isDeleted',
							title: t('status'),
							visible: true
						}
					],
					tableActions: {
						single: {
							"edit": { name: t('edit'), icon: "edit" },
							"disable": { name: "Disable", icon: "eye-off" },
							"addMembers": {name: "Add members", icon: "plus"}
						},
						singleDisabled: {
							"enable": { name: "Enable", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						},
						multiple: {
							"disable": { name: "Disable", icon: "eye-off" }
						},
						multipleDisabled: {
							"enable": { name: "Enable", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						}
					},
					addAndNew: false,
					waitAddButton: false,
					refreshInputs: 0,
					editableMarketingListModal: false,
					marketingListValues: {
						name: '',
						targetType: '',
						membersCount: '',
						members: []
					},
					marketingListMemberValues: {
						members: []
					},
					marketingLists: [],
					listMemberOrganizations: [],
					allOrganizations: [],
					searchString: null,

				}
			},
			created() {
				customAjaxRequest(apiEndpoints.MarketingList.GetAllMarketingLists).then(result => {
					this.marketingLists = result;
				});
				customAjaxRequest(apiEndpoints.Organization.GetAllProspectOrganization, 'get').then(result => {
					this.allProspectOrganizations = this.convertToSelectList(result);
				});
				customAjaxRequest(apiEndpoints.Organization.GetAllClientOrganization, 'get' ).then(result => {
					this.allClientOrganizations = this.convertToSelectList(result);
				});
				customAjaxRequest(apiEndpoints.Organization.GetAllLeadOrganization, 'get').then(result => {
					this.allLeadOrganizations = this.convertToSelectList(result);
				});

			},
			computed: {
				customQueryparams() {
					return {
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				pageOptionsComponents() {
					return [
						{
							name: 'Button',
							props: {
								label: 'Add marketing list',
								className: 'ml-auto',
								btnType: 'success',
								onClick: () => {
									this.editableMarketingListModal = false;
									this.resetMarketingListValues();
									this.refreshInputs++;
									$(`#${this.modalMarketingListProps.id}`).modal("show");
								}
							}
						}
					]
				},
				marketingListFormSubmits() {
					const resultArray = [
						{
							name: 'Button',
							props: {
								label: "@Localizer["cancel"]",
								btnType: 'outline-secondary',
								onClick: () => {
									this.resetMarketingListValues();
									this.refreshInputs++;
									this.modalKey++;
									$(`#${this.modalMarketingListProps.id}`).modal("hide");
								}
							}
						}];
					if (!this.editableMarketingListModal) {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label:"@Localizer["add"]",
									btnType: 'success',
									btnDOMType: 'submit',
									onClick: async e => {
										e.preventDefault();
										const response = await this.addNewMarketingList();
										this.resetMarketingListValues();
										this.refreshInputs++;
										this.modalKey++;
										if (response) $(`#${this.modalMarketingListProps.id}`).modal("hide");
									}
								}
							}
						);
					} else {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label: "@Localizer["save"]",
									btnType: 'success',
									btnDOMType: 'submit',
									onClick: async e => {
										e.preventDefault();
										const response = await this.updateMarketingList();
										this.resetMarketingListValues();
										this.refreshInputs++;
										this.modalKey++;
										if (response) $(`#${this.modalMarketingListProps.id}`).modal("hide");
									}
								}
							}
						);
					}
					return resultArray;
				},
				modalMarketingList() {
					return this.editableMarketingListModal ? 'Edit marketing list' : 'Add marketing list';
				},
				modalMarketingListProps() {
					return {
						id: 'marketingListModal',
						label: this.modalMarketingList,
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'marketingList-name',
									type: 'text',
									label: t('name'),
									required: true,
									value: this.marketingListValues.name,
									className: 'col-12',
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'marketingList-targetType',
									label: 'Target Type',
									size: 10,
									searchable: true,
									value: this.marketingListValues.targetType,
									required: true,
									options: [
										{
											label: 'Prospect',
											value: 0,
										},
										{
											label: 'Client',
											value: 1,
										},
										{
											label: 'Lead',
											value: 2
										},
									],
									className: 'col-12'
								}
							},
							{
								name: 'hr',
								props: {
									class: 'line-between-inputs'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'marketingList-members',
									label: t('details_members'),
									options: this.allOrganizations,
									multiple: true,
									noneSelectedText: this.marketingListValues.targetType >= '0' ? 'Nothing selected' : 'Select target type first',
									size: 10,
									searchable: true,
									value: this.marketingListValues.members,
									className: 'col-12'
								}
							},
						],
						formSubmits: this.marketingListFormSubmits
					}
				},
				modalAddMarketingListMemberProps() {
					return {
						id: 'addMarketingListMemberModal',
						label: 'Add new marketing list member',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'marketingListMember-members',
									label: t('details_members'),
									options: this.listMemberOrganizations,
									multiple: true,
									size: 10,
									searchable: true,
									value: this.marketingListMemberValues.members,
									className: 'col-12'
								}
							},
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: "@Localizer["cancel"]",
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalAddMarketingListMemberProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: "@Localizer["save"]",
									btnType: 'success',
									btnDOMType: 'submit',
									onClick: async e => {
										e.preventDefault();
										const response = await this.addNewMembersToMarketingList(this.marketingListMemberValues);
										if (response) $(`#${this.modalAddMarketingListMemberProps.id}`).modal("hide");
									}
								}
							}
						]
					}
				}
			},
			methods: {
				async loadOrganizationsList(targetType) {
					targetType == 0 ? this.allOrganizations = this.allProspectOrganizations
						: targetType == 1 ? this.allOrganizations = this.allClientOrganizations
							: this.allOrganizations = this.allLeadOrganizations;
					this.modalKey++;
				},
				async addNewMarketingList() {
					return new Promise((resolve, reject) => {
						const { members, ...newObj } = this.marketingListValues;
						let newListMembers = [];
						if (members.length > 0) {
							members.forEach(organizationId => {
								newListMembers.push({
									organizationId
								});
							});
						}
						newObj.members = newListMembers;
						customAjaxRequest(apiEndpoints.MarketingList.AddNewMarketingList, 'PUT', newObj).then(marketingListId => {
								this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async deleteMarketingLists(marketingLists) {
					marketingLists.forEach((marketingListId, i, a) => {
						customAjaxRequest(apiEndpoints.MarketingList.DeleteMarketingList, 'DELETE', { marketingListId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async disableMarketingLists(marketingLists) {
					marketingLists.forEach((marketingListId, i, a) => {
						customAjaxRequest(apiEndpoints.MarketingList.DisableMarketingList, 'POST', { marketingListId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async enableMarketingLists(marketingLists) {
					marketingLists.forEach((marketingListId, i, a) => {
						customAjaxRequest(apiEndpoints.MarketingList.EnableMarketingList, 'POST', { marketingListId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async updateMarketingList() {
					const { members, ...newObj } = this.marketingListValues;
					let newListMembers = [];
					if (members.length > 0) {
						members.forEach(organizationId => {
							newListMembers.push({
								organizationId
							});
						});
					}
					newObj.members = newListMembers;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.MarketingList.UpdateMarketingList, 'POST', newObj).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				async addNewMembersToMarketingList(options) {
					return new Promise((resolve, reject) => {
						options.members.forEach((m, i, a) => {
							const apiOptions = {
								organizationId: m,
								marketingListId: options.id
							}
							customAjaxRequest(apiEndpoints.MarketingList.AddNewMemberToList, 'PUT', apiOptions).then(() => {
								if (i === a.length - 1) {
									this.tableKey++;
									resolve(true);
								}
							}).catch(e => {
								toast.notifyErrorList(e);
								reject(false);
							});
						});
					});
				},
				async loadMarketingList(marketingListId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.MarketingList.GetMarketingListById, 'GET', { marketingListId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				editMarketingList(marketingListId) {
					this.editableMarketingListModal = true;
					this.loadMarketingList(marketingListId).then(result => {
						this.marketingListValues = result;
						let newListMembers = [];
						result.memberOrganizations.forEach(x => {
							newListMembers.push(x.organizationId);
						});
						this.marketingListValues.members = newListMembers;
						this.loadOrganizationsList(this.marketingListValues.targetType);
						this.modalKey++;
						$(`#${this.modalMarketingListProps.id}`).modal("show");
					});
				},
			@*	async loadMarketingList(marketingListId) {
					const promise = [customAjaxRequest(apiEndpoints.MarketingList.GetMarketingListById, 'GET', { marketingListId })];
					Promise.all(promise).then(result => {
						const { memberOrganizations, ...newMarketingList } = result[0];
						let newListMembers = [];
						result[0].memberOrganizations.forEach(x => {
							newListMembers.push(x.organizationId);
						});
						newMarketingList.members = newListMembers;
						return newMarketingList;
					});

				},
				editMarketingList(marketingListId) {
					this.editableMarketingListModal = true;
					this.loadMarketingList(marketingListId).then(result => {
						this.marketingListValues = result;
						this.loadOrganizationsList(this.marketingListValues.targetType);
						this.modalKey++;
						$(`#${this.modalMarketingListProps.id}`).modal("show");
					});
				},*@
				addMarketingListMember(marketingListId) {
					this.listMemberOrganizations = [];
					this.loadMarketingList(marketingListId).then(result => {
						const marketingList = result;
						let newListMembers = [];
						result.memberOrganizations.forEach(x => {
							newListMembers.push(x.organizationId);
						});
						marketingList.members = newListMembers;
						this.marketingListMemberValues.id = marketingListId;
						this.loadOrganizationsList(marketingList.targetType);
						this.listMemberOrganizations = this.allOrganizations.filter(m => {
							return !marketingList.members.includes(m.value);

						});
						this.memberModalKey++;
					});
				},
				convertToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				resetMarketingListValues() {
					this.marketingListValues = {
						name: '',
						targetType: '',
						membersCount: '',
						members: []
					}
				},
				emitValueMarketingList(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.marketingListValues[val.id.replace('marketingList-', '')] = newVal;
					if (val.id === 'marketingList-targetType') {
						this.loadOrganizationsList(val.value);
					}
				},
				emitValueMarketingListMember(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.marketingListMemberValues[val.id.replace('marketingListMember-', '')] = newVal;
				},
				findObjectByPropValue(array, value, prop) {
					return array.find(x => x[prop] === value);
				},
				changeObjPropInArrayById(array, value, prop, id, idProp) {
					for (var i in array) {
						if (array[i][idProp] == id) {
							array[i][prop] = value;
							break;
						}
					}
				},
				openAddMember(marketingListId) {
					this.marketingListMemberValues.members = [];
					this.refreshNewMemberInputs++;
					this.addMarketingListMember(marketingListId);
					this.memberModalKey++;
					$(`#${this.modalAddMarketingListMemberProps.id}`).modal("show");
				},
				action(action) {
					switch (action.key) {
						case 'disable': {
							this.disableMarketingLists(action.value);
							break;
						} case 'enable': {
							this.enableMarketingLists(action.value);
							break;
						} case 'edit': {
							this.editMarketingList(action.value[0]);
							break;
						} case 'delete': {
							this.deleteMarketingLists(action.value);
							break;
						} case 'addMembers': {
							this.openAddMember(action.value[0]);
							break;
						}
					}
				},
				initials(name, surname) {
					return name && surname ? `${name.charAt(0)} ${surname.charAt(0)}` : 'UP';
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			},
				mounted() {
					window.addEventListener('popstate', (event) => {
						this.pageChange++;
					});
				},
		});
	</script>
}