@inject IStringLocalizer Localizer
@{
	ViewData["Title"] = Localizer["contacts"];
}
@section Styles
{
}

<Contacts />
@section Scripts
{
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components//form-controls/checkbox.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components//form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/components//form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components/phone-input/phone-input.js"></script>
	<script src="~/themes/gear/js/components/phone-input/addHideInput.js"></script>
	<script src="~/themes/gear/js/components/phone-input/switcher.js"></script>
	<script src="~/themes/gear/js/components/modals/contactsModal.js"></script>

	<script>
		Vue.component('Contacts', {
			template: `
					<div>
						<PageOptionsBar :searcheable="true" :pageOptionsComponents="pageOptionsComponents" @@searchInput="searchTable"/>
						<div>
							<Table
								:fields="tableFields"
								:apiUrl="apiUrl"
								:httpMethod="httpMethod"
								@@triggeredMenuAction="action"
								tableId="contacts-table"
								:sortOrder="tableConfig.sortCol"
								:customQueryparams="customQueryparams"
								:hasCustomQUeryparams="true"
								:controller="'Contact'"
								:pageChange="pageChange"
								:changeUrl="true"
								:initialPageSize="20"
								:reload="tableKey"
								dataPath="result.result"
								:actionsSingle="tableActions.single"
								:actionsSingleDisabled="tableActions.singleDisabled"
								:actionsMultiple="tableActions.multiple"
								:actionsMultipleDisabled="tableActions.multipleDisabled"
								:haveContextMenu="true"
							>
								<slot slot="firstName" slot-scope="props">
									<a :href="'/contact/details?name=' + props.rowData.firstName.split(' ').join('_') + '_' + props.rowData.lastName +'&id=' + props.rowData.id" @@click.stop>
										{{ props.rowData.firstName }} {{ props.rowData.lastName }}
									</a>
								</slot>
								<slot slot="phone" slot-scope="props">
									<span v-if="props.rowData.phone">+{{props.rowData.dialCode}} {{ props.rowData.phone }}</span>
								</slot>
								<slot slot="organization" slot-scope="props">
									<a v-if="props.rowData.organization" :href="'/organizations/details?organization=' +props.rowData.organization.split(' ').join('_') +'&id=' + props.rowData.organizationId" target="_blank" @@click.stop>
										{{ props.rowData.organization }}
									</a>
								</slot>
								<slot slot="email" slot-scope="props">
									<template v-if="props.rowData.email">
										<div v-for="email in props.rowData.email">
											 {{ email }}
										</div>
									</template>
								</slot>
								<slot slot="phone" slot-scope="props">
									<template v-if="props.rowData.phone">
										<div v-for="phone in props.rowData.phone">
											{{ phone }}
										</div>
									</template>
								</slot>
							</Table>
						</div>
						<ContactsModal @@resetJobPostion="resetJobPostion"
									   @@updateModalKey="updateModalKey"
									   @@updateTableKey="updateTableKey"
									   :modalAddJobPositionId="modalAddJobPosition.id"
									   :editableContactModal="editableContactModal"
									   :contactIdForEditModal="contactIdForEditModal"
									   :modalKey="modalKey" />
						<Modal :refreshInputs="refreshInputs" :modalProps="modalContactMerge" @@newValue="selectContact" @@newPhone="emitNewMergePhone"/>
						<Modal :refreshInputs="refreshInputs" :modalProps="modalImportContact" @@newValue="importContact" :inputsKey="modalImportKey"/>
						<Modal :refreshInputs="refreshInputs" :modalProps="modalAddJobPosition" @@newValue="emitJobPosition" :inputsKey="modalKey"/>
					</div>`
			,
			data() {
				return {
					modalContactPropsId: 'contactModal',
					contactIdForEditModal: '',
					modalImportKey: 0,
					apiUrl: apiEndpoints.Contact.GetAllContactsPaginated,
					httpMethod: 'get',
					pageChange: 0,
					tableFields: [
						{
							name: 'firstName',
							title: t('name'),
							sortField: 'firstName',
							visible: true
						},
						{
							name: 'email',
							title: t('email'),
							sortField: 'email',
							visible: true
						},
						{
							name: 'phone',
							title: t('system_phone'),
							sortField: 'phone',
							visible: true
						},
						{
							name: 'jobPosition',
							title: t('details_job_position'),
							sortField: 'jobPosition',
							visible: true
						},
						{
							name: 'organization',
							title: t('organization'),
							sortField: 'organization',
							visible: true
						},
						{
							name: 'isDeleted',
							title: t('system_status'),
							sortField: 'isDeleted',
							visible: true
						}
					],
					jobPosition: {},
					mergeContactModal: {
						mergeSelectContacts: [],
						mergeSelectJobPosition: [],
						mergeSelectOgr: [],
						mergeSelectEmail: [],
						mergeSelectPhone: [],
						mergeSourceOrg: null,
						mergeSourceEmail: null,
						mergeSourcePhone: null,
						mergeSourceJobPosition: null,
						mergeSourceContact: null,
						mergeRemainingContacts: []
					},
					importContactModal: {
						importDelimiter: [{ name: 'Comma', id: 1 }, { name: 'Semicolon', id: 2 }, { name: 'Tabulation', id: 3 }],
						importParameter:[],
						importProperties: [{ name: 'FirstName', id: 1 }, { name: 'LastName', id: 2 }, { name: 'Organization', id: 4 },
						{ name: 'Email', id: 5 }, { name: 'JobPosition', id: 6 }, { name: 'Description', id: 17 }],
						importEncoding: [{ name: 'UTF-8', id: 10 }],
						sourceImportProperties: [],
						importHideSelects: true,
						fileExtension: '',
						sourceImportDelimiter: null,
						sourceImportEncoding: null,
						sourceImportAction: null,
						sourceImportParameter: [],
						action: true,
						file: null,
						checkExtension: false,
						checkState: true
					},
					orgId: null,
					searchString: '',
					editContactId: '',
					contactValues: {
						organizationId: '',
						email: '',
						phone: '',
						requiredPhone: true,
						phoneList: [],
						firstName: '',
						lastName: '',
						description: '',
						jobPositionId: '',
					},
					emailLabels: [],
					pageOptionsComponents: [
						{
							name: 'Button',
							props: {
								label: '@Localizer["contacts_add_contact"]',
								className: 'ml-auto',
								btnType: 'success',
								onClick: () => {
									this.editableContactModal = false;
									this.updateModalKey();
									$(`#${this.modalContactPropsId}`).modal("show");
								}
							}
						},
						{
							name: 'Button',
							props: {
								label: 'Import',
								className: 'ml-2',
								btnType: 'primary',
								onClick: () => {
									this.resetImportContactModal();
									$(`#${this.modalImportContact.id}`).modal("show");
								}
							}
						}
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'firstName',
								sortField: 'firstName',
								direction: 'asc'
							}
						]
					},
					tableActions: {
						single: {
							"details": { name: t('details'), icon: "details" },
							"edit": { name: t('edit'), icon: "edit" },
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						singleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						},
						multiple: {
							"deactivate": { name: "Deactivate", icon: "eye-off" },
							"merge": {name: "Merge"}
						},
						multipleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						}
					},
					tableKey: 0,
					addAndNew: false,
					waitAddButton: false,
					editableContactModal: false,
					refreshInputs: 0,
					modalKey: 0
				};
			},
			computed: {
				customQueryparams() {
					return {
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				modalAddJobPosition() {
					return {
						id: 'JobPositionModal',
						label: 'Add job position',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'job-name',
									type: 'text',
									label: t('name'),
									required: true,
									className: 'col-12',
									value: this.jobPosition.name,
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: '@Localizer["cancel"]',
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalAddJobPosition.id}`).modal("hide");
										$(`#${this.modalContactPropsId}`).modal("show");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: '@Localizer["save"]',
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () =>
							this.addNewJobPosition().then(() => {
								$(`#${this.modalAddJobPosition.id}`).modal("hide");
								$(`#${this.modalContactPropsId}`).modal("show");
							})
						}
				},
				modalContactMerge() {
					return {
						id: 'mergeContactsModal',
						label: 'Merge Contacts',
						formInputs: [{
							name: 'Select',
							props: {
								id: 'merge-SelectedContacts',
								label: 'Contact Master',
								required: true,
								disabled: false,
								options: this.convertContactsToSelectList(this.mergeContactModal.mergeSelectContacts),
								value: this.mergeContactModal.mergeSourceContact,
								multiple: false,
								className: 'col-12'
							}
						},
						{
							name: 'Select',
							props: {
								id: 'merge-SelectedOrganizations',
								label: t('organization'),
								required: true,
								disabled: false,
								options: this.convertToSelectList(this.mergeContactModal.mergeSelectOgr),
								value: this.mergeContactModal.mergeSourceOrg,
								multiple: false,
								className: 'col-12 col-md-6'
							}
							},
							{
								name: 'Select',
								props: {
									id: 'merge-SelectedJobPosition',
									label: t('details_job_position'),
									required: false,
									disabled: false,
									options: this.convertToSelectList(this.mergeContactModal.mergeSelectJobPosition),
									value: this.mergeContactModal.mergeSourceJobPosition,
									multiple: false,
									className: 'col-12 col-md-6'
								}
							},
						{
							name: 'Select',
							props: {
								id: 'merge-SelectedEmails',
								label: t('email'),
								required: true,
								disabled: false,
								options: this.convertEmailsToSelectList(this.mergeContactModal.mergeSelectEmail),
								value: this.mergeContactModal.mergeSourceEmail,
								multiple: false,
								className: 'col-12'
							}
						},
							{
								name: 'Input',
								props: {
									id: 'merge-newPhone',
									type: 'tel',
									label: 'Add Merge Phone',
									required: false,
									inputPrefix: '(+373)',
									inputSuffix: '<span>&#43</span>',
									suffixClass: 'inputSuffixButton',
									className: 'col-12 col-md-6',
									value: this.contactValues.phone,
									validator: value => fieldValidationFunc(value, 'phone'),
									validatorInput: value => fieldValidationInputFunc(value, 'phone')
								}
							},
						{
							name: 'Select',
							props: {
								id: 'merge-SelectedPhone',
								label: t('system_phone'),
								required: true,
								disabled: false,
								options: this.convertMergePhoneToSelectList(this.mergeContactModal.mergeSelectPhone),
								value: this.mergeContactModal.mergeSourcePhone,
								multiple: false,
								className: 'col-12 col-md-6'
							}
						}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: 'Merge',
									btnType: 'success',
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							$(`#${this.modalContactMerge.id}`).modal("hide");
							this.mergeContactsPost();
						}
					}
				},
				modalImportContact() {
					return {
						id: 'importContacts',
						label: 'Import Contacts',
						formInputs: [
							{
								name: 'Select',
								props: {
									id: 'import-Properties',
									label: 'Properties',
									required: true,
									multiple: true,
									disabled: false,
									options: this.convertToSelectList(this.importContactModal.importProperties),
									value: this.importContactModal.sourceImportProperties,
									className: 'col-12'
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Choose file type',
									className: 'col-3 ml-2'
								}
							},
							{
								name: 'Radio',
								props: {
									id: 'import-fileType',
									label: 'Choose file type:',
									required: true,
									className: 'row ml-1',
									options: [{ value: 'XLS', label: 'Excel' }, { value: 'CSV', label: 'Spreadsheets' }]
								}
							},
							{
								name: 'Select',
								props: {
									id: 'import-Delimiter',
									label: 'Delimiter',
									required: !this.importContactModal.importHideSelects,
									disabled: this.importContactModal.importHideSelects,
									options: this.convertToSelectList(this.importContactModal.importDelimiter),
									value: this.importContactModal.sourceImportDelimiter,
									className: 'col-6 mt-2'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'import-Encoding',
									label: 'Encoding',
									required: !this.importContactModal.importHideSelects,
									disabled: this.importContactModal.importHideSelects,
									options: this.convertToSelectList(this.importContactModal.importEncoding),
									value: this.importContactModal.sourceImportEncoding,
									className: 'col-6 mt-2'
								}
							},
							{
								name: 'File',
								props: {
									id: 'import-File',
									className: 'col-6 mt-1',
									label: 'Upload File',
									disabled: false,
									required: true,
									acceptedExtensions: this.importContactModal.fileExtension
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Wrong extension!!!',
									className: 'col-5 ml-1 mt-2 text-danger',
									hidden: this.importContactModal.checkExtension
								}
							},
							{
								name: 'Select',
								props: {
									id: 'import-MachingParameter',
									label: 'Matching parameter',
									required: true,
									multiple: true,
									disabled: false,
									options: this.convertToSelectList(this.importContactModal.importParameter),
									value: this.importContactModal.sourceImportParameter,
									className: 'col-12 mt-3'
								}
							},
							{
								name: 'ShortTextBlock',
								props: {
									value: 'Actions',
									className: 'col-3 ml-1'
								}
							},
							{
								name: 'CheckBox',
								props: {
									id: 'import-Action',
									label: 'Choose file type:',
									required: this.importContactModal.action,
									className: 'col-12 ml-1',
									options: [{ value: 'Delete', label: 'Delete all existing records before import' },
									{ value: 'Update', label: 'Update existing record (Only ADD missing information)' },
									{ value: 'No maching', label: 'If no matching record is found. Create new record' },
									{ value: 'More than one', label: 'If more than one records are found. Create a new record' }]
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: 'Import',
									btnType: 'success',
									disabled: !this.importContactModal.checkState,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: async () => {
							$(`#${this.modalImportContact.id}`).modal("hide");
							this.importContactPost();
						}
					}
				},
				getPhoneList() {
					return this.phoneList;
				},
			},
			created: async function () {
				this.$store.dispatch('getAllOrganizationsForSelect');
				this.$store.dispatch('getAllContacts');

				customAjaxRequest(apiEndpoints.Address.GetAllCountries).then(result => {
					this.countries = this.convertToSelectList(result);
				});
				customAjaxRequest(apiEndpoints.JobPosition.GetAllJobPositions).then(result => {
					this.jobPositionsListSelect = this.convertToSelectList(result);
				});
			},
			methods: {
				updateModalKey() {
					this.modalKey++;
				},
				updateTableKey() {
					this.tableKey++;
				},
				async addNewJobPosition() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.JobPosition.AddNewJobPosition, 'PUT', this.jobPosition).then(result => {
							this.jobPositionsListSelect.push({ label: this.jobPosition.name, value: result });
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async deactivateContacts(array) {
					array.forEach((contactId, i, a) => {
						customAjaxRequest(apiEndpoints.Contact.DeactivateContactById, 'POST', { contactId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async activateContacts(array) {
					array.forEach((contactId, i, a) => {
						customAjaxRequest(apiEndpoints.Contact.ActivateContactById, 'POST', { contactId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deleteContacts(array) {
					array.forEach((contactId, i, a) => {
						customAjaxRequest(apiEndpoints.Contact.DeleteContactById, 'DELETE', { contactId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async importContactPost() {
					let properties = [];
					sourceImportProperties = this.importContactModal.sourceImportProperties;
					sourceImportProperties.forEach(id => { if (id) properties.push(this.importContactModal.importProperties.find(x => x.id === id).name) });

					let parameters = [];
					sourceImportParameter = this.importContactModal.sourceImportParameter;
					sourceImportParameter.forEach(id => { if (id) parameters.push(this.importContactModal.importProperties.find(x => x.id === id).name) });
					let delim = null;
					if (this.importContactModal.fileExtension === '.csv') {
						this.importContactModal.sourceImportDelimiter = this.importContactModal.importDelimiter.find(x => x.id === this.importContactModal.sourceImportDelimiter).name;
						this.importContactModal.sourceImportEncoding = this.importContactModal.importEncoding.find(x => x.id === this.importContactModal.sourceImportEncoding).name;

						switch (this.importContactModal.sourceImportDelimiter) {
							case 'Comma':
								delim = ',';
								break;
							case 'Semicolon':
								delim = ';';
								break;
							case 'Tabulation':
								delim = '	';
								break;
							default:
						}
					}

					const objToSendToAPI = {
						ImportFile: this.importContactModal.file,
						Delimiter: delim,
						Action: this.importContactModal.sourceImportAction,
						Encoding: this.importContactModal.sourceImportEncoding,
						Parameters: parameters,
						Properties: properties,
						Type: 'Contact'
					};

					let form_data = new FormData();
					for (let key in objToSendToAPI) {
						form_data.append(key, objToSendToAPI[key]);
					}

					return new Promise((resolve, reject) => {
						$.ajax({
							url: apiEndpoints.Contact.ImportContacts,
							data: form_data,
							processData: false,
							contentType: false,
							type: "POST",
							success: (data) => {
								resolve(data);
								this.tableKey++;
							},
							error: (e) => {
								toast.notifyErrorList(e);
								reject(e);
							}
						});
					});
				},
				editContact(contactId) {
					this.contactIdForEditModal = contactId;
					this.editableContactModal = true;
					this.updateModalKey();
				},
				resetJobPostion () {
					this.jobPosition.name = null;
				},
				emitJobPosition(val) {
					this.jobPosition.name = val.value;
				},
				emitNewMergePhone(val) {
					this.mergeContactModal.mergeSelectPhone.push({ phone: val.value });
				},
				importContact(val) {
					if (val) {
						switch (val.id) {
							case 'import-Properties':
								this.importContactModal.sourceImportProperties = val.value;
								let parameters = [];
								val.value.forEach(id => { if (id) parameters.push(this.importContactModal.importProperties.find(x => x.id === id)) });

								this.importContactModal.importParameter = parameters;
								break;
							case 'import-fileType':
								if (val.value === 'CSV') {
									this.importContactModal.importHideSelects = false;
									this.importContactModal.fileExtension = '.csv';
									if (this.importContactModal.file != null) {
										if (this.importContactModal.file.name.includes('.xls')) {
											this.importContactModal.checkExtension = true;
											this.importContactModal.checkState = false;
										}
										else {
											this.importContactModal.checkExtension = false;
											this.importContactModal.checkState = true;
										}
									}

								} else {
									this.importContactModal.importHideSelects = true;
									this.importContactModal.fileExtension = '.xls;*.xlsx';
									if (this.importContactModal.file != null) {
										if (this.importContactModal.file.name.includes('.csv')) {
											this.importContactModal.checkExtension = true;
											this.importContactModal.checkState = false;
										}
										else {
											this.importContactModal.checkExtension = false;
											this.importContactModal.checkState = true;
										}
									}
								}
								break;
							case 'import-Delimiter':
								this.importContactModal.sourceImportDelimiter = val.value;
								break;
							case 'import-Encoding':
								this.importContactModal.sourceImportEncoding = val.value;
								break;
							case 'import-Action':
								if (val.value.length > 0) this.importContactModal.action = false;
								else this.importContactModal.action = true;
								this.importContactModal.sourceImportAction = val.value;
								break;
							case 'import-MachingParameter':
								this.importContactModal.sourceImportParameter = val.value;
								break;
							default:
								if (val.name.includes(this.importContactModal.fileExtension)) {
									this.importContactModal.checkExtension = false;
									this.importContactModal.checkState = true;
								}
								this.importContactModal.file = val;
						}
					} else {
						this.importContactModal.file = null;
						this.importContactModal.checkExtension = false;
						this.importContactModal.checkState = true;
					}

				},
				resetImportContactModal() {
					this.importContactModal.sourceImportProperties = [];
					this.importContactModal.importParameter = [];
					this.importContactModal.importHideSelects = true;
					this.importContactModal.fileExtension = '';
					this.importContactModal.sourceImportDelimiter = null;
					this.importContactModal.sourceImportEncoding = null;
					this.importContactModal.sourceImportAction = null;
					this.importContactModal.sourceImportParameter = [];
					this.importContactModal.file = null;
					this.importContactModal.action = true;
					this.importContactModal.checkExtension = false;
					this.importContactModal.checkState = true;
					this.modalImportKey++;
				},
				selectContact(val) {
					if (val.id === 'merge-SelectedContacts') {
						this.selectAllSourceFields(val.value);
					}
					if (val.id === 'merge-SelectedOrganizations') {
						this.mergeContactModal.mergeSourceOrg = val.value;
					}
					if (val.id === 'merge-SelectedEmails') {
						this.mergeContactModal.mergeSourceEmail = val.value;
					}
					if (val.id === 'merge-SelectedPhone') {
						this.mergeContactModal.mergeSourcePhone = val.value;
					}
					if (val.id === 'merge-SelectedJobPosition') {
						this.mergeContactModal.mergeSourceJobPosition = val.value;
					}
				},
				async selectAllSourceFields(contactId) {
					this.mergeContactModal.mergeSourceContact = contactId;
					this.mergeContactModal.mergeSourceOrg = null;
					this.mergeContactModal.mergeSourceEmail = null;
					this.mergeContactModal.mergeSourcePhone = null;
					this.mergeContactModal.mergeSourceJobPosition = null;
					const selectedContact = this.mergeContactModal.mergeSelectContacts.find(e => e.id === contactId);
					this.mergeContactModal.mergeSourceOrg = selectedContact.organizationId;
					this.mergeContactModal.mergeSourcePhone = selectedContact.phone;
					this.mergeContactModal.mergeSourceEmail = selectedContact.email;
					if (selectedContact.jobPosition != null)
						this.mergeContactModal.mergeSourceJobPosition = selctedContact.jobPositionId;
					await this.getRemainingContacts(this.mergeContactModal.mergeSourceContact);
				},
				mergeContactsPost() {
					const objToSentToApi = {
						SourceContact: this.mergeContactModal.mergeSourceContact,
						SourceOrganization: this.mergeContactModal.mergeSourceOrg,
						SourceEmail: this.mergeContactModal.mergeSourceEmail,
						SourcePhone: this.mergeContactModal.mergeSourcePhone,
						SourceJobPostion: this.mergeContactModal.mergeSurceJobPosition,
						RemainingContacts: this.mergeContactModal.mergeRemainingContacts
					};
					customAjaxRequest(apiEndpoints.Contact.MergeContacts, 'POST', JSON.stringify(objToSentToApi), true).then(() => {
						this.initializeMergeModal();
						this.tableKey++;
					});

				},
				getRemainingContacts(contactId) {
					const remainingContacs = [];
					this.mergeContactModal.mergeSelectContacts.forEach((contact, i, a) => {
						if (contact.id != contactId) remainingContacs.push(contact.id);
					});
					this.mergeContactModal.mergeRemainingContacts = remainingContacs;
				},
				initializeMergeModal() {
					this.mergeContactModal.mergeSelectContacts = [];
					this.mergeContactModal.mergeSelectJobPosition = [];
					this.mergeContactModal.mergeSelectOgr = [];
					this.mergeContactModal.mergeSelectEmail = [];
					this.mergeContactModal.mergeSelectPhone = [];
					this.mergeContactModal.mergeSourceOrg = null;
					this.mergeContactModal.mergeSourceEmail = null;
					this.mergeContactModal.mergeSourcePhone = null;
					this.mergeContactModal.mergeSourceJobPosition = null;
					this.mergeContactModal.mergeSourceContact = null;
					this.mergeContactModal.mergeRemainingContacts = [];
				},
				mergeContacts(contactsToBeMerged) {
					this.initializeMergeModal();
					contactsToBeMerged.forEach((contactId, i, a) => {
						let promises = [customAjaxRequest(apiEndpoints.Contact.GetContactById, 'GET', { contactId })];
						Promise.all(promises).then(result => {
							if (result[0] != null) {
								this.mergeContactModal.mergeSelectContacts.push(result[0]);
								if(result[0].email != null) this.mergeContactModal.mergeSelectEmail.push(result[0].email);
								if (result[0].phoneList != null) this.mergeContactModal.mergeSelectPhone.push(...result[0].phoneList);
								if(result[0].organization != null) this.mergeContactModal.mergeSelectOgr.push(result[0].organization);
								if(result[0].jobPosition != null) this.mergeContactModal.mergeSelectJobPosition.push(result[0].jobPosition)
							}
							if (i === a.length - 1) {
								$(`#${this.modalContactMerge.id}`).modal("show");
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				convertToSelectList(array) {
					if (array.length === 0) return [];
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				convertContactsToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.firstName,
							value: e.id
						}
						return newObj;
					});
				},
				convertEmailsToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e,
							value: e
						}
						return newObj;
					});
				},
				convertPhoneToSelectList(array) {
					if (array) {
						return array.map(e => {
							const newObj = {
								label: e.value,
								value: e.value,
								disabled: true,
							}
							return newObj;
						});
					} else return [];

				},
				convertMergePhoneToSelectList(array) {
					if (array) {
						return array.map(e => {
							const newObj = {
								label: e.phone,
								value: e.phone,
							}
							return newObj;
						});
					} else return [];
				},
				action(action) {
					var contact = this.$store.state.allContacts.find(l => l.value == action.value[0]).label.split(' ').join('_');
					switch (action.key) {
						case 'deactivate': {
							this.deactivateContacts(action.value);
							break;
						} case 'activate': {
							this.activateContacts(action.value);
							break;
						} case 'edit': {
							this.editContact(action.value[0]);
							break;
						} case 'delete': {
							this.deleteContacts(action.value);
							break;
						} case 'details': {
							window.location.href = '/contact/details?name=' + contact + '&id=' + action.value[0];
							break;
						} case 'merge': {
							this.mergeContacts(action.value);
							break;
						}

					}
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			},
			mounted() {
				window.addEventListener('popstate', (event) => {
					this.pageChange++;
				});
			},
		});
	</script>
}