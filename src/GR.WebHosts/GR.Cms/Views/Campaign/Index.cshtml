@{
	ViewData["Title"] = "Campaigns";
}
@section Styles
{
}

<Campaigns />
@section Scripts
{
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script>
		const datePickerFormat = 'yyyy/mm/dd';
		const dateFormat = 'YYYY/MM/DD';
		Vue.component('Campaigns', {
			template: `
					<div>
						<PageOptionsBar :searcheable="true" :pageOptionsComponents="pageOptionsComponents" @@searchInput="searchTable"/>
						<div>
							<Table
								:fields="tableFields"
								:apiUrl="apiUrl"
								:httpMethod="httpMethod"
								@@triggeredMenuAction="action"
								tableId="campaignss-table"
								:sortOrder="tableConfig.sortCol"
								:customQueryparams="customQueryparams"
								:hasCustomQUeryparams="true"
								:hasCustomQUeryparams="true"
								:controller="'Campaign'"
								:pageChange="pageChange"
								:initialPageSize="20"
								:reload="tableKey"
								dataPath="result.result"
								:actionsSingle="tableActions.single"
								:actionsSingleDisabled="tableActions.singleDisabled"
								:actionsMultiple="tableActions.multiple"
								:actionsMultipleDisabled="tableActions.multipleDisabled"
								:haveContextMenu="true"
							>
								<slot slot="name" slot-scope="props">
									<a :href="'/campaign/details?id=' + props.rowData.id" @@click.stop>
										{{ props.rowData.name }} {{ props.rowData.lastName }}
									</a>
								</slot>
							</Table>
						</div>
						<Modal :refreshInputs="refreshInputs" :modalProps="modalCampaignProps" @@newValue="emitValueCampaign" :inputsKey="modalKey"/>
					</div>`
			,
			data() {
				return {
					apiUrl: apiEndpoints.Campaign.GetAllCampaignsPaginated,
					httpMethod: 'get',
					tableFields: [
						{
							name: 'name',
							title: t('name'),
							sortField: 'name',
							visible: true
						},
						{
							name: 'campaignCost',
							title: 'Cost',
							sortField: 'campaignCost',
							visible: true
						},
						{
							name: 'campaignBudget',
							title: 'Budget',
							sortField: 'campaignBudget',
							visible: true
						},
						{
							name: 'currency.symbol',
							title: t('iso_active_currency'),
							visible: true
						},
						{
							name: 'startDate',
							title: t('system_calendar_event_start_date'),
							sortField: 'startDate',
							visible: true
						},
						{
							name: 'endDate',
							title: t('system_calendar_event_end_date'),
							sortField: 'endDate',
							visible: true
						},
						{
							name: 'campaignType.name',
							title: t('type'),
							sortField: 'campaignType.name',
							visible: true
						},
						{
							name: 'campaignStatus',
							title: t('system_status'),
							sortField: 'campaignStatus',
							visible: true,
							formatter(value) {
								return value === 0 ? 'Planning' : value === 1 ? 'Running' : 'Completed';
							}
						},
						{
							name: 'isDeleted',
							title: 'Status',
							visible: true
						}
					],
					campaignTypeListSelect: [],
					allMarketingLists: [],
					//currenciesListSelect: [],
					campaignList: [],
					campaignId: null,
					searchString: '',
					editCampaignId: '',
					campaignValues: {
						name: '',
						campaignCost: '',
						campaignBudget: '',
						startDate: moment().format(dateFormat).toString(),
						endDate: moment().add(5, 'd').format(dateFormat).toString(),
						description: '',
						marketingLists: []
					},
					pageChange: 0,
					pageOptionsComponents: [
						{
							name: 'Button',
							props: {
								label: 'Add campaign',
								className: 'ml-auto',
								btnType: 'success',
								onClick: () => {
									this.editableCampaignModal = false;
									this.resetCampaignModalValues();
									this.refreshInputs++;
									this.modalKey++;
									$(`#${this.modalCampaignProps.id}`).modal("show");
								}
							}
						}
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'name',
								sortField: 'name',
								direction: 'asc'
							}
						]
					},
					tableActions: {
						single: {
							"details": { name: t('details'), icon: "details" },
							"edit": { name: t('edit'), icon: "edit" },
							"disable": { name: "Disable", icon: "eye-off" }
						},
						singleDisabled: {
							"enable": { name: "Enable", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						},
						multiple: {
							"disable": { name: "Disable", icon: "eye-off" }
						},
						multipleDisabled: {
							"enable": { name: "Enable", icon: "eye" },
							"delete": { name: t('delete'), icon: "delete" }
						}
					},
					tableKey: 0,
					addAndNew: false,
					waitAddButton: false,
					editableCampaignModal: false,
					refreshInputs: 0,
					modalKey: 0
				};
			},
			computed: {
				currenciesListSelect() {
					return this.$store.state.allCurrencies;
				},
				customQueryparams() {
					return {
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				modalCampaignLabel() {
					return this.editableCampaignModal ? 'Edit campaign' : 'Add campaign';
				},
				campaignFormSubmits() {
					const resultArray = [
						{
							name: 'Button',
							props: {
								label: "@Localizer["cancel"]",
								btnType: 'outline-secondary',
								onClick: () => {
									$(`#${this.modalCampaignProps.id}`).modal("hide");
								}
							}
						}
					];
					if (!this.editableCampaignModal) {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label: "@Localizer["save"]",
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddButton,
									onMouseDown: () => {
										this.addAndNew = false;
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: 'Add & new',
									btnType: 'success',
									btnDOMType: 'submit',
									waiting: this.waitAddButton,
									onMouseDown: () => {
										this.addAndNew = true;
									}
								}
							}
						);
					} else {
						resultArray.push(
							{
								name: 'Button',
								props: {
									label: "@Localizer["save"]",
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						);
					}
					return resultArray;
				},
				modalCampaignProps() {
					return {
						id: 'campaignModal',
						label: this.modalCampaignLabel,
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'campaign-name',
									type: 'text',
									label: t('name'),
									required: true,
									className: 'col-12',
									value: this.campaignValues.name,
									validator: value => fieldValidationFunc(value, 'varChar128'),
									validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'campaign-campaignCost',
									type: 'text',
									label: 'Cost',
									required: true,
									className: 'col-12 col-md-6',
									className: 'col-12 col-md-6',
									value: this.campaignValues.campaignCost
								}
							},
							{
								name: 'Input',
								props: {
									id: 'campaign-campaignBudget',
									type: 'text',
									label: 'Budget',
									required: true,
									value: this.campaignValues.campaignBudget,
									className: 'col-12 col-md-6'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'campaign-currencyCode',
									label: t('iso_active_currency'),
									options: this.currenciesListSelect,
									size: 10,
									className: 'col-12',
									value: this.campaignValues.currencyCode
								}
							},
							{
								name: 'Datepicker',
								props: {
									id: 'campaign-startDate',
									label: t('system_calendar_event_start_date'),
									required: true,
									className: 'col-12 ',
									format: datePickerFormat,
									value: this.campaignValues.startDate
								}
							},
							{
								name: 'Datepicker',
								props: {
									id: 'campaign-endDate',
									label: t('system_calendar_event_end_date'),
									required: true,
									className: 'col-12',
									format: datePickerFormat,
									value: this.campaignValues.endDate
								}
							},
							{
								name: 'Select',
								props: {
									id: 'campaign-campaignTypeId',
									label: t('type'),
									options: this.campaignTypeListSelect,
									value: this.campaignValues.campaignTypeId,
									className: 'col-12'
								}
							},
							{
								name: 'Select',
								props: {
									id: 'campaign-marketingLists',
									label: t('details_members'),
									options: this.allMarketingLists,
									multiple: true,
									size: 10,
									searchable: true,
									value: this.campaignValues.marketingLists,
									className: 'col-12'
								}
							},
							{
								name: 'Textarea',
								props: {
									id: 'campaign-description',
									label: t('description'),
									className: 'col-12',
									value: this.campaignValues.description,
								}
							}
						],
						formSubmits: this.campaignFormSubmits,
						onSubmit: () => {
							if (!this.editableCampaignModal) {
								this.addNewCampaign().then(() => {
									if (!this.addAndNew) {
										$(`#${this.modalCampaignProps.id}`).modal("hide");
									} else {
										this.resetCampaignModalValues();
										this.refreshInputs++;
									}
								});
							} else {
								this.updateCampaign().then(() => {
									$(`#${this.modalCampaignProps.id}`).modal("hide");
								});
							}
						}
					}
				},
			},
			created: async function () {
				this.$store.dispatch('getAllCurrencies');
				customAjaxRequest(apiEndpoints.CrmVocabularies.GetAllCampaignType).then(result => {
					this.campaignTypeListSelect = this.convertToSelectList(result);
				});
				customAjaxRequest(apiEndpoints.MarketingList.GetAllMarketingLists).then(result => {
					this.allMarketingLists = this.convertToSelectList(result);
				});
				customAjaxRequest(apiEndpoints.Campaign.GetAllCampaigns).then(result => {
					this.campaignList = result;
				});
			},
			methods: {
				async addNewCampaign() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						const { marketingLists, ...newObj } = this.campaignValues;
						let newList = [];
						if (marketingLists.length > 0) {
							marketingLists.forEach(marketingListId => {
								newList.push({
									marketingListId
								});
							});
						}
						newObj.marketingLists = newList;
						customAjaxRequest(apiEndpoints.Campaign.AddNewCampaign, 'PUT', newObj).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async updateCampaign() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						const { marketingLists, ...newObj } = this.campaignValues;
						let newList = [];
						if (marketingLists.length > 0) {
							marketingLists.forEach(marketingListId => {
								newList.push({
									marketingListId
								});
							});
						}
						newObj.marketingLists = newList;
						customAjaxRequest(apiEndpoints.Campaign.UpdateCampaign, 'POST', newObj).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async disableCampaign(array) {
					array.forEach((campaignId, i, a) => {
						customAjaxRequest(apiEndpoints.Campaign.DisableCampaignById, 'DELETE', { campaignId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async enableCampaign(array) {
					array.forEach((campaignId, i, a) => {
						customAjaxRequest(apiEndpoints.Campaign.EnableCampaignById, 'POST', { campaignId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deleteCampaigns(array) {
					array.forEach((campaignId, i, a) => {
						customAjaxRequest(apiEndpoints.Campaign.DeleteCampaignById, 'DELETE', { campaignId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadCampaign(campaignId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Campaign.GetCampaignById, 'GET', { campaignId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
				editCampaign(campaignId) {
					this.loadCampaign(campaignId).then(result => {
						this.editableCampaignModal = true;
						let newList = [];
						console.log(result);
						result.marketingLists.forEach(x => {
							newList.push(x.marketingListId);
						});
						this.campaignValues = result;
						this.campaignValues.marketingLists = newList;
						this.campaignValues.startDate = moment(result.startDate, 'DD.MM.YYYY').format(dateFormat);
						this.campaignValues.endDate = moment(result.endDate, 'DD.MM.YYYY').format(dateFormat);
						this.editCampaignId = campaignId;
						this.modalKey++;
						this.refreshInputs++;
						$(`#${this.modalCampaignProps.id}`).modal("show");
					});
				},
				resetCampaignModalValues() {
					this.campaignValues = {
						name: '',
						campaignCost: '',
						campaignBudget: '',
						startDate: moment().format(dateFormat).toString(),
						endDate: moment().add(1, 'd').format(dateFormat).toString(),
						description: '',
						currencyCode: null
					}
					this.editCampaignId = '';
				},
				emitValueCampaign(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.campaignValues[val.id.replace('campaign-', '')] = newVal;
				},
				findObjectByPropValue(array, value, prop) {
					return array.find(x => x[prop] === value);
				},
				convertToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.name,
							value: e.id
						}
						return newObj;
					});
				},
				convertCurrenciesToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: `${e.name}(${e.symbol})`,
							value: e.code
						}
						return newObj;
					});
				},
				action(action) {
					switch (action.key) {
						case 'disable': {
							this.disableCampaign(action.value);
							break;
						} case 'enable': {
							this.enableCampaign(action.value);
							break;
						} case 'edit': {
							this.editCampaign(action.value[0]);
							break;
						} case 'delete': {
							this.deleteCampaigns(action.value);
							break;
						} case 'details': {
							window.location.href = '/campaign/details?id=' + action.value[0];
							break;
						}
					}
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			},
			mounted() {
				window.addEventListener('popstate', (event) => {
					this.pageChange++;
				});
			},
		});

	</script>
}
