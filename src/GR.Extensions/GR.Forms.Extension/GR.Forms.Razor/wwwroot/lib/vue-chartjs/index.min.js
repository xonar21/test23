import{version,isProxy,toRaw,defineComponent,ref,shallowRef,onMounted,onBeforeUnmount,watch,h}from"vue";import{Chart as Chart$1,BarController,DoughnutController,LineController,PieController,PolarAreaController,RadarController,BubbleController,ScatterController}from"chart.js";const CommonProps={data:{type:Object,required:!0},options:{type:Object,default:()=>({})},plugins:{type:Array,default:()=>[]},datasetIdKey:{type:String,default:"label"},updateMode:{type:String,default:void 0}},Props={type:{type:String,required:!0},...CommonProps},compatProps="2"===version[0]?(t,e)=>Object.assign(t,{attrs:e}):(t,e)=>Object.assign(t,e);function toRawIfProxy(t){return isProxy(t)?toRaw(t):t}function cloneProxy(t){return isProxy(1<arguments.length&&void 0!==arguments[1]?arguments[1]:t)?new Proxy(t,{}):t}function setOptions(t,e){t=t.options;t&&e&&Object.assign(t,e)}function setLabels(t,e){t.labels=e}function setDatasets(r,t,a){const o=[];r.datasets=t.map(e=>{var t=r.datasets.find(t=>t[a]===e[a]);return t&&e.data&&!o.includes(t)?(o.push(t),Object.assign(t,e),t):{...e}})}function cloneData(t,e){var r={labels:[],datasets:[]};return setLabels(r,t.labels),setDatasets(r,t.datasets,e),r}function getDatasetAtEvent(t,e){return t.getElementsAtEventForMode(e,"dataset",{intersect:!0},!1)}function getElementAtEvent(t,e){return t.getElementsAtEventForMode(e,"nearest",{intersect:!0},!1)}function getElementsAtEvent(t,e){return t.getElementsAtEventForMode(e,"index",{intersect:!0},!1)}const Chart=defineComponent({props:Props,setup(s,t){let e=t["expose"];const n=ref(null),l=shallowRef(null);e({chart:l});return onMounted(()=>{var t,e,r,a,o;n.value&&({type:t,data:e,options:r,plugins:a,datasetIdKey:o}=s,o=cloneProxy(cloneData(e,o),e),l.value=new Chart$1(n.value,{type:t,data:o,options:{...r},plugins:a}))}),onBeforeUnmount(()=>{const t=toRaw(l.value);t&&(t.destroy(),l.value=null)}),watch([()=>s.options,()=>s.data],(e,r)=>{var[e,a]=e,[r,o]=r,n=toRaw(l.value);if(n){let t=!1;e&&(e=toRawIfProxy(e),r=toRawIfProxy(r),e&&e!==r&&(setOptions(n,e),t=!0)),a&&(r=toRawIfProxy(a.labels),e=toRawIfProxy(o.labels),a=toRawIfProxy(a.datasets),o=toRawIfProxy(o.datasets),r!==e&&(setLabels(n.config.data,r),t=!0),a&&a!==o&&(setDatasets(n.config.data,a,s.datasetIdKey),t=!0)),t&&n.update(s.updateMode)}},{deep:!0}),()=>h("canvas",{ref:n})}});function createTypedChart(n,t){return Chart$1.register(t),defineComponent({props:CommonProps,setup(t,e){let r=e["expose"];const a=shallowRef(null),o=t=>{a.value=t?.chart};return r({chart:a}),()=>h(Chart,compatProps({ref:o},{type:n,...t}))}})}const Bar=createTypedChart("bar",BarController),Doughnut=createTypedChart("doughnut",DoughnutController),Line=createTypedChart("line",LineController),Pie=createTypedChart("pie",PieController),PolarArea=createTypedChart("polarArea",PolarAreaController),Radar=createTypedChart("radar",RadarController),Bubble=createTypedChart("bubble",BubbleController),Scatter=createTypedChart("scatter",ScatterController);export{Bar,Bubble,Chart,Doughnut,Line,Pie,PolarArea,Radar,Scatter,createTypedChart,getDatasetAtEvent,getElementAtEvent,getElementsAtEvent};